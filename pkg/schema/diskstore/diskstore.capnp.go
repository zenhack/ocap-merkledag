// Code generated by capnpc-go. DO NOT EDIT.

package diskstore

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
	protocol "zenhack.net/go/ocap-md/pkg/schema/protocol"
)

type Addr struct{ capnp.Struct }

// Addr_TypeID is the unique identifier for the type Addr.
const Addr_TypeID = 0xe45f1d3ad96f0c55

func NewAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Addr{st}, err
}

func NewRootAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Addr{st}, err
}

func ReadRootAddr(msg *capnp.Message) (Addr, error) {
	root, err := msg.Root()
	return Addr{root.Struct()}, err
}

func (s Addr) String() string {
	str, _ := text.Marshal(0xe45f1d3ad96f0c55, s.Struct)
	return str
}

func (s Addr) Offset() uint64 {
	return s.Struct.Uint64(0)
}

func (s Addr) SetOffset(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Addr) Length() uint32 {
	return s.Struct.Uint32(8)
}

func (s Addr) SetLength(v uint32) {
	s.Struct.SetUint32(8, v)
}

// Addr_List is a list of Addr.
type Addr_List = capnp.StructList[Addr]

// NewAddr creates a new list of Addr.
func NewAddr_List(s *capnp.Segment, sz int32) (Addr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Addr]{l}, err
}

// Addr_Future is a wrapper for a Addr promised by a client call.
type Addr_Future struct{ *capnp.Future }

func (p Addr_Future) Struct() (Addr, error) {
	s, err := p.Future.Struct()
	return Addr{s}, err
}

type TrieMap struct{ capnp.Struct }
type TrieMap_leaf TrieMap
type TrieMap_Which uint16

const (
	TrieMap_Which_leaf     TrieMap_Which = 0
	TrieMap_Which_branches TrieMap_Which = 1
)

func (w TrieMap_Which) String() string {
	const s = "leafbranches"
	switch w {
	case TrieMap_Which_leaf:
		return s[0:4]
	case TrieMap_Which_branches:
		return s[4:12]

	}
	return "TrieMap_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TrieMap_TypeID is the unique identifier for the type TrieMap.
const TrieMap_TypeID = 0xcc6f8e43c0d837f7

func NewTrieMap(s *capnp.Segment) (TrieMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TrieMap{st}, err
}

func NewRootTrieMap(s *capnp.Segment) (TrieMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TrieMap{st}, err
}

func ReadRootTrieMap(msg *capnp.Message) (TrieMap, error) {
	root, err := msg.Root()
	return TrieMap{root.Struct()}, err
}

func (s TrieMap) String() string {
	str, _ := text.Marshal(0xcc6f8e43c0d837f7, s.Struct)
	return str
}

func (s TrieMap) Which() TrieMap_Which {
	return TrieMap_Which(s.Struct.Uint16(0))
}
func (s TrieMap) Leaf() TrieMap_leaf { return TrieMap_leaf(s) }

func (s TrieMap) SetLeaf() {
	s.Struct.SetUint16(0, 0)
}

func (s TrieMap_leaf) Prefix() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TrieMap_leaf) HasPrefix() bool {
	return s.Struct.HasPtr(0)
}

func (s TrieMap_leaf) SetPrefix(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TrieMap_leaf) Addr() (Addr, error) {
	p, err := s.Struct.Ptr(1)
	return Addr{Struct: p.Struct()}, err
}

func (s TrieMap_leaf) HasAddr() bool {
	return s.Struct.HasPtr(1)
}

func (s TrieMap_leaf) SetAddr(v Addr) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddr sets the addr field to a newly
// allocated Addr struct, preferring placement in s's segment.
func (s TrieMap_leaf) NewAddr() (Addr, error) {
	ss, err := NewAddr(s.Struct.Segment())
	if err != nil {
		return Addr{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s TrieMap) Branches() (Addr_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != branches")
	}
	p, err := s.Struct.Ptr(0)
	return Addr_List{List: p.List()}, err
}

func (s TrieMap) HasBranches() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s TrieMap) SetBranches(v Addr_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBranches sets the branches field to a newly
// allocated Addr_List, preferring placement in s's segment.
func (s TrieMap) NewBranches(n int32) (Addr_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewAddr_List(s.Struct.Segment(), n)
	if err != nil {
		return Addr_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TrieMap_List is a list of TrieMap.
type TrieMap_List = capnp.StructList[TrieMap]

// NewTrieMap creates a new list of TrieMap.
func NewTrieMap_List(s *capnp.Segment, sz int32) (TrieMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[TrieMap]{l}, err
}

// TrieMap_Future is a wrapper for a TrieMap promised by a client call.
type TrieMap_Future struct{ *capnp.Future }

func (p TrieMap_Future) Struct() (TrieMap, error) {
	s, err := p.Future.Struct()
	return TrieMap{s}, err
}

func (p TrieMap_Future) Leaf() TrieMap_leaf_Future { return TrieMap_leaf_Future{p.Future} }

// TrieMap_leaf_Future is a wrapper for a TrieMap_leaf promised by a client call.
type TrieMap_leaf_Future struct{ *capnp.Future }

func (p TrieMap_leaf_Future) Struct() (TrieMap_leaf, error) {
	s, err := p.Future.Struct()
	return TrieMap_leaf{s}, err
}

func (p TrieMap_leaf_Future) Addr() Addr_Future {
	return Addr_Future{Future: p.Future.Field(1, nil)}
}

type Manifest struct{ capnp.Struct }

// Manifest_TypeID is the unique identifier for the type Manifest.
const Manifest_TypeID = 0xe09672577fe40a61

func NewManifest(s *capnp.Segment) (Manifest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Manifest{st}, err
}

func NewRootManifest(s *capnp.Segment) (Manifest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Manifest{st}, err
}

func ReadRootManifest(msg *capnp.Message) (Manifest, error) {
	root, err := msg.Root()
	return Manifest{root.Struct()}, err
}

func (s Manifest) String() string {
	str, _ := text.Marshal(0xe09672577fe40a61, s.Struct)
	return str
}

func (s Manifest) BlobMap() (Addr, error) {
	p, err := s.Struct.Ptr(0)
	return Addr{Struct: p.Struct()}, err
}

func (s Manifest) HasBlobMap() bool {
	return s.Struct.HasPtr(0)
}

func (s Manifest) SetBlobMap(v Addr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlobMap sets the blobMap field to a newly
// allocated Addr struct, preferring placement in s's segment.
func (s Manifest) NewBlobMap() (Addr, error) {
	ss, err := NewAddr(s.Struct.Segment())
	if err != nil {
		return Addr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Manifest) Root() (protocol.ContentId, error) {
	p, err := s.Struct.Ptr(1)
	return protocol.ContentId{Struct: p.Struct()}, err
}

func (s Manifest) HasRoot() bool {
	return s.Struct.HasPtr(1)
}

func (s Manifest) SetRoot(v protocol.ContentId) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRoot sets the root field to a newly
// allocated protocol.ContentId struct, preferring placement in s's segment.
func (s Manifest) NewRoot() (protocol.ContentId, error) {
	ss, err := protocol.NewContentId(s.Struct.Segment())
	if err != nil {
		return protocol.ContentId{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Manifest) BlobArenaSize() uint64 {
	return s.Struct.Uint64(0)
}

func (s Manifest) SetBlobArenaSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Manifest_List is a list of Manifest.
type Manifest_List = capnp.StructList[Manifest]

// NewManifest creates a new list of Manifest.
func NewManifest_List(s *capnp.Segment, sz int32) (Manifest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Manifest]{l}, err
}

// Manifest_Future is a wrapper for a Manifest promised by a client call.
type Manifest_Future struct{ *capnp.Future }

func (p Manifest_Future) Struct() (Manifest, error) {
	s, err := p.Future.Struct()
	return Manifest{s}, err
}

func (p Manifest_Future) BlobMap() Addr_Future {
	return Addr_Future{Future: p.Future.Field(0, nil)}
}

func (p Manifest_Future) Root() protocol.ContentId_Future {
	return protocol.ContentId_Future{Future: p.Future.Field(1, nil)}
}

const schema_dc976fcd6fee6223 = "x\xda\x9c\x92Ak\x13_\x14\xc5\xcf\xb9o\xfaO\xfb" +
	"'if:\x15uQ\xbaP\xd0\x16,\x11\x04!\x9b" +
	"$J7b\xa0\x0f+\xdd(2\xe9L\x9a`\xc8\x84" +
	"\x97\x81ji\xa9\xe0\xa6.\x14\xdc\xa8\x9f\xc0\x85\x1b?" +
	"\x81 \x82\x1b\xd1\x9d\x0b\x05\x17\x0au\xa1\xa0[Q\xb0" +
	"O&\xa6&H]\xe8n\xb8s\xb8\xefw\x7f\x9c\xc2" +
	"Y\x96\x9d\xe3\xb9#\x0eD\x17F\xfe\xb3[\xef\xae\xfb" +
	"\x1b;+\xf7\xa0\x0f\x90\xf6\xcb\xc9W\x8fO\xdf\x8a\x9f" +
	"c\x9fd\x08\xf8_\xf9\x11\xf4\xbfs\x15C\xff\xb4K" +
	"\xdaC\xb5\xcf\xf1\x8b\xf8\xee\x1b\xccKF\x00\xff\x86<" +
	"\xf1oK\x06\xf0oJ\x9a\x0e\xfe\xdf\xde\\2w\xde" +
	"\xfe\x96\x1e\xe9E<\xf5\xcc\x9fR\xe9\xd7A\xf5\x10\xb4" +
	"\xe7\xb3\xf1\xeb\xe2\xd4\xa5\xed4,\x83\xb0\x93q\xe9\xbf" +
	"W\x0f\xfcO\xbd\xec\x07\xb5\x0a\xf8\x17\x9d<\x96l\xd8" +
	"\xec^\xee&\xb1\x91hn9\xe8\xb4;\xc5E\xd3\x8c" +
	"\xaaAg.\xdf\x8a\x82\xba\x1eU\x0e\xe0\x10\xf0f\x8a" +
	"\x80>\xac\xa8\x0bB\x8f\x9cd:<6\x0b\xe8\xa3\x8a" +
	":\x14\x96:&\xaa7\xaf0\x07a\x0e\xcc\x07ah" +
	"\xe8\x0e\x90\x802=NkG8<\xf4\xb8_;$" +
	"\xb9\xa0\xc8\x09\x08]\xf0\x8fTX S\xa6\xac\xb5\xe4" +
	"@\xb973\x0b\xc9q\xc7NR\x00\xcf;\x03hW" +
	"Q_\x10\xf6\xce\xb05\x13\xb4\x97\x1bQ\x17\x00\xc7\xd1" +
	"{\xea\x1f\xc8\xc6\xf7\"\xab\x06\xedf=\xea&\xe8\xb1" +
	"e\x7f\xf9\x9a?\x05\xe8\xb2\xa2^\x1f\xf2u5\xf5\x95" +
	"(\xeakB\xcaO\xda\x0d\x03\xe8uE\xbd%\xdc\xac" +
	"\xb5\xe2Z5\xe8\xfc-\x9d;(\x15\x98\x1a\xcc\x9b8" +
	"N\xe8\xda\xfb\xe6[\xe3\xe5\xda\xa3\xa7\xfd\xb1M\xf7W" +
	"L\xd4\xc6tp\xae\xb9\x16q\x0c\xc2\xb1\xa1\xb3\xb8{" +
	"V\xbe\x12\x86\xa6o{\xcf\x06H\xbf\x01\xc5~\x03N" +
	"\x08Kq\xbd\xde\x8d\x92\xdd\xa5\xa5V\xd4^I\x1a\x1c" +
	"\x85p\x14\xac8\xf48\xc1\xc5\x1f\x01\x00\x00\xff\xff\xb2" +
	"6\xc9\xa2"

func init() {
	schemas.Register(schema_dc976fcd6fee6223,
		0x9867fe7d1383e188,
		0xcc6f8e43c0d837f7,
		0xe09672577fe40a61,
		0xe45f1d3ad96f0c55)
}

// Code generated by capnpc-go. DO NOT EDIT.

package diskstore

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
	protocol "zenhack.net/go/ocap-md/pkg/schema/protocol"
)

type Addr struct{ capnp.Struct }

// Addr_TypeID is the unique identifier for the type Addr.
const Addr_TypeID = 0xe45f1d3ad96f0c55

func NewAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Addr{st}, err
}

func NewRootAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Addr{st}, err
}

func ReadRootAddr(msg *capnp.Message) (Addr, error) {
	root, err := msg.Root()
	return Addr{root.Struct()}, err
}

func (s Addr) String() string {
	str, _ := text.Marshal(0xe45f1d3ad96f0c55, s.Struct)
	return str
}

func (s Addr) Offset() uint64 {
	return s.Struct.Uint64(0)
}

func (s Addr) SetOffset(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Addr) Length() uint32 {
	return s.Struct.Uint32(8)
}

func (s Addr) SetLength(v uint32) {
	s.Struct.SetUint32(8, v)
}

// Addr_List is a list of Addr.
type Addr_List struct{ capnp.List }

// NewAddr creates a new list of Addr.
func NewAddr_List(s *capnp.Segment, sz int32) (Addr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Addr_List{l}, err
}

func (s Addr_List) At(i int) Addr { return Addr{s.List.Struct(i)} }

func (s Addr_List) Set(i int, v Addr) error { return s.List.SetStruct(i, v.Struct) }

func (s Addr_List) String() string {
	str, _ := text.MarshalList(0xe45f1d3ad96f0c55, s.List)
	return str
}

// Addr_Future is a wrapper for a Addr promised by a client call.
type Addr_Future struct{ *capnp.Future }

func (p Addr_Future) Struct() (Addr, error) {
	s, err := p.Future.Struct()
	return Addr{s}, err
}

type TrieMap struct{ capnp.Struct }
type TrieMap_leaf TrieMap
type TrieMap_Which uint16

const (
	TrieMap_Which_leaf     TrieMap_Which = 0
	TrieMap_Which_branches TrieMap_Which = 1
)

func (w TrieMap_Which) String() string {
	const s = "leafbranches"
	switch w {
	case TrieMap_Which_leaf:
		return s[0:4]
	case TrieMap_Which_branches:
		return s[4:12]

	}
	return "TrieMap_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TrieMap_TypeID is the unique identifier for the type TrieMap.
const TrieMap_TypeID = 0xcc6f8e43c0d837f7

func NewTrieMap(s *capnp.Segment) (TrieMap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TrieMap{st}, err
}

func NewRootTrieMap(s *capnp.Segment) (TrieMap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TrieMap{st}, err
}

func ReadRootTrieMap(msg *capnp.Message) (TrieMap, error) {
	root, err := msg.Root()
	return TrieMap{root.Struct()}, err
}

func (s TrieMap) String() string {
	str, _ := text.Marshal(0xcc6f8e43c0d837f7, s.Struct)
	return str
}

func (s TrieMap) Which() TrieMap_Which {
	return TrieMap_Which(s.Struct.Uint16(0))
}
func (s TrieMap) Leaf() TrieMap_leaf { return TrieMap_leaf(s) }

func (s TrieMap) SetLeaf() {
	s.Struct.SetUint16(0, 0)
}

func (s TrieMap_leaf) Prefix() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TrieMap_leaf) HasPrefix() bool {
	return s.Struct.HasPtr(0)
}

func (s TrieMap_leaf) SetPrefix(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TrieMap_leaf) Addr() (Addr, error) {
	p, err := s.Struct.Ptr(1)
	return Addr{Struct: p.Struct()}, err
}

func (s TrieMap_leaf) HasAddr() bool {
	return s.Struct.HasPtr(1)
}

func (s TrieMap_leaf) SetAddr(v Addr) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddr sets the addr field to a newly
// allocated Addr struct, preferring placement in s's segment.
func (s TrieMap_leaf) NewAddr() (Addr, error) {
	ss, err := NewAddr(s.Struct.Segment())
	if err != nil {
		return Addr{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s TrieMap) Branches() (Addr_List, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != branches")
	}
	p, err := s.Struct.Ptr(0)
	return Addr_List{List: p.List()}, err
}

func (s TrieMap) HasBranches() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s TrieMap) SetBranches(v Addr_List) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBranches sets the branches field to a newly
// allocated Addr_List, preferring placement in s's segment.
func (s TrieMap) NewBranches(n int32) (Addr_List, error) {
	s.Struct.SetUint16(0, 1)
	l, err := NewAddr_List(s.Struct.Segment(), n)
	if err != nil {
		return Addr_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TrieMap_List is a list of TrieMap.
type TrieMap_List struct{ capnp.List }

// NewTrieMap creates a new list of TrieMap.
func NewTrieMap_List(s *capnp.Segment, sz int32) (TrieMap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return TrieMap_List{l}, err
}

func (s TrieMap_List) At(i int) TrieMap { return TrieMap{s.List.Struct(i)} }

func (s TrieMap_List) Set(i int, v TrieMap) error { return s.List.SetStruct(i, v.Struct) }

func (s TrieMap_List) String() string {
	str, _ := text.MarshalList(0xcc6f8e43c0d837f7, s.List)
	return str
}

// TrieMap_Future is a wrapper for a TrieMap promised by a client call.
type TrieMap_Future struct{ *capnp.Future }

func (p TrieMap_Future) Struct() (TrieMap, error) {
	s, err := p.Future.Struct()
	return TrieMap{s}, err
}

func (p TrieMap_Future) Leaf() TrieMap_leaf_Future { return TrieMap_leaf_Future{p.Future} }

// TrieMap_leaf_Future is a wrapper for a TrieMap_leaf promised by a client call.
type TrieMap_leaf_Future struct{ *capnp.Future }

func (p TrieMap_leaf_Future) Struct() (TrieMap_leaf, error) {
	s, err := p.Future.Struct()
	return TrieMap_leaf{s}, err
}

func (p TrieMap_leaf_Future) Addr() Addr_Future {
	return Addr_Future{Future: p.Future.Field(1, nil)}
}

type WalEntry struct{ capnp.Struct }
type WalEntry_Which uint16

const (
	WalEntry_Which_noop                WalEntry_Which = 0
	WalEntry_Which_clearBlobMapStorage WalEntry_Which = 1
)

func (w WalEntry_Which) String() string {
	const s = "noopclearBlobMapStorage"
	switch w {
	case WalEntry_Which_noop:
		return s[0:4]
	case WalEntry_Which_clearBlobMapStorage:
		return s[4:23]

	}
	return "WalEntry_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// WalEntry_TypeID is the unique identifier for the type WalEntry.
const WalEntry_TypeID = 0xce6abb84859ac517

func NewWalEntry(s *capnp.Segment) (WalEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WalEntry{st}, err
}

func NewRootWalEntry(s *capnp.Segment) (WalEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WalEntry{st}, err
}

func ReadRootWalEntry(msg *capnp.Message) (WalEntry, error) {
	root, err := msg.Root()
	return WalEntry{root.Struct()}, err
}

func (s WalEntry) String() string {
	str, _ := text.Marshal(0xce6abb84859ac517, s.Struct)
	return str
}

func (s WalEntry) Which() WalEntry_Which {
	return WalEntry_Which(s.Struct.Uint16(0))
}
func (s WalEntry) SetNoop() {
	s.Struct.SetUint16(0, 0)

}

func (s WalEntry) ClearBlobMapStorage() (Addr, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != clearBlobMapStorage")
	}
	p, err := s.Struct.Ptr(0)
	return Addr{Struct: p.Struct()}, err
}

func (s WalEntry) HasClearBlobMapStorage() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s WalEntry) SetClearBlobMapStorage(v Addr) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewClearBlobMapStorage sets the clearBlobMapStorage field to a newly
// allocated Addr struct, preferring placement in s's segment.
func (s WalEntry) NewClearBlobMapStorage() (Addr, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewAddr(s.Struct.Segment())
	if err != nil {
		return Addr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// WalEntry_List is a list of WalEntry.
type WalEntry_List struct{ capnp.List }

// NewWalEntry creates a new list of WalEntry.
func NewWalEntry_List(s *capnp.Segment, sz int32) (WalEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return WalEntry_List{l}, err
}

func (s WalEntry_List) At(i int) WalEntry { return WalEntry{s.List.Struct(i)} }

func (s WalEntry_List) Set(i int, v WalEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s WalEntry_List) String() string {
	str, _ := text.MarshalList(0xce6abb84859ac517, s.List)
	return str
}

// WalEntry_Future is a wrapper for a WalEntry promised by a client call.
type WalEntry_Future struct{ *capnp.Future }

func (p WalEntry_Future) Struct() (WalEntry, error) {
	s, err := p.Future.Struct()
	return WalEntry{s}, err
}

func (p WalEntry_Future) ClearBlobMapStorage() Addr_Future {
	return Addr_Future{Future: p.Future.Field(0, nil)}
}

type Manifest struct{ capnp.Struct }

// Manifest_TypeID is the unique identifier for the type Manifest.
const Manifest_TypeID = 0xe09672577fe40a61

func NewManifest(s *capnp.Segment) (Manifest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Manifest{st}, err
}

func NewRootManifest(s *capnp.Segment) (Manifest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Manifest{st}, err
}

func ReadRootManifest(msg *capnp.Message) (Manifest, error) {
	root, err := msg.Root()
	return Manifest{root.Struct()}, err
}

func (s Manifest) String() string {
	str, _ := text.Marshal(0xe09672577fe40a61, s.Struct)
	return str
}

func (s Manifest) BlobMap() (Addr, error) {
	p, err := s.Struct.Ptr(0)
	return Addr{Struct: p.Struct()}, err
}

func (s Manifest) HasBlobMap() bool {
	return s.Struct.HasPtr(0)
}

func (s Manifest) SetBlobMap(v Addr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlobMap sets the blobMap field to a newly
// allocated Addr struct, preferring placement in s's segment.
func (s Manifest) NewBlobMap() (Addr, error) {
	ss, err := NewAddr(s.Struct.Segment())
	if err != nil {
		return Addr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Manifest) Root() (protocol.ContentId, error) {
	p, err := s.Struct.Ptr(1)
	return protocol.ContentId{Struct: p.Struct()}, err
}

func (s Manifest) HasRoot() bool {
	return s.Struct.HasPtr(1)
}

func (s Manifest) SetRoot(v protocol.ContentId) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRoot sets the root field to a newly
// allocated protocol.ContentId struct, preferring placement in s's segment.
func (s Manifest) NewRoot() (protocol.ContentId, error) {
	ss, err := protocol.NewContentId(s.Struct.Segment())
	if err != nil {
		return protocol.ContentId{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Manifest) BlobArenaSize() uint64 {
	return s.Struct.Uint64(0)
}

func (s Manifest) SetBlobArenaSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Manifest_List is a list of Manifest.
type Manifest_List struct{ capnp.List }

// NewManifest creates a new list of Manifest.
func NewManifest_List(s *capnp.Segment, sz int32) (Manifest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Manifest_List{l}, err
}

func (s Manifest_List) At(i int) Manifest { return Manifest{s.List.Struct(i)} }

func (s Manifest_List) Set(i int, v Manifest) error { return s.List.SetStruct(i, v.Struct) }

func (s Manifest_List) String() string {
	str, _ := text.MarshalList(0xe09672577fe40a61, s.List)
	return str
}

// Manifest_Future is a wrapper for a Manifest promised by a client call.
type Manifest_Future struct{ *capnp.Future }

func (p Manifest_Future) Struct() (Manifest, error) {
	s, err := p.Future.Struct()
	return Manifest{s}, err
}

func (p Manifest_Future) BlobMap() Addr_Future {
	return Addr_Future{Future: p.Future.Field(0, nil)}
}

func (p Manifest_Future) Root() protocol.ContentId_Future {
	return protocol.ContentId_Future{Future: p.Future.Field(1, nil)}
}

const schema_dc976fcd6fee6223 = "x\xda\xa4\x92OH\x14o\x1c\xc6\x9f\xe7}g]\xfd" +
	"\xa1\xee\x8c\xe3\x0f\xbb\x84\x87\x0aRH\x0c\x84`!\xfc" +
	"\x13{(\x10|\xd1\xf0\x12\xc4\xac;\xab[\xc3\xbc\xcb" +
	"\xbb\x03\xa6(\x06\x15y\xeaX\xd1\xb1C\x87 \xa2\x83" +
	"\x87\x08!\x02/R\x9d:$tH\xb0K\x87\xaeA" +
	"\x07'fV\xdbE\xb6Cu}\xe7\xc3w>\xcf\xf3" +
	"\xfd\x0e\xdf\xe5\x988\x9bY\xb3\x005\x92i\x8b\xd7w" +
	"o\xb9\xab\xfb\xf3\x0f\xa1\x8e\x91\xf1\xf7s\x1f__\xb8" +
	"\xa7\xdf\xe2\x7f\x91%\xe0\x9e\x12_Aw@,\xa2\xe9" +
	"\x9b\xb2\xc9\xf8D\xf1\x9b~\xa7\x1f|BAd\x05\xe0" +
	"n\x887\xee\xa6\xc8\x02\xee\xcb\x94\xee\xdbzt\xe7\xf6" +
	"\xabk\xef\x8f\xd2L\xe9\xf3r\xdb\xbd(\x13\xba \x13" +
	"\xda\xfboom\xd6\xdc\xff|\x84\xce\xa4\x03w\xe4\xb6" +
	"\xfb%\x85w\xe5s0\xbe\xdc\xa9w\xf2\xc7\xaf\xee%" +
	"\xb0h\xc0V\xd6\xa6\xfb\xccz\xeanX\x09\xfb\xc2Z" +
	"L\x02dr\x98\x8dK\x95\xda\xf5Z\xa4\x8d\xf0\x87\xe6" +
	"\xbcjX\xcd\xcf\x98\x8a?\xe9U\x87r\x81\xef\x95U" +
	"\xbb\xb4\x00\x8b\x803\x90\x07\xd4II5,\xe8\x90\xbd" +
	"L\x1e\xcf\x0c\x02\xea\xb4\xa4*\x09\x8eV\x8d_\xae\xdc" +
	"`\x17\x04\xbb\xc0\x9cW*\x19\xda\x0d%`\x8c\x0e\xfb" +
	"\x95%\xd8\xfc\xe8\xb0OY$9%\xc9\x1e\x08\xda\xe0" +
	"o\xad0E&N\x9dqL6\x16\xe4\x0c\x0cBt" +
	"q?\xee\xa5\x00\x1c\xe7\x12\xa0lIuE0\x8d\x11" +
	"\x17\x8d\x17\xce-\xf85\x00\xecF\xfa\xab\xbf0\xebn" +
	"e6\xeb\x05\x8502Khr\xab\x176\xd8(\xac" +
	"\xee\x966\xf6\x18P\xc3\x92*\x10\xcc\x85ZW\xd1\x16" +
	"\xcf\x05\xbeg&\x02\xcd\xe2\xa4W\x9d\x8e\xb4\xc9z\xf3" +
	"\xfe\x9f\x0a\xda\x8d+\x04[\x978\xe9\x85\x95\xb2_\x8b" +
	"\xea\xaa\x9d\xbfV[\x98\x00\xd4\x98\xa4ZiZ\xedR" +
	"\xa2\x1fI\xaa\x9b\x82\x14\xf5bW\x0d\xa0V$\xd5\xba" +
	"\xe0Z1\xd0\x89\xef?{\xe6\x8c\xd6\x11\xed\xf8\x89\xf9" +
	"\xb1\xf0ays\xebP?\x99?n\xfc\x10\xfd\xdet" +
	"e\xd9g\x07\x04;\x9ab\xf10Vn\xbcT2\x07" +
	"\xe5\xb7<VqP}\xfe\xe0XG\x04Gu\xb9\\" +
	"\xf3\xa3\xc3\xa1\xa3\x81\x1f\xceG\x0bl\x87`;8n" +
	"\xd1a\x0fg~\x06\x00\x00\xff\xff\x07\xd8\x06\x0b"

func init() {
	schemas.Register(schema_dc976fcd6fee6223,
		0x9867fe7d1383e188,
		0xcc6f8e43c0d837f7,
		0xce6abb84859ac517,
		0xe09672577fe40a61,
		0xe45f1d3ad96f0c55)
}

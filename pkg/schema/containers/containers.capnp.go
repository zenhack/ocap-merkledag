// Code generated by capnpc-go. DO NOT EDIT.

package containers

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
	protocol "zenhack.net/go/ocap-md/pkg/schema/protocol"
)

type KV struct{ capnp.Struct }

// KV_TypeID is the unique identifier for the type KV.
const KV_TypeID = 0xcfcc3326923195bc

func NewKV(s *capnp.Segment) (KV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KV{st}, err
}

func NewRootKV(s *capnp.Segment) (KV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KV{st}, err
}

func ReadRootKV(msg *capnp.Message) (KV, error) {
	root, err := msg.Root()
	return KV{root.Struct()}, err
}

func (s KV) String() string {
	str, _ := text.Marshal(0xcfcc3326923195bc, s.Struct)
	return str
}

func (s KV) Key() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s KV) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s KV) SetKey(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s KV) Val() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s KV) HasVal() bool {
	return s.Struct.HasPtr(1)
}

func (s KV) SetVal(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// KV_List is a list of KV.
type KV_List = capnp.StructList[KV]

// NewKV creates a new list of KV.
func NewKV_List(s *capnp.Segment, sz int32) (KV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[KV]{l}, err
}

// KV_Future is a wrapper for a KV promised by a client call.
type KV_Future struct{ *capnp.Future }

func (p KV_Future) Struct() (KV, error) {
	s, err := p.Future.Struct()
	return KV{s}, err
}

func (p KV_Future) Key() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p KV_Future) Val() *capnp.Future {
	return p.Future.Field(1, nil)
}

type BPlusTree struct{ capnp.Struct }

// BPlusTree_TypeID is the unique identifier for the type BPlusTree.
const BPlusTree_TypeID = 0x96262c98f85cc890

func NewBPlusTree(s *capnp.Segment) (BPlusTree, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BPlusTree{st}, err
}

func NewRootBPlusTree(s *capnp.Segment) (BPlusTree, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BPlusTree{st}, err
}

func ReadRootBPlusTree(msg *capnp.Message) (BPlusTree, error) {
	root, err := msg.Root()
	return BPlusTree{root.Struct()}, err
}

func (s BPlusTree) String() string {
	str, _ := text.Marshal(0x96262c98f85cc890, s.Struct)
	return str
}

func (s BPlusTree) Root() (BPlusTree_Node, error) {
	p, err := s.Struct.Ptr(0)
	return BPlusTree_Node{Struct: p.Struct()}, err
}

func (s BPlusTree) HasRoot() bool {
	return s.Struct.HasPtr(0)
}

func (s BPlusTree) SetRoot(v BPlusTree_Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRoot sets the root field to a newly
// allocated BPlusTree_Node struct, preferring placement in s's segment.
func (s BPlusTree) NewRoot() (BPlusTree_Node, error) {
	ss, err := NewBPlusTree_Node(s.Struct.Segment())
	if err != nil {
		return BPlusTree_Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s BPlusTree) MinBranches() uint32 {
	return s.Struct.Uint32(0)
}

func (s BPlusTree) SetMinBranches(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BPlusTree) MaxBranches() uint32 {
	return s.Struct.Uint32(4)
}

func (s BPlusTree) SetMaxBranches(v uint32) {
	s.Struct.SetUint32(4, v)
}

// BPlusTree_List is a list of BPlusTree.
type BPlusTree_List = capnp.StructList[BPlusTree]

// NewBPlusTree creates a new list of BPlusTree.
func NewBPlusTree_List(s *capnp.Segment, sz int32) (BPlusTree_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BPlusTree]{l}, err
}

// BPlusTree_Future is a wrapper for a BPlusTree promised by a client call.
type BPlusTree_Future struct{ *capnp.Future }

func (p BPlusTree_Future) Struct() (BPlusTree, error) {
	s, err := p.Future.Struct()
	return BPlusTree{s}, err
}

func (p BPlusTree_Future) Root() BPlusTree_Node_Future {
	return BPlusTree_Node_Future{Future: p.Future.Field(0, nil)}
}

type BPlusTree_Node struct{ capnp.Struct }
type BPlusTree_Node_interior BPlusTree_Node
type BPlusTree_Node_Which uint16

const (
	BPlusTree_Node_Which_leaf     BPlusTree_Node_Which = 0
	BPlusTree_Node_Which_interior BPlusTree_Node_Which = 1
)

func (w BPlusTree_Node_Which) String() string {
	const s = "leafinterior"
	switch w {
	case BPlusTree_Node_Which_leaf:
		return s[0:4]
	case BPlusTree_Node_Which_interior:
		return s[4:12]

	}
	return "BPlusTree_Node_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// BPlusTree_Node_TypeID is the unique identifier for the type BPlusTree_Node.
const BPlusTree_Node_TypeID = 0x892485c6916ad641

func NewBPlusTree_Node(s *capnp.Segment) (BPlusTree_Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BPlusTree_Node{st}, err
}

func NewRootBPlusTree_Node(s *capnp.Segment) (BPlusTree_Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BPlusTree_Node{st}, err
}

func ReadRootBPlusTree_Node(msg *capnp.Message) (BPlusTree_Node, error) {
	root, err := msg.Root()
	return BPlusTree_Node{root.Struct()}, err
}

func (s BPlusTree_Node) String() string {
	str, _ := text.Marshal(0x892485c6916ad641, s.Struct)
	return str
}

func (s BPlusTree_Node) Which() BPlusTree_Node_Which {
	return BPlusTree_Node_Which(s.Struct.Uint16(0))
}
func (s BPlusTree_Node) Leaf() (KV_List, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != leaf")
	}
	p, err := s.Struct.Ptr(0)
	return KV_List{List: p.List()}, err
}

func (s BPlusTree_Node) HasLeaf() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s BPlusTree_Node) SetLeaf(v KV_List) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLeaf sets the leaf field to a newly
// allocated KV_List, preferring placement in s's segment.
func (s BPlusTree_Node) NewLeaf(n int32) (KV_List, error) {
	s.Struct.SetUint16(0, 0)
	l, err := NewKV_List(s.Struct.Segment(), n)
	if err != nil {
		return KV_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s BPlusTree_Node) Interior() BPlusTree_Node_interior { return BPlusTree_Node_interior(s) }

func (s BPlusTree_Node) SetInterior() {
	s.Struct.SetUint16(0, 1)
}

func (s BPlusTree_Node_interior) Left() protocol.Ref {
	p, _ := s.Struct.Ptr(0)
	return protocol.Ref{Client: p.Interface().Client()}
}

func (s BPlusTree_Node_interior) HasLeft() bool {
	return s.Struct.HasPtr(0)
}

func (s BPlusTree_Node_interior) SetLeft(v protocol.Ref) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s BPlusTree_Node_interior) Branches() (KV_List, error) {
	p, err := s.Struct.Ptr(1)
	return KV_List{List: p.List()}, err
}

func (s BPlusTree_Node_interior) HasBranches() bool {
	return s.Struct.HasPtr(1)
}

func (s BPlusTree_Node_interior) SetBranches(v KV_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBranches sets the branches field to a newly
// allocated KV_List, preferring placement in s's segment.
func (s BPlusTree_Node_interior) NewBranches(n int32) (KV_List, error) {
	l, err := NewKV_List(s.Struct.Segment(), n)
	if err != nil {
		return KV_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// BPlusTree_Node_List is a list of BPlusTree_Node.
type BPlusTree_Node_List = capnp.StructList[BPlusTree_Node]

// NewBPlusTree_Node creates a new list of BPlusTree_Node.
func NewBPlusTree_Node_List(s *capnp.Segment, sz int32) (BPlusTree_Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[BPlusTree_Node]{l}, err
}

// BPlusTree_Node_Future is a wrapper for a BPlusTree_Node promised by a client call.
type BPlusTree_Node_Future struct{ *capnp.Future }

func (p BPlusTree_Node_Future) Struct() (BPlusTree_Node, error) {
	s, err := p.Future.Struct()
	return BPlusTree_Node{s}, err
}

func (p BPlusTree_Node_Future) Interior() BPlusTree_Node_interior_Future {
	return BPlusTree_Node_interior_Future{p.Future}
}

// BPlusTree_Node_interior_Future is a wrapper for a BPlusTree_Node_interior promised by a client call.
type BPlusTree_Node_interior_Future struct{ *capnp.Future }

func (p BPlusTree_Node_interior_Future) Struct() (BPlusTree_Node_interior, error) {
	s, err := p.Future.Struct()
	return BPlusTree_Node_interior{s}, err
}

func (p BPlusTree_Node_interior_Future) Left() protocol.Ref {
	return protocol.Ref{Client: p.Future.Field(0, nil).Client()}
}

const schema_eb26e91f28682410 = "x\xda\xb4\x92?hS_\x1c\xc5\xbf\xe7\xde\xf7\xf22" +
	"\xb4\xcd\xbby\xfd\x91\x1f8T\xa4\xd4\xb6\xd8\xd0\x10\x1d" +
	"\xec\x94\x16\xba\xa4\xa2\xb9*\x99Z\xf05\xbd%\xd1\xf4" +
	"%}\x89\xd6\x0e\x8e\x05\x9d\xfc\x03JqS\\E\x1c" +
	"\x85\xce\"(\x88\x08\x0e\x82\xa3\x83\xb8\x8b\"\xf5\xcaM" +
	"_\x93\xd7\x88\xe0\xa0K\x86\x93\xc7\xf7\x9e\xcf9g\xfa" +
	"-\x0aVn\xf0f\x82\x98<e'\xf4\xec\xbb\x8b\xb7" +
	"\x9fo\x8d\xde y\x08\xd0\xb7^,~\xdd>6v" +
	"\x8f\xe6\x99\xc3\\\xe4\xa78\x83w\x92;D\xde\x09\xbe" +
	"A\xb1\x0f\xa4\x00\xb4;Z\x1d\x1f\xf94\xf6\x99l8" +
	".\xbc7\xfc\xbd\xf7\x81g\x88\xbc\x8f\xfc\x09\x91\xf7\xd4" +
	"\xca\xe8k\xdf\xbf\x9c}Y\xbe\xbfM\xf20\xd0{\xed" +
	"?\xe6\xc0E\xfe\xb1U\x04\xc1{f\x99\xdb;ws" +
	"w\xc6\xf2\xaf^\x93\x10\xf1\xd3\xcc\x9c\xfef?\xf4\x90" +
	"0>v\xed\x0d\"o=\x91\xa1G\xba\xd2\x08\xda~" +
	"-P<le+~3h\xce\xcc\x95\xea\x97[\xe7" +
	"C\xa5\xb2\xa7\x1b+\x8aJ\x80Lrk@k\x0bD" +
	"bb\x92H\x8er\xc8\xeb\x0c\x83\xf8\xa1\x81\x9e?\xb1" +
	"U$\x96\xaa+\x7f\x15C\x84\x12\x07\xdc\x9e#\xa2\x02" +
	"\x04F\xa4\xc5\x10\x17\x05\x8e\xca$\xd0y\xc4\xfc\xba\x1c" +
	"H\xc7c$B\xda\xee\x13\x86\x08\xba\x16\xb4UXk" +
	"\x84D\xd4\x85`\xfd\x10\\)i\xc5C\x13\x98L\x19" +
	",9\xc0-\xa2\x0e\xd1\xbc!*p\xc8\x0b\x0c\xc00" +
	"\x8c\xb6\xb4L$\x179d\x95A0\x0c\x83\x11\x09e" +
	"\xc4\x15\x0e\xd9dH\x85\x8dF\x1bn\xefp\x1c\xafk" +
	"\xd5\xdc\x82K\xd0k\xb5`.\xf4\x83\x0a9U\xd5B" +
	"\x92\x18\x92F\xf5\xaf\xfe\xaa\xce&!\xec\xb4\xb0\xd3X" +
	"@\xb9Kf\xfd\xa6\x9el/\x06\xd3\x12\xd1\x9e\xffn" +
	"Km\x06\x81\xc8\xffz\x91H69\xce\xfd\x0f\x86T" +
	"]\xad\xb6!tngism\xf7\xcc\x83\x03\x001" +
	"Q c\x12DT\xe7\x1f\xf0\x0a\x82^6XU\xd5" +
	"\x8a\xca\xfa{S\xf8\x17\x86\xcd\x9a\xf6s\xc6~\xce\xce" +
	"\xccB9\x9a~\xb4\x93\x89#Q\xa6\xd3Q\xa6F\x9c" +
	"2\xe28\x87<\xce\xe0\\R\x9b\x1d\xc31&\xa4\x09" +
	"\xce\x15\xbf\xbe\xb7\xe1\xbe?\x0eT\xfd3\x00\x00\xff\xff" +
	"\xd6\xd7\x19g"

func init() {
	schemas.Register(schema_eb26e91f28682410,
		0x892485c6916ad641,
		0x96262c98f85cc890,
		0x989a56cb52f6fb7d,
		0xcfcc3326923195bc)
}

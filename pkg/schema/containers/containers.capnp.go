// Code generated by capnpc-go. DO NOT EDIT.

package containers

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
	protocol "zenhack.net/go/ocap-md/pkg/schema/protocol"
)

type KV struct{ capnp.Struct }

// KV_TypeID is the unique identifier for the type KV.
const KV_TypeID = 0xcfcc3326923195bc

func NewKV(s *capnp.Segment) (KV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KV{st}, err
}

func NewRootKV(s *capnp.Segment) (KV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return KV{st}, err
}

func ReadRootKV(msg *capnp.Message) (KV, error) {
	root, err := msg.Root()
	return KV{root.Struct()}, err
}

func (s KV) String() string {
	str, _ := text.Marshal(0xcfcc3326923195bc, s.Struct)
	return str
}

func (s KV) Key() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s KV) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s KV) SetKey(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s KV) Val() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s KV) HasVal() bool {
	return s.Struct.HasPtr(1)
}

func (s KV) SetVal(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// KV_List is a list of KV.
type KV_List struct{ capnp.List }

// NewKV creates a new list of KV.
func NewKV_List(s *capnp.Segment, sz int32) (KV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return KV_List{l}, err
}

func (s KV_List) At(i int) KV { return KV{s.List.Struct(i)} }

func (s KV_List) Set(i int, v KV) error { return s.List.SetStruct(i, v.Struct) }

func (s KV_List) String() string {
	str, _ := text.MarshalList(0xcfcc3326923195bc, s.List)
	return str
}

// KV_Future is a wrapper for a KV promised by a client call.
type KV_Future struct{ *capnp.Future }

func (p KV_Future) Struct() (KV, error) {
	s, err := p.Future.Struct()
	return KV{s}, err
}

func (p KV_Future) Key() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p KV_Future) Val() *capnp.Future {
	return p.Future.Field(1, nil)
}

type BPlusTree struct{ capnp.Struct }

// BPlusTree_TypeID is the unique identifier for the type BPlusTree.
const BPlusTree_TypeID = 0x96262c98f85cc890

func NewBPlusTree(s *capnp.Segment) (BPlusTree, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BPlusTree{st}, err
}

func NewRootBPlusTree(s *capnp.Segment) (BPlusTree, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BPlusTree{st}, err
}

func ReadRootBPlusTree(msg *capnp.Message) (BPlusTree, error) {
	root, err := msg.Root()
	return BPlusTree{root.Struct()}, err
}

func (s BPlusTree) String() string {
	str, _ := text.Marshal(0x96262c98f85cc890, s.Struct)
	return str
}

func (s BPlusTree) Root() (BPlusTree_Node, error) {
	p, err := s.Struct.Ptr(0)
	return BPlusTree_Node{Struct: p.Struct()}, err
}

func (s BPlusTree) HasRoot() bool {
	return s.Struct.HasPtr(0)
}

func (s BPlusTree) SetRoot(v BPlusTree_Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRoot sets the root field to a newly
// allocated BPlusTree_Node struct, preferring placement in s's segment.
func (s BPlusTree) NewRoot() (BPlusTree_Node, error) {
	ss, err := NewBPlusTree_Node(s.Struct.Segment())
	if err != nil {
		return BPlusTree_Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s BPlusTree) MinBranches() uint32 {
	return s.Struct.Uint32(0)
}

func (s BPlusTree) SetMinBranches(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BPlusTree) MaxBranches() uint32 {
	return s.Struct.Uint32(4)
}

func (s BPlusTree) SetMaxBranches(v uint32) {
	s.Struct.SetUint32(4, v)
}

// BPlusTree_List is a list of BPlusTree.
type BPlusTree_List struct{ capnp.List }

// NewBPlusTree creates a new list of BPlusTree.
func NewBPlusTree_List(s *capnp.Segment, sz int32) (BPlusTree_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return BPlusTree_List{l}, err
}

func (s BPlusTree_List) At(i int) BPlusTree { return BPlusTree{s.List.Struct(i)} }

func (s BPlusTree_List) Set(i int, v BPlusTree) error { return s.List.SetStruct(i, v.Struct) }

func (s BPlusTree_List) String() string {
	str, _ := text.MarshalList(0x96262c98f85cc890, s.List)
	return str
}

// BPlusTree_Future is a wrapper for a BPlusTree promised by a client call.
type BPlusTree_Future struct{ *capnp.Future }

func (p BPlusTree_Future) Struct() (BPlusTree, error) {
	s, err := p.Future.Struct()
	return BPlusTree{s}, err
}

func (p BPlusTree_Future) Root() BPlusTree_Node_Future {
	return BPlusTree_Node_Future{Future: p.Future.Field(0, nil)}
}

type BPlusTree_Node struct{ capnp.Struct }
type BPlusTree_Node_interior BPlusTree_Node
type BPlusTree_Node_Which uint16

const (
	BPlusTree_Node_Which_leaf     BPlusTree_Node_Which = 0
	BPlusTree_Node_Which_interior BPlusTree_Node_Which = 1
)

func (w BPlusTree_Node_Which) String() string {
	const s = "leafinterior"
	switch w {
	case BPlusTree_Node_Which_leaf:
		return s[0:4]
	case BPlusTree_Node_Which_interior:
		return s[4:12]

	}
	return "BPlusTree_Node_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// BPlusTree_Node_TypeID is the unique identifier for the type BPlusTree_Node.
const BPlusTree_Node_TypeID = 0x892485c6916ad641

func NewBPlusTree_Node(s *capnp.Segment) (BPlusTree_Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BPlusTree_Node{st}, err
}

func NewRootBPlusTree_Node(s *capnp.Segment) (BPlusTree_Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BPlusTree_Node{st}, err
}

func ReadRootBPlusTree_Node(msg *capnp.Message) (BPlusTree_Node, error) {
	root, err := msg.Root()
	return BPlusTree_Node{root.Struct()}, err
}

func (s BPlusTree_Node) String() string {
	str, _ := text.Marshal(0x892485c6916ad641, s.Struct)
	return str
}

func (s BPlusTree_Node) Which() BPlusTree_Node_Which {
	return BPlusTree_Node_Which(s.Struct.Uint16(0))
}
func (s BPlusTree_Node) Leaf() (KV_List, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != leaf")
	}
	p, err := s.Struct.Ptr(0)
	return KV_List{List: p.List()}, err
}

func (s BPlusTree_Node) HasLeaf() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s BPlusTree_Node) SetLeaf(v KV_List) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLeaf sets the leaf field to a newly
// allocated KV_List, preferring placement in s's segment.
func (s BPlusTree_Node) NewLeaf(n int32) (KV_List, error) {
	s.Struct.SetUint16(0, 0)
	l, err := NewKV_List(s.Struct.Segment(), n)
	if err != nil {
		return KV_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s BPlusTree_Node) Interior() BPlusTree_Node_interior { return BPlusTree_Node_interior(s) }

func (s BPlusTree_Node) SetInterior() {
	s.Struct.SetUint16(0, 1)
}

func (s BPlusTree_Node_interior) Left() protocol.Ref {
	p, _ := s.Struct.Ptr(0)
	return protocol.Ref{Client: p.Interface().Client()}
}

func (s BPlusTree_Node_interior) HasLeft() bool {
	return s.Struct.HasPtr(0)
}

func (s BPlusTree_Node_interior) SetLeft(v protocol.Ref) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s BPlusTree_Node_interior) Branches() (KV_List, error) {
	p, err := s.Struct.Ptr(1)
	return KV_List{List: p.List()}, err
}

func (s BPlusTree_Node_interior) HasBranches() bool {
	return s.Struct.HasPtr(1)
}

func (s BPlusTree_Node_interior) SetBranches(v KV_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBranches sets the branches field to a newly
// allocated KV_List, preferring placement in s's segment.
func (s BPlusTree_Node_interior) NewBranches(n int32) (KV_List, error) {
	l, err := NewKV_List(s.Struct.Segment(), n)
	if err != nil {
		return KV_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// BPlusTree_Node_List is a list of BPlusTree_Node.
type BPlusTree_Node_List struct{ capnp.List }

// NewBPlusTree_Node creates a new list of BPlusTree_Node.
func NewBPlusTree_Node_List(s *capnp.Segment, sz int32) (BPlusTree_Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return BPlusTree_Node_List{l}, err
}

func (s BPlusTree_Node_List) At(i int) BPlusTree_Node { return BPlusTree_Node{s.List.Struct(i)} }

func (s BPlusTree_Node_List) Set(i int, v BPlusTree_Node) error { return s.List.SetStruct(i, v.Struct) }

func (s BPlusTree_Node_List) String() string {
	str, _ := text.MarshalList(0x892485c6916ad641, s.List)
	return str
}

// BPlusTree_Node_Future is a wrapper for a BPlusTree_Node promised by a client call.
type BPlusTree_Node_Future struct{ *capnp.Future }

func (p BPlusTree_Node_Future) Struct() (BPlusTree_Node, error) {
	s, err := p.Future.Struct()
	return BPlusTree_Node{s}, err
}

func (p BPlusTree_Node_Future) Interior() BPlusTree_Node_interior_Future {
	return BPlusTree_Node_interior_Future{p.Future}
}

// BPlusTree_Node_interior_Future is a wrapper for a BPlusTree_Node_interior promised by a client call.
type BPlusTree_Node_interior_Future struct{ *capnp.Future }

func (p BPlusTree_Node_interior_Future) Struct() (BPlusTree_Node_interior, error) {
	s, err := p.Future.Struct()
	return BPlusTree_Node_interior{s}, err
}

func (p BPlusTree_Node_interior_Future) Left() protocol.Ref {
	return protocol.Ref{Client: p.Future.Field(0, nil).Client()}
}

const schema_eb26e91f28682410 = "x\xda\xb4\x92MHTQ\x1c\xc5\xcf\xb9\xf7\xbdy\xb3" +
	"0\xe7\xddy\xc6\x04-\x8c\x10SIQ\xacE\xaeT" +
	"p\xa3Q\xde\x0aW\x0a\x8dze\xa6\xc6\x99qf\xca" +
	"\\\xb4\x14j\xd5\x07\x14\xd2\xaeh\x1b\xd12p\x1dA" +
	"A\xb8i\x11\xb4l\x11\xed\xa3\x08\xbbq\xf59\xf34" +
	"\x82\x16\xb5\x99\xc5\x99\xc7\xff\x9e\xdf9gp\x8b\xa3b" +
	"\xc8\xbf\x93\x02\xf4Y?e\xc7\xde_\xb9\xf7j\xbd\xeb" +
	"6\xf4Q\xd2\xde}=\xfbm\xe3d\xf7CL\x88@" +
	"\x84\x1c\xee\x97\x82\xd1\x19\x19\x00\xd1i\xb9\x8a\xc4\x07Z" +
	"\x916\xec*\xf4t~\xee\xfe\x02\x9fA\xc8hK~" +
	"\x88>\xca\x1c\x10}\x92\xcf\x81\xe8\x85\x97\xb37\x7f|" +
	"\xbd\xf0f\xe6\xd1\x06\xf41\xb2\xf5\xdaa\x110\xe4\xf0" +
	"3o\x92`\xf4\xd2s\xb77\x1f\x0c\xdd\xef\x1e~\xfb" +
	"\x0eJ%O\x0bw\xfa\xbb\xff$b\xca\xf9\xd8\xf6W" +
	"\x81h%\x95\xc3S\xbbP)7\xf2\xc5\xb2\x91\xb5\xfa" +
	"\xc0B\xbeZ\xae\x8e\x8cO\x97\xae\xd5/\xd5\x8c\x198" +
	"WY4\x98&uZzm\xd6z\x04To\x1f\xa0" +
	"\xbb$\xf5-\xc1C\xfci\xc9\x96?\xb5>\x09\x91)" +
	"\x99\xfc\x12\xdb\xc1iI\x86-G\xc0(\x15;\xb5'" +
	"\x98\x14\x15O\xe84\xb9\xf3\x88\xfb\x0d%\x99M\xc6\x08" +
	"0\xeb\x1f\x10\xdaA[,7L\xadX\xa9\x01hB" +
	"\x88\x83\x10\xd2\x18\xed%CS\xec\xcb8,\xdd&=" +
	"`\x87h\xc2\x11\x8dJ\xea\xcb\x82d\x07\x9d67\x0f" +
	"\xe8YI]\x10T\x82\x1d\x14\x802N\\\x94\xd4U" +
	"\xc1L\xadRi0l\x1dN\xe25\xad\xba[\x0cA" +
	"\xbb\\,\x8f\xd7\xf2\xe5\x05\x04\x05Sg\x1a\x82i\xa7" +
	"\xe6o\xfc\xae\x8e\xa5\xa9\xfc\xac\xf2\xb3\x9c\xe2L\x93\xcc" +
	"\xfbC=\x03\xad\x18\\K\xc0\xae\xfffK\x0dA\xc5" +
	"\xd8\xff\xca$\xa0\xab\x92\x17\x8fP0S2K\x0d*" +
	";\xb49\xb7\xb6\xbc}\xfe\xf1>\x80\x84\xa8\x98s\x09" +
	"2\xae\xf3/x\x15h\xe7\x1dV\xc1\xd4\xe3\xb2\xfe\xdd" +
	"\x14\xfe\x87a\xb7\xa6\xbd\x9c\xb9\x97s025\x13O" +
	"?\xdeI\xef\xf18\xd3\xc18S'\xf6;\xb1GR" +
	"\x9f\x12\x0c\xae\x9a\xb5\x1d\xc3\x09&f\xc1\xe0z\xbe\xb4" +
	"\xbb\xe1\x03\x7f\xec\xab\xfaW\x00\x00\x00\xff\xff\x9aq\x19" +
	"Y"

func init() {
	schemas.Register(schema_eb26e91f28682410,
		0x892485c6916ad641,
		0x96262c98f85cc890,
		0x989a56cb52f6fb7d,
		0xcfcc3326923195bc)
}

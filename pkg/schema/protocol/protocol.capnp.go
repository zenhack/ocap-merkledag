// Code generated by capnpc-go. DO NOT EDIT.

package protocol

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Map struct{ Client *capnp.Client }

// Map_TypeID is the unique identifier for the type Map.
const Map_TypeID = 0xfb36f41541e13f38

func (c Map) Find(ctx context.Context, params func(Map_find_Params) error) (Map_find_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfb36f41541e13f38,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Map",
			MethodName:    "find",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Map_find_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Map_find_Results_Future{Future: ans.Future()}, release
}

func (c Map) AddRef() Map {
	return Map{
		Client: c.Client.AddRef(),
	}
}

func (c Map) Release() {
	c.Client.Release()
}

// A Map_Server is a Map with a local implementation.
type Map_Server interface {
	Find(context.Context, Map_find) error
}

// Map_NewServer creates a new Server from an implementation of Map_Server.
func Map_NewServer(s Map_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Map_Methods(nil, s), s, c, policy)
}

// Map_ServerToClient creates a new Client from an implementation of Map_Server.
// The caller is responsible for calling Release on the returned Client.
func Map_ServerToClient(s Map_Server, policy *server.Policy) Map {
	return Map{Client: capnp.NewClient(Map_NewServer(s, policy))}
}

// Map_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Map_Methods(methods []server.Method, s Map_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfb36f41541e13f38,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Map",
			MethodName:    "find",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Find(ctx, Map_find{call})
		},
	})

	return methods
}

// Map_find holds the state for a server call to Map.find.
// See server.Call for documentation.
type Map_find struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Map_find) Args() Map_find_Params {
	return Map_find_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Map_find) AllocResults() (Map_find_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Results{Struct: r}, err
}

type Map_find_Params struct{ capnp.Struct }

// Map_find_Params_TypeID is the unique identifier for the type Map_find_Params.
const Map_find_Params_TypeID = 0xa20a1eb578989942

func NewMap_find_Params(s *capnp.Segment) (Map_find_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Params{st}, err
}

func NewRootMap_find_Params(s *capnp.Segment) (Map_find_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Params{st}, err
}

func ReadRootMap_find_Params(msg *capnp.Message) (Map_find_Params, error) {
	root, err := msg.Root()
	return Map_find_Params{root.Struct()}, err
}

func (s Map_find_Params) String() string {
	str, _ := text.Marshal(0xa20a1eb578989942, s.Struct)
	return str
}

func (s Map_find_Params) Key() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Map_find_Params) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s Map_find_Params) SetKey(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Map_find_Params_List is a list of Map_find_Params.
type Map_find_Params_List = capnp.StructList[Map_find_Params]

// NewMap_find_Params creates a new list of Map_find_Params.
func NewMap_find_Params_List(s *capnp.Segment, sz int32) (Map_find_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Map_find_Params]{l}, err
}

// Map_find_Params_Future is a wrapper for a Map_find_Params promised by a client call.
type Map_find_Params_Future struct{ *capnp.Future }

func (p Map_find_Params_Future) Struct() (Map_find_Params, error) {
	s, err := p.Future.Struct()
	return Map_find_Params{s}, err
}

func (p Map_find_Params_Future) Key() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Map_find_Results struct{ capnp.Struct }

// Map_find_Results_TypeID is the unique identifier for the type Map_find_Results.
const Map_find_Results_TypeID = 0x9d379fc7e30aecb8

func NewMap_find_Results(s *capnp.Segment) (Map_find_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Results{st}, err
}

func NewRootMap_find_Results(s *capnp.Segment) (Map_find_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Results{st}, err
}

func ReadRootMap_find_Results(msg *capnp.Message) (Map_find_Results, error) {
	root, err := msg.Root()
	return Map_find_Results{root.Struct()}, err
}

func (s Map_find_Results) String() string {
	str, _ := text.Marshal(0x9d379fc7e30aecb8, s.Struct)
	return str
}

func (s Map_find_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Map_find_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Map_find_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Map_find_Results_List is a list of Map_find_Results.
type Map_find_Results_List = capnp.StructList[Map_find_Results]

// NewMap_find_Results creates a new list of Map_find_Results.
func NewMap_find_Results_List(s *capnp.Segment, sz int32) (Map_find_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Map_find_Results]{l}, err
}

// Map_find_Results_Future is a wrapper for a Map_find_Results promised by a client call.
type Map_find_Results_Future struct{ *capnp.Future }

func (p Map_find_Results_Future) Struct() (Map_find_Results, error) {
	s, err := p.Future.Struct()
	return Map_find_Results{s}, err
}

func (p Map_find_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Getter struct{ Client *capnp.Client }

// Getter_TypeID is the unique identifier for the type Getter.
const Getter_TypeID = 0xb1928944e0fc3173

func (c Getter) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c Getter) AddRef() Getter {
	return Getter{
		Client: c.Client.AddRef(),
	}
}

func (c Getter) Release() {
	c.Client.Release()
}

// A Getter_Server is a Getter with a local implementation.
type Getter_Server interface {
	Get(context.Context, Getter_get) error
}

// Getter_NewServer creates a new Server from an implementation of Getter_Server.
func Getter_NewServer(s Getter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Getter_Methods(nil, s), s, c, policy)
}

// Getter_ServerToClient creates a new Client from an implementation of Getter_Server.
// The caller is responsible for calling Release on the returned Client.
func Getter_ServerToClient(s Getter_Server, policy *server.Policy) Getter {
	return Getter{Client: capnp.NewClient(Getter_NewServer(s, policy))}
}

// Getter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Getter_Methods(methods []server.Method, s Getter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

// Getter_get holds the state for a server call to Getter.get.
// See server.Call for documentation.
type Getter_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Getter_get) Args() Getter_get_Params {
	return Getter_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Getter_get) AllocResults() (Getter_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results{Struct: r}, err
}

type Getter_get_Params struct{ capnp.Struct }

// Getter_get_Params_TypeID is the unique identifier for the type Getter_get_Params.
const Getter_get_Params_TypeID = 0xbf17007e9138e225

func NewGetter_get_Params(s *capnp.Segment) (Getter_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Getter_get_Params{st}, err
}

func NewRootGetter_get_Params(s *capnp.Segment) (Getter_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Getter_get_Params{st}, err
}

func ReadRootGetter_get_Params(msg *capnp.Message) (Getter_get_Params, error) {
	root, err := msg.Root()
	return Getter_get_Params{root.Struct()}, err
}

func (s Getter_get_Params) String() string {
	str, _ := text.Marshal(0xbf17007e9138e225, s.Struct)
	return str
}

// Getter_get_Params_List is a list of Getter_get_Params.
type Getter_get_Params_List = capnp.StructList[Getter_get_Params]

// NewGetter_get_Params creates a new list of Getter_get_Params.
func NewGetter_get_Params_List(s *capnp.Segment, sz int32) (Getter_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Getter_get_Params]{l}, err
}

// Getter_get_Params_Future is a wrapper for a Getter_get_Params promised by a client call.
type Getter_get_Params_Future struct{ *capnp.Future }

func (p Getter_get_Params_Future) Struct() (Getter_get_Params, error) {
	s, err := p.Future.Struct()
	return Getter_get_Params{s}, err
}

type Getter_get_Results struct{ capnp.Struct }

// Getter_get_Results_TypeID is the unique identifier for the type Getter_get_Results.
const Getter_get_Results_TypeID = 0xf3c3dfe1133f40f5

func NewGetter_get_Results(s *capnp.Segment) (Getter_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results{st}, err
}

func NewRootGetter_get_Results(s *capnp.Segment) (Getter_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results{st}, err
}

func ReadRootGetter_get_Results(msg *capnp.Message) (Getter_get_Results, error) {
	root, err := msg.Root()
	return Getter_get_Results{root.Struct()}, err
}

func (s Getter_get_Results) String() string {
	str, _ := text.Marshal(0xf3c3dfe1133f40f5, s.Struct)
	return str
}

func (s Getter_get_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Getter_get_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Getter_get_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Getter_get_Results_List is a list of Getter_get_Results.
type Getter_get_Results_List = capnp.StructList[Getter_get_Results]

// NewGetter_get_Results creates a new list of Getter_get_Results.
func NewGetter_get_Results_List(s *capnp.Segment, sz int32) (Getter_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Getter_get_Results]{l}, err
}

// Getter_get_Results_Future is a wrapper for a Getter_get_Results promised by a client call.
type Getter_get_Results_Future struct{ *capnp.Future }

func (p Getter_get_Results_Future) Struct() (Getter_get_Results, error) {
	s, err := p.Future.Struct()
	return Getter_get_Results{s}, err
}

func (p Getter_get_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Ref struct{ Client *capnp.Client }

// Ref_TypeID is the unique identifier for the type Ref.
const Ref_TypeID = 0xa14ffd6d795dbc31

func (c Ref) GetStored(ctx context.Context, params func(Ref_getStored_Params) error) (Ref_getStored_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa14ffd6d795dbc31,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Ref",
			MethodName:    "getStored",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ref_getStored_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Ref_getStored_Results_Future{Future: ans.Future()}, release
}
func (c Ref) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c Ref) AddRef() Ref {
	return Ref{
		Client: c.Client.AddRef(),
	}
}

func (c Ref) Release() {
	c.Client.Release()
}

// A Ref_Server is a Ref with a local implementation.
type Ref_Server interface {
	GetStored(context.Context, Ref_getStored) error

	Get(context.Context, Getter_get) error
}

// Ref_NewServer creates a new Server from an implementation of Ref_Server.
func Ref_NewServer(s Ref_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ref_Methods(nil, s), s, c, policy)
}

// Ref_ServerToClient creates a new Client from an implementation of Ref_Server.
// The caller is responsible for calling Release on the returned Client.
func Ref_ServerToClient(s Ref_Server, policy *server.Policy) Ref {
	return Ref{Client: capnp.NewClient(Ref_NewServer(s, policy))}
}

// Ref_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ref_Methods(methods []server.Method, s Ref_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa14ffd6d795dbc31,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Ref",
			MethodName:    "getStored",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetStored(ctx, Ref_getStored{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

// Ref_getStored holds the state for a server call to Ref.getStored.
// See server.Call for documentation.
type Ref_getStored struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ref_getStored) Args() Ref_getStored_Params {
	return Ref_getStored_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Ref_getStored) AllocResults() (Ref_getStored_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ref_getStored_Results{Struct: r}, err
}

type Ref_getStored_Params struct{ capnp.Struct }

// Ref_getStored_Params_TypeID is the unique identifier for the type Ref_getStored_Params.
const Ref_getStored_Params_TypeID = 0xa28b89f8877a0b1c

func NewRef_getStored_Params(s *capnp.Segment) (Ref_getStored_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ref_getStored_Params{st}, err
}

func NewRootRef_getStored_Params(s *capnp.Segment) (Ref_getStored_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ref_getStored_Params{st}, err
}

func ReadRootRef_getStored_Params(msg *capnp.Message) (Ref_getStored_Params, error) {
	root, err := msg.Root()
	return Ref_getStored_Params{root.Struct()}, err
}

func (s Ref_getStored_Params) String() string {
	str, _ := text.Marshal(0xa28b89f8877a0b1c, s.Struct)
	return str
}

// Ref_getStored_Params_List is a list of Ref_getStored_Params.
type Ref_getStored_Params_List = capnp.StructList[Ref_getStored_Params]

// NewRef_getStored_Params creates a new list of Ref_getStored_Params.
func NewRef_getStored_Params_List(s *capnp.Segment, sz int32) (Ref_getStored_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Ref_getStored_Params]{l}, err
}

// Ref_getStored_Params_Future is a wrapper for a Ref_getStored_Params promised by a client call.
type Ref_getStored_Params_Future struct{ *capnp.Future }

func (p Ref_getStored_Params_Future) Struct() (Ref_getStored_Params, error) {
	s, err := p.Future.Struct()
	return Ref_getStored_Params{s}, err
}

type Ref_getStored_Results struct{ capnp.Struct }

// Ref_getStored_Results_TypeID is the unique identifier for the type Ref_getStored_Results.
const Ref_getStored_Results_TypeID = 0xfe10400cc1d31474

func NewRef_getStored_Results(s *capnp.Segment) (Ref_getStored_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ref_getStored_Results{st}, err
}

func NewRootRef_getStored_Results(s *capnp.Segment) (Ref_getStored_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ref_getStored_Results{st}, err
}

func ReadRootRef_getStored_Results(msg *capnp.Message) (Ref_getStored_Results, error) {
	root, err := msg.Root()
	return Ref_getStored_Results{root.Struct()}, err
}

func (s Ref_getStored_Results) String() string {
	str, _ := text.Marshal(0xfe10400cc1d31474, s.Struct)
	return str
}

func (s Ref_getStored_Results) StoredValue() (Stored, error) {
	p, err := s.Struct.Ptr(0)
	return Stored{Struct: p.Struct()}, err
}

func (s Ref_getStored_Results) HasStoredValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Ref_getStored_Results) SetStoredValue(v Stored) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStoredValue sets the storedValue field to a newly
// allocated Stored struct, preferring placement in s's segment.
func (s Ref_getStored_Results) NewStoredValue() (Stored, error) {
	ss, err := NewStored(s.Struct.Segment())
	if err != nil {
		return Stored{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Ref_getStored_Results_List is a list of Ref_getStored_Results.
type Ref_getStored_Results_List = capnp.StructList[Ref_getStored_Results]

// NewRef_getStored_Results creates a new list of Ref_getStored_Results.
func NewRef_getStored_Results_List(s *capnp.Segment, sz int32) (Ref_getStored_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ref_getStored_Results]{l}, err
}

// Ref_getStored_Results_Future is a wrapper for a Ref_getStored_Results promised by a client call.
type Ref_getStored_Results_Future struct{ *capnp.Future }

func (p Ref_getStored_Results_Future) Struct() (Ref_getStored_Results, error) {
	s, err := p.Future.Struct()
	return Ref_getStored_Results{s}, err
}

func (p Ref_getStored_Results_Future) StoredValue() Stored_Future {
	return Stored_Future{Future: p.Future.Field(0, nil)}
}

type Setter struct{ Client *capnp.Client }

// Setter_TypeID is the unique identifier for the type Setter.
const Setter_TypeID = 0xedefcf72d1a4dcd5

func (c Setter) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}

func (c Setter) AddRef() Setter {
	return Setter{
		Client: c.Client.AddRef(),
	}
}

func (c Setter) Release() {
	c.Client.Release()
}

// A Setter_Server is a Setter with a local implementation.
type Setter_Server interface {
	Set(context.Context, Setter_set) error
}

// Setter_NewServer creates a new Server from an implementation of Setter_Server.
func Setter_NewServer(s Setter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Setter_Methods(nil, s), s, c, policy)
}

// Setter_ServerToClient creates a new Client from an implementation of Setter_Server.
// The caller is responsible for calling Release on the returned Client.
func Setter_ServerToClient(s Setter_Server, policy *server.Policy) Setter {
	return Setter{Client: capnp.NewClient(Setter_NewServer(s, policy))}
}

// Setter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Setter_Methods(methods []server.Method, s Setter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	return methods
}

// Setter_set holds the state for a server call to Setter.set.
// See server.Call for documentation.
type Setter_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Setter_set) Args() Setter_set_Params {
	return Setter_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Setter_set) AllocResults() (Setter_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results{Struct: r}, err
}

type Setter_set_Params struct{ capnp.Struct }

// Setter_set_Params_TypeID is the unique identifier for the type Setter_set_Params.
const Setter_set_Params_TypeID = 0xc57b0d3e5cf4c9ee

func NewSetter_set_Params(s *capnp.Segment) (Setter_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Setter_set_Params{st}, err
}

func NewRootSetter_set_Params(s *capnp.Segment) (Setter_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Setter_set_Params{st}, err
}

func ReadRootSetter_set_Params(msg *capnp.Message) (Setter_set_Params, error) {
	root, err := msg.Root()
	return Setter_set_Params{root.Struct()}, err
}

func (s Setter_set_Params) String() string {
	str, _ := text.Marshal(0xc57b0d3e5cf4c9ee, s.Struct)
	return str
}

func (s Setter_set_Params) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Setter_set_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Setter_set_Params) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Setter_set_Params_List is a list of Setter_set_Params.
type Setter_set_Params_List = capnp.StructList[Setter_set_Params]

// NewSetter_set_Params creates a new list of Setter_set_Params.
func NewSetter_set_Params_List(s *capnp.Segment, sz int32) (Setter_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Setter_set_Params]{l}, err
}

// Setter_set_Params_Future is a wrapper for a Setter_set_Params promised by a client call.
type Setter_set_Params_Future struct{ *capnp.Future }

func (p Setter_set_Params_Future) Struct() (Setter_set_Params, error) {
	s, err := p.Future.Struct()
	return Setter_set_Params{s}, err
}

func (p Setter_set_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Setter_set_Results struct{ capnp.Struct }

// Setter_set_Results_TypeID is the unique identifier for the type Setter_set_Results.
const Setter_set_Results_TypeID = 0x92f67194cfd010ca

func NewSetter_set_Results(s *capnp.Segment) (Setter_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results{st}, err
}

func NewRootSetter_set_Results(s *capnp.Segment) (Setter_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results{st}, err
}

func ReadRootSetter_set_Results(msg *capnp.Message) (Setter_set_Results, error) {
	root, err := msg.Root()
	return Setter_set_Results{root.Struct()}, err
}

func (s Setter_set_Results) String() string {
	str, _ := text.Marshal(0x92f67194cfd010ca, s.Struct)
	return str
}

// Setter_set_Results_List is a list of Setter_set_Results.
type Setter_set_Results_List = capnp.StructList[Setter_set_Results]

// NewSetter_set_Results creates a new list of Setter_set_Results.
func NewSetter_set_Results_List(s *capnp.Segment, sz int32) (Setter_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Setter_set_Results]{l}, err
}

// Setter_set_Results_Future is a wrapper for a Setter_set_Results promised by a client call.
type Setter_set_Results_Future struct{ *capnp.Future }

func (p Setter_set_Results_Future) Struct() (Setter_set_Results, error) {
	s, err := p.Future.Struct()
	return Setter_set_Results{s}, err
}

type Cell struct{ Client *capnp.Client }

// Cell_TypeID is the unique identifier for the type Cell.
const Cell_TypeID = 0x86dfe7e96ebb541d

func (c Cell) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}
func (c Cell) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c Cell) AddRef() Cell {
	return Cell{
		Client: c.Client.AddRef(),
	}
}

func (c Cell) Release() {
	c.Client.Release()
}

// A Cell_Server is a Cell with a local implementation.
type Cell_Server interface {
	Set(context.Context, Setter_set) error

	Get(context.Context, Getter_get) error
}

// Cell_NewServer creates a new Server from an implementation of Cell_Server.
func Cell_NewServer(s Cell_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cell_Methods(nil, s), s, c, policy)
}

// Cell_ServerToClient creates a new Client from an implementation of Cell_Server.
// The caller is responsible for calling Release on the returned Client.
func Cell_ServerToClient(s Cell_Server, policy *server.Policy) Cell {
	return Cell{Client: capnp.NewClient(Cell_NewServer(s, policy))}
}

// Cell_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cell_Methods(methods []server.Method, s Cell_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

type TxCell struct{ Client *capnp.Client }

// TxCell_TypeID is the unique identifier for the type TxCell.
const TxCell_TypeID = 0xfcd1f0de6c4076f9

func (c TxCell) TxGet(ctx context.Context, params func(TxCell_txGet_Params) error) (TxCell_txGet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TxCell_txGet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TxCell_txGet_Results_Future{Future: ans.Future()}, release
}
func (c TxCell) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}
func (c TxCell) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c TxCell) AddRef() TxCell {
	return TxCell{
		Client: c.Client.AddRef(),
	}
}

func (c TxCell) Release() {
	c.Client.Release()
}

// A TxCell_Server is a TxCell with a local implementation.
type TxCell_Server interface {
	TxGet(context.Context, TxCell_txGet) error

	Set(context.Context, Setter_set) error

	Get(context.Context, Getter_get) error
}

// TxCell_NewServer creates a new Server from an implementation of TxCell_Server.
func TxCell_NewServer(s TxCell_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TxCell_Methods(nil, s), s, c, policy)
}

// TxCell_ServerToClient creates a new Client from an implementation of TxCell_Server.
// The caller is responsible for calling Release on the returned Client.
func TxCell_ServerToClient(s TxCell_Server, policy *server.Policy) TxCell {
	return TxCell{Client: capnp.NewClient(TxCell_NewServer(s, policy))}
}

// TxCell_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TxCell_Methods(methods []server.Method, s TxCell_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TxGet(ctx, TxCell_txGet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

// TxCell_txGet holds the state for a server call to TxCell.txGet.
// See server.Call for documentation.
type TxCell_txGet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TxCell_txGet) Args() TxCell_txGet_Params {
	return TxCell_txGet_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TxCell_txGet) AllocResults() (TxCell_txGet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxCell_txGet_Results{Struct: r}, err
}

type TxCell_txGet_Params struct{ capnp.Struct }

// TxCell_txGet_Params_TypeID is the unique identifier for the type TxCell_txGet_Params.
const TxCell_txGet_Params_TypeID = 0xf39598e0c091fed8

func NewTxCell_txGet_Params(s *capnp.Segment) (TxCell_txGet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TxCell_txGet_Params{st}, err
}

func NewRootTxCell_txGet_Params(s *capnp.Segment) (TxCell_txGet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TxCell_txGet_Params{st}, err
}

func ReadRootTxCell_txGet_Params(msg *capnp.Message) (TxCell_txGet_Params, error) {
	root, err := msg.Root()
	return TxCell_txGet_Params{root.Struct()}, err
}

func (s TxCell_txGet_Params) String() string {
	str, _ := text.Marshal(0xf39598e0c091fed8, s.Struct)
	return str
}

// TxCell_txGet_Params_List is a list of TxCell_txGet_Params.
type TxCell_txGet_Params_List = capnp.StructList[TxCell_txGet_Params]

// NewTxCell_txGet_Params creates a new list of TxCell_txGet_Params.
func NewTxCell_txGet_Params_List(s *capnp.Segment, sz int32) (TxCell_txGet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TxCell_txGet_Params]{l}, err
}

// TxCell_txGet_Params_Future is a wrapper for a TxCell_txGet_Params promised by a client call.
type TxCell_txGet_Params_Future struct{ *capnp.Future }

func (p TxCell_txGet_Params_Future) Struct() (TxCell_txGet_Params, error) {
	s, err := p.Future.Struct()
	return TxCell_txGet_Params{s}, err
}

type TxCell_txGet_Results struct{ capnp.Struct }

// TxCell_txGet_Results_TypeID is the unique identifier for the type TxCell_txGet_Results.
const TxCell_txGet_Results_TypeID = 0xdfeaf85f84328172

func NewTxCell_txGet_Results(s *capnp.Segment) (TxCell_txGet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxCell_txGet_Results{st}, err
}

func NewRootTxCell_txGet_Results(s *capnp.Segment) (TxCell_txGet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxCell_txGet_Results{st}, err
}

func ReadRootTxCell_txGet_Results(msg *capnp.Message) (TxCell_txGet_Results, error) {
	root, err := msg.Root()
	return TxCell_txGet_Results{root.Struct()}, err
}

func (s TxCell_txGet_Results) String() string {
	str, _ := text.Marshal(0xdfeaf85f84328172, s.Struct)
	return str
}

func (s TxCell_txGet_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s TxCell_txGet_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s TxCell_txGet_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s TxCell_txGet_Results) Setter() Setter {
	p, _ := s.Struct.Ptr(1)
	return Setter{Client: p.Interface().Client()}
}

func (s TxCell_txGet_Results) HasSetter() bool {
	return s.Struct.HasPtr(1)
}

func (s TxCell_txGet_Results) SetSetter(v Setter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// TxCell_txGet_Results_List is a list of TxCell_txGet_Results.
type TxCell_txGet_Results_List = capnp.StructList[TxCell_txGet_Results]

// NewTxCell_txGet_Results creates a new list of TxCell_txGet_Results.
func NewTxCell_txGet_Results_List(s *capnp.Segment, sz int32) (TxCell_txGet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TxCell_txGet_Results]{l}, err
}

// TxCell_txGet_Results_Future is a wrapper for a TxCell_txGet_Results promised by a client call.
type TxCell_txGet_Results_Future struct{ *capnp.Future }

func (p TxCell_txGet_Results_Future) Struct() (TxCell_txGet_Results, error) {
	s, err := p.Future.Struct()
	return TxCell_txGet_Results{s}, err
}

func (p TxCell_txGet_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p TxCell_txGet_Results_Future) Setter() Setter {
	return Setter{Client: p.Future.Field(1, nil).Client()}
}

type RootPtr struct{ Client *capnp.Client }

// RootPtr_TypeID is the unique identifier for the type RootPtr.
const RootPtr_TypeID = 0xec69889c3a1aaf50

func (c RootPtr) TxGet(ctx context.Context, params func(TxCell_txGet_Params) error) (TxCell_txGet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TxCell_txGet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TxCell_txGet_Results_Future{Future: ans.Future()}, release
}
func (c RootPtr) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}
func (c RootPtr) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c RootPtr) AddRef() RootPtr {
	return RootPtr{
		Client: c.Client.AddRef(),
	}
}

func (c RootPtr) Release() {
	c.Client.Release()
}

// A RootPtr_Server is a RootPtr with a local implementation.
type RootPtr_Server interface {
	TxGet(context.Context, TxCell_txGet) error

	Set(context.Context, Setter_set) error

	Get(context.Context, Getter_get) error
}

// RootPtr_NewServer creates a new Server from an implementation of RootPtr_Server.
func RootPtr_NewServer(s RootPtr_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RootPtr_Methods(nil, s), s, c, policy)
}

// RootPtr_ServerToClient creates a new Client from an implementation of RootPtr_Server.
// The caller is responsible for calling Release on the returned Client.
func RootPtr_ServerToClient(s RootPtr_Server, policy *server.Policy) RootPtr {
	return RootPtr{Client: capnp.NewClient(RootPtr_NewServer(s, policy))}
}

// RootPtr_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RootPtr_Methods(methods []server.Method, s RootPtr_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TxGet(ctx, TxCell_txGet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

type Storage struct{ Client *capnp.Client }

// Storage_TypeID is the unique identifier for the type Storage.
const Storage_TypeID = 0x84ec75049386a248

func (c Storage) Put(ctx context.Context, params func(Storage_put_Params) error) (Storage_put_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84ec75049386a248,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Storage",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Storage_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Storage_put_Results_Future{Future: ans.Future()}, release
}

func (c Storage) AddRef() Storage {
	return Storage{
		Client: c.Client.AddRef(),
	}
}

func (c Storage) Release() {
	c.Client.Release()
}

// A Storage_Server is a Storage with a local implementation.
type Storage_Server interface {
	Put(context.Context, Storage_put) error
}

// Storage_NewServer creates a new Server from an implementation of Storage_Server.
func Storage_NewServer(s Storage_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Storage_Methods(nil, s), s, c, policy)
}

// Storage_ServerToClient creates a new Client from an implementation of Storage_Server.
// The caller is responsible for calling Release on the returned Client.
func Storage_ServerToClient(s Storage_Server, policy *server.Policy) Storage {
	return Storage{Client: capnp.NewClient(Storage_NewServer(s, policy))}
}

// Storage_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Storage_Methods(methods []server.Method, s Storage_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84ec75049386a248,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Storage",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, Storage_put{call})
		},
	})

	return methods
}

// Storage_put holds the state for a server call to Storage.put.
// See server.Call for documentation.
type Storage_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Storage_put) Args() Storage_put_Params {
	return Storage_put_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Storage_put) AllocResults() (Storage_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Results{Struct: r}, err
}

type Storage_put_Params struct{ capnp.Struct }

// Storage_put_Params_TypeID is the unique identifier for the type Storage_put_Params.
const Storage_put_Params_TypeID = 0xd17d67c20039536b

func NewStorage_put_Params(s *capnp.Segment) (Storage_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Params{st}, err
}

func NewRootStorage_put_Params(s *capnp.Segment) (Storage_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Params{st}, err
}

func ReadRootStorage_put_Params(msg *capnp.Message) (Storage_put_Params, error) {
	root, err := msg.Root()
	return Storage_put_Params{root.Struct()}, err
}

func (s Storage_put_Params) String() string {
	str, _ := text.Marshal(0xd17d67c20039536b, s.Struct)
	return str
}

func (s Storage_put_Params) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Storage_put_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Storage_put_Params) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Storage_put_Params_List is a list of Storage_put_Params.
type Storage_put_Params_List = capnp.StructList[Storage_put_Params]

// NewStorage_put_Params creates a new list of Storage_put_Params.
func NewStorage_put_Params_List(s *capnp.Segment, sz int32) (Storage_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Storage_put_Params]{l}, err
}

// Storage_put_Params_Future is a wrapper for a Storage_put_Params promised by a client call.
type Storage_put_Params_Future struct{ *capnp.Future }

func (p Storage_put_Params_Future) Struct() (Storage_put_Params, error) {
	s, err := p.Future.Struct()
	return Storage_put_Params{s}, err
}

func (p Storage_put_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Storage_put_Results struct{ capnp.Struct }

// Storage_put_Results_TypeID is the unique identifier for the type Storage_put_Results.
const Storage_put_Results_TypeID = 0xc5dc8978c148f57a

func NewStorage_put_Results(s *capnp.Segment) (Storage_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Results{st}, err
}

func NewRootStorage_put_Results(s *capnp.Segment) (Storage_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Results{st}, err
}

func ReadRootStorage_put_Results(msg *capnp.Message) (Storage_put_Results, error) {
	root, err := msg.Root()
	return Storage_put_Results{root.Struct()}, err
}

func (s Storage_put_Results) String() string {
	str, _ := text.Marshal(0xc5dc8978c148f57a, s.Struct)
	return str
}

func (s Storage_put_Results) Ref() Ref {
	p, _ := s.Struct.Ptr(0)
	return Ref{Client: p.Interface().Client()}
}

func (s Storage_put_Results) HasRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Storage_put_Results) SetRef(v Ref) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Storage_put_Results_List is a list of Storage_put_Results.
type Storage_put_Results_List = capnp.StructList[Storage_put_Results]

// NewStorage_put_Results creates a new list of Storage_put_Results.
func NewStorage_put_Results_List(s *capnp.Segment, sz int32) (Storage_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Storage_put_Results]{l}, err
}

// Storage_put_Results_Future is a wrapper for a Storage_put_Results promised by a client call.
type Storage_put_Results_Future struct{ *capnp.Future }

func (p Storage_put_Results_Future) Struct() (Storage_put_Results, error) {
	s, err := p.Future.Struct()
	return Storage_put_Results{s}, err
}

func (p Storage_put_Results_Future) Ref() Ref {
	return Ref{Client: p.Future.Field(0, nil).Client()}
}

type Dynamic struct{ capnp.Struct }

// Dynamic_TypeID is the unique identifier for the type Dynamic.
const Dynamic_TypeID = 0xc03ae9bd42824061

func NewDynamic(s *capnp.Segment) (Dynamic, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Dynamic{st}, err
}

func NewRootDynamic(s *capnp.Segment) (Dynamic, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Dynamic{st}, err
}

func ReadRootDynamic(msg *capnp.Message) (Dynamic, error) {
	root, err := msg.Root()
	return Dynamic{root.Struct()}, err
}

func (s Dynamic) String() string {
	str, _ := text.Marshal(0xc03ae9bd42824061, s.Struct)
	return str
}

func (s Dynamic) Ref() Ref {
	p, _ := s.Struct.Ptr(0)
	return Ref{Client: p.Interface().Client()}
}

func (s Dynamic) HasRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Dynamic) SetRef(v Ref) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Dynamic) TypeId() uint64 {
	return s.Struct.Uint64(0)
}

func (s Dynamic) SetTypeId(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Dynamic_List is a list of Dynamic.
type Dynamic_List = capnp.StructList[Dynamic]

// NewDynamic creates a new list of Dynamic.
func NewDynamic_List(s *capnp.Segment, sz int32) (Dynamic_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Dynamic]{l}, err
}

// Dynamic_Future is a wrapper for a Dynamic promised by a client call.
type Dynamic_Future struct{ *capnp.Future }

func (p Dynamic_Future) Struct() (Dynamic, error) {
	s, err := p.Future.Struct()
	return Dynamic{s}, err
}

func (p Dynamic_Future) Ref() Ref {
	return Ref{Client: p.Future.Field(0, nil).Client()}
}

type ContentId struct{ capnp.Struct }

// ContentId_TypeID is the unique identifier for the type ContentId.
const ContentId_TypeID = 0xc5bd7ad468fa72a6

func NewContentId(s *capnp.Segment) (ContentId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ContentId{st}, err
}

func NewRootContentId(s *capnp.Segment) (ContentId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ContentId{st}, err
}

func ReadRootContentId(msg *capnp.Message) (ContentId, error) {
	root, err := msg.Root()
	return ContentId{root.Struct()}, err
}

func (s ContentId) String() string {
	str, _ := text.Marshal(0xc5bd7ad468fa72a6, s.Struct)
	return str
}

func (s ContentId) Digest() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ContentId) HasDigest() bool {
	return s.Struct.HasPtr(0)
}

func (s ContentId) SetDigest(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ContentId) Algo() ContentId_Algo {
	return ContentId_Algo(s.Struct.Uint16(0))
}

func (s ContentId) SetAlgo(v ContentId_Algo) {
	s.Struct.SetUint16(0, uint16(v))
}

// ContentId_List is a list of ContentId.
type ContentId_List = capnp.StructList[ContentId]

// NewContentId creates a new list of ContentId.
func NewContentId_List(s *capnp.Segment, sz int32) (ContentId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ContentId]{l}, err
}

// ContentId_Future is a wrapper for a ContentId promised by a client call.
type ContentId_Future struct{ *capnp.Future }

func (p ContentId_Future) Struct() (ContentId, error) {
	s, err := p.Future.Struct()
	return ContentId{s}, err
}

type ContentId_Algo uint16

// ContentId_Algo_TypeID is the unique identifier for the type ContentId_Algo.
const ContentId_Algo_TypeID = 0x889936d1bbf13253

// Values of ContentId_Algo.
const (
	ContentId_Algo_sha256 ContentId_Algo = 0
)

// String returns the enum's constant name.
func (c ContentId_Algo) String() string {
	switch c {
	case ContentId_Algo_sha256:
		return "sha256"

	default:
		return ""
	}
}

// ContentId_AlgoFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ContentId_AlgoFromString(c string) ContentId_Algo {
	switch c {
	case "sha256":
		return ContentId_Algo_sha256

	default:
		return 0
	}
}

type ContentId_Algo_List = capnp.EnumList[ContentId_Algo]

func NewContentId_Algo_List(s *capnp.Segment, sz int32) (ContentId_Algo_List, error) {
	return capnp.NewEnumList[ContentId_Algo](s, sz)
}

type Stored struct{ capnp.Struct }

// Stored_TypeID is the unique identifier for the type Stored.
const Stored_TypeID = 0xe6eb5cba7d06cb58

func NewStored(s *capnp.Segment) (Stored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Stored{st}, err
}

func NewRootStored(s *capnp.Segment) (Stored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Stored{st}, err
}

func ReadRootStored(msg *capnp.Message) (Stored, error) {
	root, err := msg.Root()
	return Stored{root.Struct()}, err
}

func (s Stored) String() string {
	str, _ := text.Marshal(0xe6eb5cba7d06cb58, s.Struct)
	return str
}

func (s Stored) Data() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Stored) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Stored) SetData(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Stored) Refs() (ContentId_List, error) {
	p, err := s.Struct.Ptr(1)
	return ContentId_List{List: p.List()}, err
}

func (s Stored) HasRefs() bool {
	return s.Struct.HasPtr(1)
}

func (s Stored) SetRefs(v ContentId_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRefs sets the refs field to a newly
// allocated ContentId_List, preferring placement in s's segment.
func (s Stored) NewRefs(n int32) (ContentId_List, error) {
	l, err := NewContentId_List(s.Struct.Segment(), n)
	if err != nil {
		return ContentId_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Stored_List is a list of Stored.
type Stored_List = capnp.StructList[Stored]

// NewStored creates a new list of Stored.
func NewStored_List(s *capnp.Segment, sz int32) (Stored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Stored]{l}, err
}

// Stored_Future is a wrapper for a Stored promised by a client call.
type Stored_Future struct{ *capnp.Future }

func (p Stored_Future) Struct() (Stored, error) {
	s, err := p.Future.Struct()
	return Stored{s}, err
}

func (p Stored_Future) Data() *capnp.Future {
	return p.Future.Field(0, nil)
}

type RootApi struct{ Client *capnp.Client }

// RootApi_TypeID is the unique identifier for the type RootApi.
const RootApi_TypeID = 0xbf3d5608637940e8

func (c RootApi) BlobMap(ctx context.Context, params func(RootApi_blobMap_Params) error) (RootApi_blobMap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      0,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "blobMap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RootApi_blobMap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RootApi_blobMap_Results_Future{Future: ans.Future()}, release
}
func (c RootApi) Root(ctx context.Context, params func(RootApi_root_Params) error) (RootApi_root_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      1,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "root",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RootApi_root_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RootApi_root_Results_Future{Future: ans.Future()}, release
}
func (c RootApi) Storage(ctx context.Context, params func(RootApi_storage_Params) error) (RootApi_storage_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      2,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "storage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RootApi_storage_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RootApi_storage_Results_Future{Future: ans.Future()}, release
}

func (c RootApi) AddRef() RootApi {
	return RootApi{
		Client: c.Client.AddRef(),
	}
}

func (c RootApi) Release() {
	c.Client.Release()
}

// A RootApi_Server is a RootApi with a local implementation.
type RootApi_Server interface {
	BlobMap(context.Context, RootApi_blobMap) error

	Root(context.Context, RootApi_root) error

	Storage(context.Context, RootApi_storage) error
}

// RootApi_NewServer creates a new Server from an implementation of RootApi_Server.
func RootApi_NewServer(s RootApi_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RootApi_Methods(nil, s), s, c, policy)
}

// RootApi_ServerToClient creates a new Client from an implementation of RootApi_Server.
// The caller is responsible for calling Release on the returned Client.
func RootApi_ServerToClient(s RootApi_Server, policy *server.Policy) RootApi {
	return RootApi{Client: capnp.NewClient(RootApi_NewServer(s, policy))}
}

// RootApi_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RootApi_Methods(methods []server.Method, s RootApi_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      0,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "blobMap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.BlobMap(ctx, RootApi_blobMap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      1,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "root",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Root(ctx, RootApi_root{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      2,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "storage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Storage(ctx, RootApi_storage{call})
		},
	})

	return methods
}

// RootApi_blobMap holds the state for a server call to RootApi.blobMap.
// See server.Call for documentation.
type RootApi_blobMap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RootApi_blobMap) Args() RootApi_blobMap_Params {
	return RootApi_blobMap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RootApi_blobMap) AllocResults() (RootApi_blobMap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_blobMap_Results{Struct: r}, err
}

// RootApi_root holds the state for a server call to RootApi.root.
// See server.Call for documentation.
type RootApi_root struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RootApi_root) Args() RootApi_root_Params {
	return RootApi_root_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RootApi_root) AllocResults() (RootApi_root_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_root_Results{Struct: r}, err
}

// RootApi_storage holds the state for a server call to RootApi.storage.
// See server.Call for documentation.
type RootApi_storage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RootApi_storage) Args() RootApi_storage_Params {
	return RootApi_storage_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RootApi_storage) AllocResults() (RootApi_storage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_storage_Results{Struct: r}, err
}

type RootApi_blobMap_Params struct{ capnp.Struct }

// RootApi_blobMap_Params_TypeID is the unique identifier for the type RootApi_blobMap_Params.
const RootApi_blobMap_Params_TypeID = 0xe2e07eea432c8e12

func NewRootApi_blobMap_Params(s *capnp.Segment) (RootApi_blobMap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_blobMap_Params{st}, err
}

func NewRootRootApi_blobMap_Params(s *capnp.Segment) (RootApi_blobMap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_blobMap_Params{st}, err
}

func ReadRootRootApi_blobMap_Params(msg *capnp.Message) (RootApi_blobMap_Params, error) {
	root, err := msg.Root()
	return RootApi_blobMap_Params{root.Struct()}, err
}

func (s RootApi_blobMap_Params) String() string {
	str, _ := text.Marshal(0xe2e07eea432c8e12, s.Struct)
	return str
}

// RootApi_blobMap_Params_List is a list of RootApi_blobMap_Params.
type RootApi_blobMap_Params_List = capnp.StructList[RootApi_blobMap_Params]

// NewRootApi_blobMap_Params creates a new list of RootApi_blobMap_Params.
func NewRootApi_blobMap_Params_List(s *capnp.Segment, sz int32) (RootApi_blobMap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RootApi_blobMap_Params]{l}, err
}

// RootApi_blobMap_Params_Future is a wrapper for a RootApi_blobMap_Params promised by a client call.
type RootApi_blobMap_Params_Future struct{ *capnp.Future }

func (p RootApi_blobMap_Params_Future) Struct() (RootApi_blobMap_Params, error) {
	s, err := p.Future.Struct()
	return RootApi_blobMap_Params{s}, err
}

type RootApi_blobMap_Results struct{ capnp.Struct }

// RootApi_blobMap_Results_TypeID is the unique identifier for the type RootApi_blobMap_Results.
const RootApi_blobMap_Results_TypeID = 0xa7d5e26e70f192f5

func NewRootApi_blobMap_Results(s *capnp.Segment) (RootApi_blobMap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_blobMap_Results{st}, err
}

func NewRootRootApi_blobMap_Results(s *capnp.Segment) (RootApi_blobMap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_blobMap_Results{st}, err
}

func ReadRootRootApi_blobMap_Results(msg *capnp.Message) (RootApi_blobMap_Results, error) {
	root, err := msg.Root()
	return RootApi_blobMap_Results{root.Struct()}, err
}

func (s RootApi_blobMap_Results) String() string {
	str, _ := text.Marshal(0xa7d5e26e70f192f5, s.Struct)
	return str
}

func (s RootApi_blobMap_Results) Map() Map {
	p, _ := s.Struct.Ptr(0)
	return Map{Client: p.Interface().Client()}
}

func (s RootApi_blobMap_Results) HasMap() bool {
	return s.Struct.HasPtr(0)
}

func (s RootApi_blobMap_Results) SetMap(v Map) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RootApi_blobMap_Results_List is a list of RootApi_blobMap_Results.
type RootApi_blobMap_Results_List = capnp.StructList[RootApi_blobMap_Results]

// NewRootApi_blobMap_Results creates a new list of RootApi_blobMap_Results.
func NewRootApi_blobMap_Results_List(s *capnp.Segment, sz int32) (RootApi_blobMap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RootApi_blobMap_Results]{l}, err
}

// RootApi_blobMap_Results_Future is a wrapper for a RootApi_blobMap_Results promised by a client call.
type RootApi_blobMap_Results_Future struct{ *capnp.Future }

func (p RootApi_blobMap_Results_Future) Struct() (RootApi_blobMap_Results, error) {
	s, err := p.Future.Struct()
	return RootApi_blobMap_Results{s}, err
}

func (p RootApi_blobMap_Results_Future) Map() Map {
	return Map{Client: p.Future.Field(0, nil).Client()}
}

type RootApi_root_Params struct{ capnp.Struct }

// RootApi_root_Params_TypeID is the unique identifier for the type RootApi_root_Params.
const RootApi_root_Params_TypeID = 0x9eb1a39212b38ec1

func NewRootApi_root_Params(s *capnp.Segment) (RootApi_root_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_root_Params{st}, err
}

func NewRootRootApi_root_Params(s *capnp.Segment) (RootApi_root_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_root_Params{st}, err
}

func ReadRootRootApi_root_Params(msg *capnp.Message) (RootApi_root_Params, error) {
	root, err := msg.Root()
	return RootApi_root_Params{root.Struct()}, err
}

func (s RootApi_root_Params) String() string {
	str, _ := text.Marshal(0x9eb1a39212b38ec1, s.Struct)
	return str
}

// RootApi_root_Params_List is a list of RootApi_root_Params.
type RootApi_root_Params_List = capnp.StructList[RootApi_root_Params]

// NewRootApi_root_Params creates a new list of RootApi_root_Params.
func NewRootApi_root_Params_List(s *capnp.Segment, sz int32) (RootApi_root_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RootApi_root_Params]{l}, err
}

// RootApi_root_Params_Future is a wrapper for a RootApi_root_Params promised by a client call.
type RootApi_root_Params_Future struct{ *capnp.Future }

func (p RootApi_root_Params_Future) Struct() (RootApi_root_Params, error) {
	s, err := p.Future.Struct()
	return RootApi_root_Params{s}, err
}

type RootApi_root_Results struct{ capnp.Struct }

// RootApi_root_Results_TypeID is the unique identifier for the type RootApi_root_Results.
const RootApi_root_Results_TypeID = 0xd73f2e504c7f9730

func NewRootApi_root_Results(s *capnp.Segment) (RootApi_root_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_root_Results{st}, err
}

func NewRootRootApi_root_Results(s *capnp.Segment) (RootApi_root_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_root_Results{st}, err
}

func ReadRootRootApi_root_Results(msg *capnp.Message) (RootApi_root_Results, error) {
	root, err := msg.Root()
	return RootApi_root_Results{root.Struct()}, err
}

func (s RootApi_root_Results) String() string {
	str, _ := text.Marshal(0xd73f2e504c7f9730, s.Struct)
	return str
}

func (s RootApi_root_Results) Root() RootPtr {
	p, _ := s.Struct.Ptr(0)
	return RootPtr{Client: p.Interface().Client()}
}

func (s RootApi_root_Results) HasRoot() bool {
	return s.Struct.HasPtr(0)
}

func (s RootApi_root_Results) SetRoot(v RootPtr) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RootApi_root_Results_List is a list of RootApi_root_Results.
type RootApi_root_Results_List = capnp.StructList[RootApi_root_Results]

// NewRootApi_root_Results creates a new list of RootApi_root_Results.
func NewRootApi_root_Results_List(s *capnp.Segment, sz int32) (RootApi_root_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RootApi_root_Results]{l}, err
}

// RootApi_root_Results_Future is a wrapper for a RootApi_root_Results promised by a client call.
type RootApi_root_Results_Future struct{ *capnp.Future }

func (p RootApi_root_Results_Future) Struct() (RootApi_root_Results, error) {
	s, err := p.Future.Struct()
	return RootApi_root_Results{s}, err
}

func (p RootApi_root_Results_Future) Root() RootPtr {
	return RootPtr{Client: p.Future.Field(0, nil).Client()}
}

type RootApi_storage_Params struct{ capnp.Struct }

// RootApi_storage_Params_TypeID is the unique identifier for the type RootApi_storage_Params.
const RootApi_storage_Params_TypeID = 0xfdb4062d10a3ca31

func NewRootApi_storage_Params(s *capnp.Segment) (RootApi_storage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_storage_Params{st}, err
}

func NewRootRootApi_storage_Params(s *capnp.Segment) (RootApi_storage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_storage_Params{st}, err
}

func ReadRootRootApi_storage_Params(msg *capnp.Message) (RootApi_storage_Params, error) {
	root, err := msg.Root()
	return RootApi_storage_Params{root.Struct()}, err
}

func (s RootApi_storage_Params) String() string {
	str, _ := text.Marshal(0xfdb4062d10a3ca31, s.Struct)
	return str
}

// RootApi_storage_Params_List is a list of RootApi_storage_Params.
type RootApi_storage_Params_List = capnp.StructList[RootApi_storage_Params]

// NewRootApi_storage_Params creates a new list of RootApi_storage_Params.
func NewRootApi_storage_Params_List(s *capnp.Segment, sz int32) (RootApi_storage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RootApi_storage_Params]{l}, err
}

// RootApi_storage_Params_Future is a wrapper for a RootApi_storage_Params promised by a client call.
type RootApi_storage_Params_Future struct{ *capnp.Future }

func (p RootApi_storage_Params_Future) Struct() (RootApi_storage_Params, error) {
	s, err := p.Future.Struct()
	return RootApi_storage_Params{s}, err
}

type RootApi_storage_Results struct{ capnp.Struct }

// RootApi_storage_Results_TypeID is the unique identifier for the type RootApi_storage_Results.
const RootApi_storage_Results_TypeID = 0xcd2937d0c1251d4e

func NewRootApi_storage_Results(s *capnp.Segment) (RootApi_storage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_storage_Results{st}, err
}

func NewRootRootApi_storage_Results(s *capnp.Segment) (RootApi_storage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_storage_Results{st}, err
}

func ReadRootRootApi_storage_Results(msg *capnp.Message) (RootApi_storage_Results, error) {
	root, err := msg.Root()
	return RootApi_storage_Results{root.Struct()}, err
}

func (s RootApi_storage_Results) String() string {
	str, _ := text.Marshal(0xcd2937d0c1251d4e, s.Struct)
	return str
}

func (s RootApi_storage_Results) Storage() Storage {
	p, _ := s.Struct.Ptr(0)
	return Storage{Client: p.Interface().Client()}
}

func (s RootApi_storage_Results) HasStorage() bool {
	return s.Struct.HasPtr(0)
}

func (s RootApi_storage_Results) SetStorage(v Storage) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RootApi_storage_Results_List is a list of RootApi_storage_Results.
type RootApi_storage_Results_List = capnp.StructList[RootApi_storage_Results]

// NewRootApi_storage_Results creates a new list of RootApi_storage_Results.
func NewRootApi_storage_Results_List(s *capnp.Segment, sz int32) (RootApi_storage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RootApi_storage_Results]{l}, err
}

// RootApi_storage_Results_Future is a wrapper for a RootApi_storage_Results promised by a client call.
type RootApi_storage_Results_Future struct{ *capnp.Future }

func (p RootApi_storage_Results_Future) Struct() (RootApi_storage_Results, error) {
	s, err := p.Future.Struct()
	return RootApi_storage_Results{s}, err
}

func (p RootApi_storage_Results_Future) Storage() Storage {
	return Storage{Client: p.Future.Field(0, nil).Client()}
}

const schema_ca7b236fb6fb07c3 = "x\xda\x9cW}\x8c\x1bG\x15\x7fom\xef\xf8\xeb\xba" +
	"\x1eO\xc2\xa9Q\x8b\xe9\x91\xa8\xe4\x84\xad\xdc\x85\xa4\xcd" +
	"I\xc1v\x12\xe4T\x10\xf0\xde\xa5Q\x91Z\xc1&\xde" +
	"\xbb\x9e\xea;\xbb\xde\xbd6\x97\xea\x1a\x15\x95\xd2\x88\xaa" +
	"R\x02\x15MU@\xa4\x08\xc4_\xe8\x02A\xe4J\xd4" +
	"\x1eUT%\x08\xb5\x11D\x10\xa9%\x1f(@J\x0a" +
	"\x1cm\xa0\xdf\x8bf\xec\xdd\x1d\xdb\x9b\xbb\x90\x7fg\xdf" +
	"\xbcy\xef\xf7\xfb\xbd\x8f]\xf3l\xb8\x10\x1e\xe8\xd1\x92" +
	"\xa0\xe8ODTg\xeb\xa1\xc7\xbe\x15\x9e\xba\xfc(P" +
	"-\xe4\xbcD\xde\xffE\xed\x93\x0f\x9d\x04@\xf6fd" +
	"\x8e]\x89\x10\x00\xb6\x10)\xb1[T\x02\xe0\xdc\xbc\xfd" +
	"\xf9\xc9K\x7f=\xfbX\x871\xa4\x90\xc5\xd4C\x8cr" +
	"#\xd6\xa3\x12\xd6\xa3\xde\xcafT\xcd\x19\x19\\x\xfe" +
	"\xd4\xfa\x83\x8f\x03\xbdQq~\xd4x\xef\xde\xdf\xef9" +
	"v\x9c{\xbf_\xfd7\x9b\x11\xe6\xd3j\x06\xd09\x99" +
	"z\xf5\x95o\xdf\xff\x9f\x03@?\x86\x00a\x92\xc2\xb5" +
	"\x13j\x1a!\xec\xfc\xf2r\xfc\xcf/\x7f\xff\xb6\xef\x02" +
	"e\x08\x10A\xfe\xe9NUA@\xf6e5\x0f\xe8\xcc" +
	"?\xf9\xb3\xf4\x81\xe7f\xbf\x07\xb4W\\\x05X;\xad" +
	"\xae\xe0W\x07~u\xcf\xf4\xc4\x87_\xfaA@\xb8\x86" +
	"\xfa\x0c\x1b\x17\xef\x9bj\x89\x1dU{\xd9\x82\xaa9\x9b" +
	"\x0e>\xbd\xfb\xc8\xc7\xe3\x87\xa4\xb7\xd8E\xf5=@v" +
	"I<uSb\xcf7\xde\xd9\xf7\xcd\xd6w\x11e\x8c" +
	"\xf4\xf1\xa7\xae\x1cX\xa8O^8\xfd\xe3f\x10\x11\xe4" +
	"Q,\xa8C<\xcaw\xc5Uk\xe0\x83s[\xf6\x1d" +
	"\x98\x0d\x88e?9\xcc\x0e\x12\x1e\xcbS\xa4\xc4.\x12" +
	"\xc2.\x12\xed\xec\xaa\x0b\xb7\xef\x7f\xb8\xf7\x05\x1f\x8f3" +
	"$\xce_\xfa[azWt\xc7\xc6\x17\xba\x08\x9b'" +
	"s\xec\x84ps\x9c\xbc\xcc6F9aF\xe1k\x9b" +
	"\x8e]\x1az\x11t\x0d\xd1\xb7\x16\xf1\xb1U\xd19\x96" +
	"\xe5flu\xf4A@\xe7\x1f'\xde\xbe\xfb\xb3=\x0f" +
	"\x1dor\xd0D\xfaH4\xces8\x16\xe59x\x04" +
	"\x06y{=z\x92]\x8a\xf6r\xbd\x08o{\xael" +
	"\x9d\xdf\xbd\xef\xb5\xe3\x1e\")\\\xbb-\xb6\x82{\xbb" +
	"3\x96\x07`\xc7b\x9a\xf3\xc5\x9bW\xcd\xbfz\xdb\xea" +
	"\xdf\xca\xb0\xcd\xc6\x04lGcy\xc0\xff\xde7\xb2\xe1" +
	"\xd7c3\xa7$\x1fgbi\xfe\xf9\xbc\xf0qc\\" +
	"s\xd6|g\xef\x17\xca\xb9\xfc\x1fd\x1f=\xf1>n" +
	"\xb4<\xce\xc3n<2\xf8\xe8W\xdey\xe3l+/" +
	"\x85{Y\xd74\xd8\x18\xe7\xa1\xa6\x9f\xfc\xf4\xe67\x1e" +
	">wAR\xd0\x89\xf8 \x07\xfb\xae\xdf\xa83sw" +
	"\xff\xfd/@59a\xee\x82\xcd\xc6\x0f\xb3\xa3q\x9e" +
	"\xfa\x91\xf8\x83\x00lCBs\xca?]1\xf4\xec\xe3" +
	"\xe3\x97\xbb\xc8\xc9&\xe6\xd8\xba\x047\x1eH\x106\x90" +
	"\xe8\x05pN\xbf\xf6\xc3S\x8dW\xfe\xf9f\x80$\x1e" +
	"I\x1cf\xfb\x84\xf9\xd7\x13%v:A\xd8\xe9\x84\xe6" +
	"\xfc\xf1\xa3\xfd/\x9e{\xfa\xa9\xb7\xa4\"9\x91\x10J" +
	"\xbfR\xc8\xb3\xf3g_zK\xa6n6!\x80:\x9a" +
	"\xe0\x18\xdc\x9e?_\\\xfe\xf6\xfa\xf7\x03\xde:\x93x" +
	"\x86\x9d\x17o\xbd\x9e(\xb1l\x92\xb0l\xb2\xd7y\xf7" +
	"\x81B\xf5O\xff:\xf5A\xc0\x85\xd5\xc9\xc3l \xc9" +
	"/d\x93%6\x93\xeceG\x92\x9a3p\xf2\xb9T" +
	"V\xfd\xf9\x87\x12\x88?I\x0a\x10\xede\xbf\x9bO\x16" +
	"R\x1f\xc9\x15\xbc?\xd9\xcf\x83;\x98\xccC\xd6\xa97" +
	"jvmW\xad\x8a\xb9]F}\xb2>4\x92\xb7k" +
	"\x0dc\xcc,#\xea\xe1P\x04\xc0\x95\x81$*\xda\x07" +
	"\x0a\x8dh\xa4>e\x17\xc3H1\x8d\xdb\xcb\x88]\xae" +
	"6\x13\xb3Z-#\x96C\x11=\x8a\xe8c^\x8cJ" +
	"5Y\\\x83\x143zX\x91\x0c\x00(\xf6\xeaaD" +
	"~\x191\x8d\xe8\xb7?\xfe\xadi\xee\xb9X\xdc\xdc\x0d" +
	"\xd1\x8bOq\xe3\xabM\xda\xe6\xa4}G%\x93+V" +
	"\xc7j\"cT\x00hd\x08 o\xddk\x0c\xae[" +
	"\xef]\x0a\xb9\xf8\x98\xb6m6r\x96i\xaf\x1c6\xad" +
	"\xa9\xaa\x8dV\x97\xcd6\xa3\x9e\x1b\x1d\x9f\xac\xb4,," +
	"\xd0\xc3\xa10@\x18\x01h\xcf \x80\x1e\x0d\xa1\xbeL" +
	"\xc1\xcc\x03Fu\xca\xc4t\x04%\x91\x00`\x1a\xb0\xcb" +
	"\xe7p\xadf\x17\xeb\xe3\xb9F\xadf\xaf,\x1b\x0d#" +
	"4au!>\x1c2G=\xe2\xbc\x8e\x89\xae\x08(" +
	"\x1d\x06(\xa6\xb0\xf8\x09\xa4\x03\xc4\x193\xed\x11\xbb\xd6" +
	"0\x01+.\xa4^\xd7F\xf4qn;,p\x90$" +
	"\xec\x0bx-tx.\x16\xa1\xc3C-\xcf\xd3\x9b\xb0" +
	"d\xd0\xfa|\xd0\xc8}\xe6\xb4\xf0\xb9$b\xe6h\xce" +
	"M\xb1\xc2!#\xc6\x84uU\\wVk;\xb7\x19" +
	"\xf5\x95\xc3\xf9&gA\xaf?\xa1 \x990\xeaH\xe5" +
	"\xb7}\x00\xa4C\x8a\xb7r\xc9#\xf2{\x88z*\x84" +
	"\x98\x92\x870R\x19\x13\xdf\x87t\xd8\x0e\"(H\xa1" +
	"\xbb\xc6J\x19\xa1G\x8ftwtI]\x89\xf6\x01\x14" +
	"\x93X\xbc\x09i\x96\x901\xd3\xee\"L&\xbb\xed\xb0" +
	"\x80e\xc4.\xc2\\\xe8J\xcdR\x183\x9b\x82\x9c\xb0" +
	"\x00\xba\x15\x99o\xe2\xcb\x03L\x0aU\xba\x0d\x1f\xdd\xb1" +
	"M\xf5M\xa0\xd0\xcf\x11\xf4\xd7\x09t\xe7\x0a\xdd\xd0\x0f" +
	"\x0a\xcd\x12T\xbc\x1e\x87\xee\xdc\xa2\xb7\xf0{\xcb\xc9\xde" +
	"\x16u\x05\xd4xq\x14p\xaf\xd5la\"\xfa\xae\x88" +
	"\xb6\xe4\xa7'\x8d\x89\xf1]eA\x8e\xcb\xf1j\xce\xf1" +
	"\xca\x10\xea_U\x10q\x99@\xe4\x9e!\x00\xfd\xae\x10" +
	"\xea\x15\x05I\xc3\x1c\xbdN\xce\xf2\xf6t\xdd\xbc\xa3\x82" +
	"1P0\x16\xa0S\xa9\xa3\xb80.\xd1/\xb0\xadU" +
	"\xb6\x89\xbf\xab\xb7qg\x88\xd22\x88\xfd\x1a\xefvr" +
	"\xeeC\xad\xdc\xd7\xf8\xb9g\xfb\x01\xf4O\x85P\xff\x8c" +
	"\x82\xf9\xca\xf8\x98i\xd9\xd8\x03\x0a\xf6\x00jFu\xac" +
	"\x86\xd2~\x09\x88ZP^M\x16r\xf5\xa9V\xab\x0c" +
	"\x05W\xd5\x96\xebD\x17\xa5=\x07\x80#}U\xa5\xba" +
	"E\xde\x12F`\x91o\xf2qv\x05\x84\xd4_\xd1y" +
	"\xc9.\x91\xa4`\x0f\xad%\xc9s'j\x93\xba%\x83" +
	"\x16\x1d\x9f\x03H:\"\xee\xf7\x9d\x0b\xe5#\xf5w\xa0" +
	"\xab\x84\xbb}\xf7f\xb3Z\xcd\xd9\xbbK\xa6\xe4S\x92" +
	"\xc2\xa0/\x05\xeaia\xa8\xa5\x85J\x9b\x04\xbd-\xa5" +
	"\x99G\xde\x12:F*k\xb3pM\xb3]\xf6D\x17" +
	"\x99}n\x8f.gD\x9dt\xef.\x19\xd1\xeb;*" +
	"\xbb?(%W\xde[\x14\xd4*\x86m\x888\xbc\x8d" +
	"\xb3\x99\x91\xd60G-\xbc\x01D\x9c\xed\xdd\xfb\x86\x00" +
	"\xde\xdaZ^\xd9n\xb46\x9f\xb0\x9c\xa0\x8f\x87\x94s" +
	"\x1b\x1e\xffg\x15\xa4\xfc\xdf\x8c\x80\xe90\xd21\x1d\xbc" +
	"\xdf\x0ct\xff\xf9:\xa6\x83\xe5O\x07\x8f0y:\xb4" +
	"\x1d.>\x1d\xda\xa4\xd6\xb9\xb0\x04\x8c\x10w\x9bZ\xba" +
	"\xf7I\x8bF[\xefs\xb3\xde\x162\xea~\xca\xee\x7f" +
	"%\xba?\xb3\x94\xf6K)k|\xe5\xe8\x9a\xe0r\xce" +
	"m\x87\xcd\x9c\xa3H#i\x1aI\xe3\xe7qG\xd7\xf3" +
	"\xdb3\"s?\x02\xf7\xd7\x01\xdd\x9f!J\x07\xa5\x08" +
	"2\x02\xa2.]\xc8!\xb4\x1d\xb660o\xc3\xf5E" +
	"\xd2\xb6#_\xbd\xc6\xae\xb9Mv\xd6Y\xf0f5l" +
	"ZZg3\xdd\x09\xa0'C\xa8o\xe5\x1b\x850\xdb" +
	"a\x00\xe1\x04\xa6\xe4*\xf3C\x97\x0e\x17[\x1e1\x05" +
	"\xf8\xbf\x00\x00\x00\xff\xff5\x0e\xf2\x9f"

func init() {
	schemas.Register(schema_ca7b236fb6fb07c3,
		0x84ec75049386a248,
		0x86dfe7e96ebb541d,
		0x889936d1bbf13253,
		0x92f67194cfd010ca,
		0x9d379fc7e30aecb8,
		0x9eb1a39212b38ec1,
		0xa14ffd6d795dbc31,
		0xa20a1eb578989942,
		0xa28b89f8877a0b1c,
		0xa7d5e26e70f192f5,
		0xb1928944e0fc3173,
		0xbf17007e9138e225,
		0xbf3d5608637940e8,
		0xc03ae9bd42824061,
		0xc57b0d3e5cf4c9ee,
		0xc5bd7ad468fa72a6,
		0xc5dc8978c148f57a,
		0xcd2937d0c1251d4e,
		0xd17d67c20039536b,
		0xd73f2e504c7f9730,
		0xdfeaf85f84328172,
		0xe2e07eea432c8e12,
		0xe6eb5cba7d06cb58,
		0xec69889c3a1aaf50,
		0xedefcf72d1a4dcd5,
		0xf39598e0c091fed8,
		0xf3c3dfe1133f40f5,
		0xfb36f41541e13f38,
		0xfcd1f0de6c4076f9,
		0xfdb4062d10a3ca31,
		0xfe10400cc1d31474)
}

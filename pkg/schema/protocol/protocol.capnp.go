// Code generated by capnpc-go. DO NOT EDIT.

package protocol

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Map struct{ Client *capnp.Client }

// Map_TypeID is the unique identifier for the type Map.
const Map_TypeID = 0xfb36f41541e13f38

func (c Map) Find(ctx context.Context, params func(Map_find_Params) error) (Map_find_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfb36f41541e13f38,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Map",
			MethodName:    "find",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Map_find_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Map_find_Results_Future{Future: ans.Future()}, release
}

func (c Map) AddRef() Map {
	return Map{
		Client: c.Client.AddRef(),
	}
}

func (c Map) Release() {
	c.Client.Release()
}

// A Map_Server is a Map with a local implementation.
type Map_Server interface {
	Find(context.Context, Map_find) error
}

// Map_NewServer creates a new Server from an implementation of Map_Server.
func Map_NewServer(s Map_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Map_Methods(nil, s), s, c, policy)
}

// Map_ServerToClient creates a new Client from an implementation of Map_Server.
// The caller is responsible for calling Release on the returned Client.
func Map_ServerToClient(s Map_Server, policy *server.Policy) Map {
	return Map{Client: capnp.NewClient(Map_NewServer(s, policy))}
}

// Map_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Map_Methods(methods []server.Method, s Map_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfb36f41541e13f38,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Map",
			MethodName:    "find",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Find(ctx, Map_find{call})
		},
	})

	return methods
}

// Map_find holds the state for a server call to Map.find.
// See server.Call for documentation.
type Map_find struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Map_find) Args() Map_find_Params {
	return Map_find_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Map_find) AllocResults() (Map_find_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Results{Struct: r}, err
}

type Map_find_Params struct{ capnp.Struct }

// Map_find_Params_TypeID is the unique identifier for the type Map_find_Params.
const Map_find_Params_TypeID = 0xa20a1eb578989942

func NewMap_find_Params(s *capnp.Segment) (Map_find_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Params{st}, err
}

func NewRootMap_find_Params(s *capnp.Segment) (Map_find_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Params{st}, err
}

func ReadRootMap_find_Params(msg *capnp.Message) (Map_find_Params, error) {
	root, err := msg.Root()
	return Map_find_Params{root.Struct()}, err
}

func (s Map_find_Params) String() string {
	str, _ := text.Marshal(0xa20a1eb578989942, s.Struct)
	return str
}

func (s Map_find_Params) Key() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Map_find_Params) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s Map_find_Params) SetKey(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Map_find_Params_List is a list of Map_find_Params.
type Map_find_Params_List = capnp.StructList[Map_find_Params]

// NewMap_find_Params creates a new list of Map_find_Params.
func NewMap_find_Params_List(s *capnp.Segment, sz int32) (Map_find_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Map_find_Params]{l}, err
}

// Map_find_Params_Future is a wrapper for a Map_find_Params promised by a client call.
type Map_find_Params_Future struct{ *capnp.Future }

func (p Map_find_Params_Future) Struct() (Map_find_Params, error) {
	s, err := p.Future.Struct()
	return Map_find_Params{s}, err
}

func (p Map_find_Params_Future) Key() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Map_find_Results struct{ capnp.Struct }

// Map_find_Results_TypeID is the unique identifier for the type Map_find_Results.
const Map_find_Results_TypeID = 0x9d379fc7e30aecb8

func NewMap_find_Results(s *capnp.Segment) (Map_find_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Results{st}, err
}

func NewRootMap_find_Results(s *capnp.Segment) (Map_find_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Results{st}, err
}

func ReadRootMap_find_Results(msg *capnp.Message) (Map_find_Results, error) {
	root, err := msg.Root()
	return Map_find_Results{root.Struct()}, err
}

func (s Map_find_Results) String() string {
	str, _ := text.Marshal(0x9d379fc7e30aecb8, s.Struct)
	return str
}

func (s Map_find_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Map_find_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Map_find_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Map_find_Results_List is a list of Map_find_Results.
type Map_find_Results_List = capnp.StructList[Map_find_Results]

// NewMap_find_Results creates a new list of Map_find_Results.
func NewMap_find_Results_List(s *capnp.Segment, sz int32) (Map_find_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Map_find_Results]{l}, err
}

// Map_find_Results_Future is a wrapper for a Map_find_Results promised by a client call.
type Map_find_Results_Future struct{ *capnp.Future }

func (p Map_find_Results_Future) Struct() (Map_find_Results, error) {
	s, err := p.Future.Struct()
	return Map_find_Results{s}, err
}

func (p Map_find_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Getter struct{ Client *capnp.Client }

// Getter_TypeID is the unique identifier for the type Getter.
const Getter_TypeID = 0xb1928944e0fc3173

func (c Getter) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c Getter) AddRef() Getter {
	return Getter{
		Client: c.Client.AddRef(),
	}
}

func (c Getter) Release() {
	c.Client.Release()
}

// A Getter_Server is a Getter with a local implementation.
type Getter_Server interface {
	Get(context.Context, Getter_get) error
}

// Getter_NewServer creates a new Server from an implementation of Getter_Server.
func Getter_NewServer(s Getter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Getter_Methods(nil, s), s, c, policy)
}

// Getter_ServerToClient creates a new Client from an implementation of Getter_Server.
// The caller is responsible for calling Release on the returned Client.
func Getter_ServerToClient(s Getter_Server, policy *server.Policy) Getter {
	return Getter{Client: capnp.NewClient(Getter_NewServer(s, policy))}
}

// Getter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Getter_Methods(methods []server.Method, s Getter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

// Getter_get holds the state for a server call to Getter.get.
// See server.Call for documentation.
type Getter_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Getter_get) Args() Getter_get_Params {
	return Getter_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Getter_get) AllocResults() (Getter_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results{Struct: r}, err
}

type Getter_get_Params struct{ capnp.Struct }

// Getter_get_Params_TypeID is the unique identifier for the type Getter_get_Params.
const Getter_get_Params_TypeID = 0xbf17007e9138e225

func NewGetter_get_Params(s *capnp.Segment) (Getter_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Getter_get_Params{st}, err
}

func NewRootGetter_get_Params(s *capnp.Segment) (Getter_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Getter_get_Params{st}, err
}

func ReadRootGetter_get_Params(msg *capnp.Message) (Getter_get_Params, error) {
	root, err := msg.Root()
	return Getter_get_Params{root.Struct()}, err
}

func (s Getter_get_Params) String() string {
	str, _ := text.Marshal(0xbf17007e9138e225, s.Struct)
	return str
}

// Getter_get_Params_List is a list of Getter_get_Params.
type Getter_get_Params_List = capnp.StructList[Getter_get_Params]

// NewGetter_get_Params creates a new list of Getter_get_Params.
func NewGetter_get_Params_List(s *capnp.Segment, sz int32) (Getter_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Getter_get_Params]{l}, err
}

// Getter_get_Params_Future is a wrapper for a Getter_get_Params promised by a client call.
type Getter_get_Params_Future struct{ *capnp.Future }

func (p Getter_get_Params_Future) Struct() (Getter_get_Params, error) {
	s, err := p.Future.Struct()
	return Getter_get_Params{s}, err
}

type Getter_get_Results struct{ capnp.Struct }

// Getter_get_Results_TypeID is the unique identifier for the type Getter_get_Results.
const Getter_get_Results_TypeID = 0xf3c3dfe1133f40f5

func NewGetter_get_Results(s *capnp.Segment) (Getter_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results{st}, err
}

func NewRootGetter_get_Results(s *capnp.Segment) (Getter_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results{st}, err
}

func ReadRootGetter_get_Results(msg *capnp.Message) (Getter_get_Results, error) {
	root, err := msg.Root()
	return Getter_get_Results{root.Struct()}, err
}

func (s Getter_get_Results) String() string {
	str, _ := text.Marshal(0xf3c3dfe1133f40f5, s.Struct)
	return str
}

func (s Getter_get_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Getter_get_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Getter_get_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Getter_get_Results_List is a list of Getter_get_Results.
type Getter_get_Results_List = capnp.StructList[Getter_get_Results]

// NewGetter_get_Results creates a new list of Getter_get_Results.
func NewGetter_get_Results_List(s *capnp.Segment, sz int32) (Getter_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Getter_get_Results]{l}, err
}

// Getter_get_Results_Future is a wrapper for a Getter_get_Results promised by a client call.
type Getter_get_Results_Future struct{ *capnp.Future }

func (p Getter_get_Results_Future) Struct() (Getter_get_Results, error) {
	s, err := p.Future.Struct()
	return Getter_get_Results{s}, err
}

func (p Getter_get_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Ref struct{ Client *capnp.Client }

// Ref_TypeID is the unique identifier for the type Ref.
const Ref_TypeID = 0xa14ffd6d795dbc31

func (c Ref) GetStored(ctx context.Context, params func(Ref_getStored_Params) error) (Ref_getStored_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa14ffd6d795dbc31,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Ref",
			MethodName:    "getStored",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ref_getStored_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Ref_getStored_Results_Future{Future: ans.Future()}, release
}
func (c Ref) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c Ref) AddRef() Ref {
	return Ref{
		Client: c.Client.AddRef(),
	}
}

func (c Ref) Release() {
	c.Client.Release()
}

// A Ref_Server is a Ref with a local implementation.
type Ref_Server interface {
	GetStored(context.Context, Ref_getStored) error

	Get(context.Context, Getter_get) error
}

// Ref_NewServer creates a new Server from an implementation of Ref_Server.
func Ref_NewServer(s Ref_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ref_Methods(nil, s), s, c, policy)
}

// Ref_ServerToClient creates a new Client from an implementation of Ref_Server.
// The caller is responsible for calling Release on the returned Client.
func Ref_ServerToClient(s Ref_Server, policy *server.Policy) Ref {
	return Ref{Client: capnp.NewClient(Ref_NewServer(s, policy))}
}

// Ref_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ref_Methods(methods []server.Method, s Ref_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa14ffd6d795dbc31,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Ref",
			MethodName:    "getStored",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetStored(ctx, Ref_getStored{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

// Ref_getStored holds the state for a server call to Ref.getStored.
// See server.Call for documentation.
type Ref_getStored struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ref_getStored) Args() Ref_getStored_Params {
	return Ref_getStored_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Ref_getStored) AllocResults() (Ref_getStored_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ref_getStored_Results{Struct: r}, err
}

type Ref_getStored_Params struct{ capnp.Struct }

// Ref_getStored_Params_TypeID is the unique identifier for the type Ref_getStored_Params.
const Ref_getStored_Params_TypeID = 0xa28b89f8877a0b1c

func NewRef_getStored_Params(s *capnp.Segment) (Ref_getStored_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ref_getStored_Params{st}, err
}

func NewRootRef_getStored_Params(s *capnp.Segment) (Ref_getStored_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ref_getStored_Params{st}, err
}

func ReadRootRef_getStored_Params(msg *capnp.Message) (Ref_getStored_Params, error) {
	root, err := msg.Root()
	return Ref_getStored_Params{root.Struct()}, err
}

func (s Ref_getStored_Params) String() string {
	str, _ := text.Marshal(0xa28b89f8877a0b1c, s.Struct)
	return str
}

// Ref_getStored_Params_List is a list of Ref_getStored_Params.
type Ref_getStored_Params_List = capnp.StructList[Ref_getStored_Params]

// NewRef_getStored_Params creates a new list of Ref_getStored_Params.
func NewRef_getStored_Params_List(s *capnp.Segment, sz int32) (Ref_getStored_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Ref_getStored_Params]{l}, err
}

// Ref_getStored_Params_Future is a wrapper for a Ref_getStored_Params promised by a client call.
type Ref_getStored_Params_Future struct{ *capnp.Future }

func (p Ref_getStored_Params_Future) Struct() (Ref_getStored_Params, error) {
	s, err := p.Future.Struct()
	return Ref_getStored_Params{s}, err
}

type Ref_getStored_Results struct{ capnp.Struct }

// Ref_getStored_Results_TypeID is the unique identifier for the type Ref_getStored_Results.
const Ref_getStored_Results_TypeID = 0xfe10400cc1d31474

func NewRef_getStored_Results(s *capnp.Segment) (Ref_getStored_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ref_getStored_Results{st}, err
}

func NewRootRef_getStored_Results(s *capnp.Segment) (Ref_getStored_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ref_getStored_Results{st}, err
}

func ReadRootRef_getStored_Results(msg *capnp.Message) (Ref_getStored_Results, error) {
	root, err := msg.Root()
	return Ref_getStored_Results{root.Struct()}, err
}

func (s Ref_getStored_Results) String() string {
	str, _ := text.Marshal(0xfe10400cc1d31474, s.Struct)
	return str
}

func (s Ref_getStored_Results) StoredValue() (Stored, error) {
	p, err := s.Struct.Ptr(0)
	return Stored{Struct: p.Struct()}, err
}

func (s Ref_getStored_Results) HasStoredValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Ref_getStored_Results) SetStoredValue(v Stored) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStoredValue sets the storedValue field to a newly
// allocated Stored struct, preferring placement in s's segment.
func (s Ref_getStored_Results) NewStoredValue() (Stored, error) {
	ss, err := NewStored(s.Struct.Segment())
	if err != nil {
		return Stored{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Ref_getStored_Results_List is a list of Ref_getStored_Results.
type Ref_getStored_Results_List = capnp.StructList[Ref_getStored_Results]

// NewRef_getStored_Results creates a new list of Ref_getStored_Results.
func NewRef_getStored_Results_List(s *capnp.Segment, sz int32) (Ref_getStored_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ref_getStored_Results]{l}, err
}

// Ref_getStored_Results_Future is a wrapper for a Ref_getStored_Results promised by a client call.
type Ref_getStored_Results_Future struct{ *capnp.Future }

func (p Ref_getStored_Results_Future) Struct() (Ref_getStored_Results, error) {
	s, err := p.Future.Struct()
	return Ref_getStored_Results{s}, err
}

func (p Ref_getStored_Results_Future) StoredValue() Stored_Future {
	return Stored_Future{Future: p.Future.Field(0, nil)}
}

type Setter struct{ Client *capnp.Client }

// Setter_TypeID is the unique identifier for the type Setter.
const Setter_TypeID = 0xedefcf72d1a4dcd5

func (c Setter) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}

func (c Setter) AddRef() Setter {
	return Setter{
		Client: c.Client.AddRef(),
	}
}

func (c Setter) Release() {
	c.Client.Release()
}

// A Setter_Server is a Setter with a local implementation.
type Setter_Server interface {
	Set(context.Context, Setter_set) error
}

// Setter_NewServer creates a new Server from an implementation of Setter_Server.
func Setter_NewServer(s Setter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Setter_Methods(nil, s), s, c, policy)
}

// Setter_ServerToClient creates a new Client from an implementation of Setter_Server.
// The caller is responsible for calling Release on the returned Client.
func Setter_ServerToClient(s Setter_Server, policy *server.Policy) Setter {
	return Setter{Client: capnp.NewClient(Setter_NewServer(s, policy))}
}

// Setter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Setter_Methods(methods []server.Method, s Setter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	return methods
}

// Setter_set holds the state for a server call to Setter.set.
// See server.Call for documentation.
type Setter_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Setter_set) Args() Setter_set_Params {
	return Setter_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Setter_set) AllocResults() (Setter_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results{Struct: r}, err
}

type Setter_set_Params struct{ capnp.Struct }

// Setter_set_Params_TypeID is the unique identifier for the type Setter_set_Params.
const Setter_set_Params_TypeID = 0xc57b0d3e5cf4c9ee

func NewSetter_set_Params(s *capnp.Segment) (Setter_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Setter_set_Params{st}, err
}

func NewRootSetter_set_Params(s *capnp.Segment) (Setter_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Setter_set_Params{st}, err
}

func ReadRootSetter_set_Params(msg *capnp.Message) (Setter_set_Params, error) {
	root, err := msg.Root()
	return Setter_set_Params{root.Struct()}, err
}

func (s Setter_set_Params) String() string {
	str, _ := text.Marshal(0xc57b0d3e5cf4c9ee, s.Struct)
	return str
}

func (s Setter_set_Params) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Setter_set_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Setter_set_Params) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Setter_set_Params_List is a list of Setter_set_Params.
type Setter_set_Params_List = capnp.StructList[Setter_set_Params]

// NewSetter_set_Params creates a new list of Setter_set_Params.
func NewSetter_set_Params_List(s *capnp.Segment, sz int32) (Setter_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Setter_set_Params]{l}, err
}

// Setter_set_Params_Future is a wrapper for a Setter_set_Params promised by a client call.
type Setter_set_Params_Future struct{ *capnp.Future }

func (p Setter_set_Params_Future) Struct() (Setter_set_Params, error) {
	s, err := p.Future.Struct()
	return Setter_set_Params{s}, err
}

func (p Setter_set_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Setter_set_Results struct{ capnp.Struct }

// Setter_set_Results_TypeID is the unique identifier for the type Setter_set_Results.
const Setter_set_Results_TypeID = 0x92f67194cfd010ca

func NewSetter_set_Results(s *capnp.Segment) (Setter_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results{st}, err
}

func NewRootSetter_set_Results(s *capnp.Segment) (Setter_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results{st}, err
}

func ReadRootSetter_set_Results(msg *capnp.Message) (Setter_set_Results, error) {
	root, err := msg.Root()
	return Setter_set_Results{root.Struct()}, err
}

func (s Setter_set_Results) String() string {
	str, _ := text.Marshal(0x92f67194cfd010ca, s.Struct)
	return str
}

// Setter_set_Results_List is a list of Setter_set_Results.
type Setter_set_Results_List = capnp.StructList[Setter_set_Results]

// NewSetter_set_Results creates a new list of Setter_set_Results.
func NewSetter_set_Results_List(s *capnp.Segment, sz int32) (Setter_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Setter_set_Results]{l}, err
}

// Setter_set_Results_Future is a wrapper for a Setter_set_Results promised by a client call.
type Setter_set_Results_Future struct{ *capnp.Future }

func (p Setter_set_Results_Future) Struct() (Setter_set_Results, error) {
	s, err := p.Future.Struct()
	return Setter_set_Results{s}, err
}

type Cell struct{ Client *capnp.Client }

// Cell_TypeID is the unique identifier for the type Cell.
const Cell_TypeID = 0x86dfe7e96ebb541d

func (c Cell) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}
func (c Cell) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c Cell) AddRef() Cell {
	return Cell{
		Client: c.Client.AddRef(),
	}
}

func (c Cell) Release() {
	c.Client.Release()
}

// A Cell_Server is a Cell with a local implementation.
type Cell_Server interface {
	Set(context.Context, Setter_set) error

	Get(context.Context, Getter_get) error
}

// Cell_NewServer creates a new Server from an implementation of Cell_Server.
func Cell_NewServer(s Cell_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cell_Methods(nil, s), s, c, policy)
}

// Cell_ServerToClient creates a new Client from an implementation of Cell_Server.
// The caller is responsible for calling Release on the returned Client.
func Cell_ServerToClient(s Cell_Server, policy *server.Policy) Cell {
	return Cell{Client: capnp.NewClient(Cell_NewServer(s, policy))}
}

// Cell_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cell_Methods(methods []server.Method, s Cell_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

type TxCell struct{ Client *capnp.Client }

// TxCell_TypeID is the unique identifier for the type TxCell.
const TxCell_TypeID = 0xfcd1f0de6c4076f9

func (c TxCell) TxGet(ctx context.Context, params func(TxCell_txGet_Params) error) (TxCell_txGet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TxCell_txGet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TxCell_txGet_Results_Future{Future: ans.Future()}, release
}
func (c TxCell) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}
func (c TxCell) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c TxCell) AddRef() TxCell {
	return TxCell{
		Client: c.Client.AddRef(),
	}
}

func (c TxCell) Release() {
	c.Client.Release()
}

// A TxCell_Server is a TxCell with a local implementation.
type TxCell_Server interface {
	TxGet(context.Context, TxCell_txGet) error

	Set(context.Context, Setter_set) error

	Get(context.Context, Getter_get) error
}

// TxCell_NewServer creates a new Server from an implementation of TxCell_Server.
func TxCell_NewServer(s TxCell_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TxCell_Methods(nil, s), s, c, policy)
}

// TxCell_ServerToClient creates a new Client from an implementation of TxCell_Server.
// The caller is responsible for calling Release on the returned Client.
func TxCell_ServerToClient(s TxCell_Server, policy *server.Policy) TxCell {
	return TxCell{Client: capnp.NewClient(TxCell_NewServer(s, policy))}
}

// TxCell_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TxCell_Methods(methods []server.Method, s TxCell_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TxGet(ctx, TxCell_txGet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

// TxCell_txGet holds the state for a server call to TxCell.txGet.
// See server.Call for documentation.
type TxCell_txGet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TxCell_txGet) Args() TxCell_txGet_Params {
	return TxCell_txGet_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TxCell_txGet) AllocResults() (TxCell_txGet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxCell_txGet_Results{Struct: r}, err
}

type TxCell_txGet_Params struct{ capnp.Struct }

// TxCell_txGet_Params_TypeID is the unique identifier for the type TxCell_txGet_Params.
const TxCell_txGet_Params_TypeID = 0xf39598e0c091fed8

func NewTxCell_txGet_Params(s *capnp.Segment) (TxCell_txGet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TxCell_txGet_Params{st}, err
}

func NewRootTxCell_txGet_Params(s *capnp.Segment) (TxCell_txGet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TxCell_txGet_Params{st}, err
}

func ReadRootTxCell_txGet_Params(msg *capnp.Message) (TxCell_txGet_Params, error) {
	root, err := msg.Root()
	return TxCell_txGet_Params{root.Struct()}, err
}

func (s TxCell_txGet_Params) String() string {
	str, _ := text.Marshal(0xf39598e0c091fed8, s.Struct)
	return str
}

// TxCell_txGet_Params_List is a list of TxCell_txGet_Params.
type TxCell_txGet_Params_List = capnp.StructList[TxCell_txGet_Params]

// NewTxCell_txGet_Params creates a new list of TxCell_txGet_Params.
func NewTxCell_txGet_Params_List(s *capnp.Segment, sz int32) (TxCell_txGet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TxCell_txGet_Params]{l}, err
}

// TxCell_txGet_Params_Future is a wrapper for a TxCell_txGet_Params promised by a client call.
type TxCell_txGet_Params_Future struct{ *capnp.Future }

func (p TxCell_txGet_Params_Future) Struct() (TxCell_txGet_Params, error) {
	s, err := p.Future.Struct()
	return TxCell_txGet_Params{s}, err
}

type TxCell_txGet_Results struct{ capnp.Struct }

// TxCell_txGet_Results_TypeID is the unique identifier for the type TxCell_txGet_Results.
const TxCell_txGet_Results_TypeID = 0xdfeaf85f84328172

func NewTxCell_txGet_Results(s *capnp.Segment) (TxCell_txGet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxCell_txGet_Results{st}, err
}

func NewRootTxCell_txGet_Results(s *capnp.Segment) (TxCell_txGet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxCell_txGet_Results{st}, err
}

func ReadRootTxCell_txGet_Results(msg *capnp.Message) (TxCell_txGet_Results, error) {
	root, err := msg.Root()
	return TxCell_txGet_Results{root.Struct()}, err
}

func (s TxCell_txGet_Results) String() string {
	str, _ := text.Marshal(0xdfeaf85f84328172, s.Struct)
	return str
}

func (s TxCell_txGet_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s TxCell_txGet_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s TxCell_txGet_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s TxCell_txGet_Results) Setter() Setter {
	p, _ := s.Struct.Ptr(1)
	return Setter{Client: p.Interface().Client()}
}

func (s TxCell_txGet_Results) HasSetter() bool {
	return s.Struct.HasPtr(1)
}

func (s TxCell_txGet_Results) SetSetter(v Setter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// TxCell_txGet_Results_List is a list of TxCell_txGet_Results.
type TxCell_txGet_Results_List = capnp.StructList[TxCell_txGet_Results]

// NewTxCell_txGet_Results creates a new list of TxCell_txGet_Results.
func NewTxCell_txGet_Results_List(s *capnp.Segment, sz int32) (TxCell_txGet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TxCell_txGet_Results]{l}, err
}

// TxCell_txGet_Results_Future is a wrapper for a TxCell_txGet_Results promised by a client call.
type TxCell_txGet_Results_Future struct{ *capnp.Future }

func (p TxCell_txGet_Results_Future) Struct() (TxCell_txGet_Results, error) {
	s, err := p.Future.Struct()
	return TxCell_txGet_Results{s}, err
}

func (p TxCell_txGet_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p TxCell_txGet_Results_Future) Setter() Setter {
	return Setter{Client: p.Future.Field(1, nil).Client()}
}

type RootPtr struct{ Client *capnp.Client }

// RootPtr_TypeID is the unique identifier for the type RootPtr.
const RootPtr_TypeID = 0xec69889c3a1aaf50

func (c RootPtr) TxGet(ctx context.Context, params func(TxCell_txGet_Params) error) (TxCell_txGet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TxCell_txGet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TxCell_txGet_Results_Future{Future: ans.Future()}, release
}
func (c RootPtr) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}
func (c RootPtr) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c RootPtr) AddRef() RootPtr {
	return RootPtr{
		Client: c.Client.AddRef(),
	}
}

func (c RootPtr) Release() {
	c.Client.Release()
}

// A RootPtr_Server is a RootPtr with a local implementation.
type RootPtr_Server interface {
	TxGet(context.Context, TxCell_txGet) error

	Set(context.Context, Setter_set) error

	Get(context.Context, Getter_get) error
}

// RootPtr_NewServer creates a new Server from an implementation of RootPtr_Server.
func RootPtr_NewServer(s RootPtr_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RootPtr_Methods(nil, s), s, c, policy)
}

// RootPtr_ServerToClient creates a new Client from an implementation of RootPtr_Server.
// The caller is responsible for calling Release on the returned Client.
func RootPtr_ServerToClient(s RootPtr_Server, policy *server.Policy) RootPtr {
	return RootPtr{Client: capnp.NewClient(RootPtr_NewServer(s, policy))}
}

// RootPtr_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RootPtr_Methods(methods []server.Method, s RootPtr_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TxGet(ctx, TxCell_txGet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

type Storage struct{ Client *capnp.Client }

// Storage_TypeID is the unique identifier for the type Storage.
const Storage_TypeID = 0x84ec75049386a248

func (c Storage) Put(ctx context.Context, params func(Storage_put_Params) error) (Storage_put_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84ec75049386a248,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Storage",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Storage_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Storage_put_Results_Future{Future: ans.Future()}, release
}

func (c Storage) AddRef() Storage {
	return Storage{
		Client: c.Client.AddRef(),
	}
}

func (c Storage) Release() {
	c.Client.Release()
}

// A Storage_Server is a Storage with a local implementation.
type Storage_Server interface {
	Put(context.Context, Storage_put) error
}

// Storage_NewServer creates a new Server from an implementation of Storage_Server.
func Storage_NewServer(s Storage_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Storage_Methods(nil, s), s, c, policy)
}

// Storage_ServerToClient creates a new Client from an implementation of Storage_Server.
// The caller is responsible for calling Release on the returned Client.
func Storage_ServerToClient(s Storage_Server, policy *server.Policy) Storage {
	return Storage{Client: capnp.NewClient(Storage_NewServer(s, policy))}
}

// Storage_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Storage_Methods(methods []server.Method, s Storage_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84ec75049386a248,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Storage",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, Storage_put{call})
		},
	})

	return methods
}

// Storage_put holds the state for a server call to Storage.put.
// See server.Call for documentation.
type Storage_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Storage_put) Args() Storage_put_Params {
	return Storage_put_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Storage_put) AllocResults() (Storage_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Results{Struct: r}, err
}

type Storage_put_Params struct{ capnp.Struct }

// Storage_put_Params_TypeID is the unique identifier for the type Storage_put_Params.
const Storage_put_Params_TypeID = 0xd17d67c20039536b

func NewStorage_put_Params(s *capnp.Segment) (Storage_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Params{st}, err
}

func NewRootStorage_put_Params(s *capnp.Segment) (Storage_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Params{st}, err
}

func ReadRootStorage_put_Params(msg *capnp.Message) (Storage_put_Params, error) {
	root, err := msg.Root()
	return Storage_put_Params{root.Struct()}, err
}

func (s Storage_put_Params) String() string {
	str, _ := text.Marshal(0xd17d67c20039536b, s.Struct)
	return str
}

func (s Storage_put_Params) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Storage_put_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Storage_put_Params) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Storage_put_Params_List is a list of Storage_put_Params.
type Storage_put_Params_List = capnp.StructList[Storage_put_Params]

// NewStorage_put_Params creates a new list of Storage_put_Params.
func NewStorage_put_Params_List(s *capnp.Segment, sz int32) (Storage_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Storage_put_Params]{l}, err
}

// Storage_put_Params_Future is a wrapper for a Storage_put_Params promised by a client call.
type Storage_put_Params_Future struct{ *capnp.Future }

func (p Storage_put_Params_Future) Struct() (Storage_put_Params, error) {
	s, err := p.Future.Struct()
	return Storage_put_Params{s}, err
}

func (p Storage_put_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Storage_put_Results struct{ capnp.Struct }

// Storage_put_Results_TypeID is the unique identifier for the type Storage_put_Results.
const Storage_put_Results_TypeID = 0xc5dc8978c148f57a

func NewStorage_put_Results(s *capnp.Segment) (Storage_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Results{st}, err
}

func NewRootStorage_put_Results(s *capnp.Segment) (Storage_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Results{st}, err
}

func ReadRootStorage_put_Results(msg *capnp.Message) (Storage_put_Results, error) {
	root, err := msg.Root()
	return Storage_put_Results{root.Struct()}, err
}

func (s Storage_put_Results) String() string {
	str, _ := text.Marshal(0xc5dc8978c148f57a, s.Struct)
	return str
}

func (s Storage_put_Results) Ref() Ref {
	p, _ := s.Struct.Ptr(0)
	return Ref{Client: p.Interface().Client()}
}

func (s Storage_put_Results) HasRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Storage_put_Results) SetRef(v Ref) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Storage_put_Results_List is a list of Storage_put_Results.
type Storage_put_Results_List = capnp.StructList[Storage_put_Results]

// NewStorage_put_Results creates a new list of Storage_put_Results.
func NewStorage_put_Results_List(s *capnp.Segment, sz int32) (Storage_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Storage_put_Results]{l}, err
}

// Storage_put_Results_Future is a wrapper for a Storage_put_Results promised by a client call.
type Storage_put_Results_Future struct{ *capnp.Future }

func (p Storage_put_Results_Future) Struct() (Storage_put_Results, error) {
	s, err := p.Future.Struct()
	return Storage_put_Results{s}, err
}

func (p Storage_put_Results_Future) Ref() Ref {
	return Ref{Client: p.Future.Field(0, nil).Client()}
}

type Dynamic struct{ capnp.Struct }

// Dynamic_TypeID is the unique identifier for the type Dynamic.
const Dynamic_TypeID = 0xc03ae9bd42824061

func NewDynamic(s *capnp.Segment) (Dynamic, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Dynamic{st}, err
}

func NewRootDynamic(s *capnp.Segment) (Dynamic, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Dynamic{st}, err
}

func ReadRootDynamic(msg *capnp.Message) (Dynamic, error) {
	root, err := msg.Root()
	return Dynamic{root.Struct()}, err
}

func (s Dynamic) String() string {
	str, _ := text.Marshal(0xc03ae9bd42824061, s.Struct)
	return str
}

func (s Dynamic) Ref() Ref {
	p, _ := s.Struct.Ptr(0)
	return Ref{Client: p.Interface().Client()}
}

func (s Dynamic) HasRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Dynamic) SetRef(v Ref) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Dynamic) TypeId() uint64 {
	return s.Struct.Uint64(0)
}

func (s Dynamic) SetTypeId(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Dynamic_List is a list of Dynamic.
type Dynamic_List = capnp.StructList[Dynamic]

// NewDynamic creates a new list of Dynamic.
func NewDynamic_List(s *capnp.Segment, sz int32) (Dynamic_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Dynamic]{l}, err
}

// Dynamic_Future is a wrapper for a Dynamic promised by a client call.
type Dynamic_Future struct{ *capnp.Future }

func (p Dynamic_Future) Struct() (Dynamic, error) {
	s, err := p.Future.Struct()
	return Dynamic{s}, err
}

func (p Dynamic_Future) Ref() Ref {
	return Ref{Client: p.Future.Field(0, nil).Client()}
}

type ContentId struct{ capnp.Struct }

// ContentId_TypeID is the unique identifier for the type ContentId.
const ContentId_TypeID = 0xc5bd7ad468fa72a6

func NewContentId(s *capnp.Segment) (ContentId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ContentId{st}, err
}

func NewRootContentId(s *capnp.Segment) (ContentId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ContentId{st}, err
}

func ReadRootContentId(msg *capnp.Message) (ContentId, error) {
	root, err := msg.Root()
	return ContentId{root.Struct()}, err
}

func (s ContentId) String() string {
	str, _ := text.Marshal(0xc5bd7ad468fa72a6, s.Struct)
	return str
}

func (s ContentId) Digest() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ContentId) HasDigest() bool {
	return s.Struct.HasPtr(0)
}

func (s ContentId) SetDigest(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ContentId) Format() ContentId_Format {
	return ContentId_Format(s.Struct.Uint16(0))
}

func (s ContentId) SetFormat(v ContentId_Format) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s ContentId) Algo() ContentId_Algo {
	return ContentId_Algo(s.Struct.Uint16(2))
}

func (s ContentId) SetAlgo(v ContentId_Algo) {
	s.Struct.SetUint16(2, uint16(v))
}

// ContentId_List is a list of ContentId.
type ContentId_List = capnp.StructList[ContentId]

// NewContentId creates a new list of ContentId.
func NewContentId_List(s *capnp.Segment, sz int32) (ContentId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ContentId]{l}, err
}

// ContentId_Future is a wrapper for a ContentId promised by a client call.
type ContentId_Future struct{ *capnp.Future }

func (p ContentId_Future) Struct() (ContentId, error) {
	s, err := p.Future.Struct()
	return ContentId{s}, err
}

type ContentId_Format uint16

// ContentId_Format_TypeID is the unique identifier for the type ContentId_Format.
const ContentId_Format_TypeID = 0xca4ea71483923045

// Values of ContentId_Format.
const (
	ContentId_Format_segment ContentId_Format = 0
	ContentId_Format_bytes   ContentId_Format = 1
)

// String returns the enum's constant name.
func (c ContentId_Format) String() string {
	switch c {
	case ContentId_Format_segment:
		return "segment"
	case ContentId_Format_bytes:
		return "bytes"

	default:
		return ""
	}
}

// ContentId_FormatFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ContentId_FormatFromString(c string) ContentId_Format {
	switch c {
	case "segment":
		return ContentId_Format_segment
	case "bytes":
		return ContentId_Format_bytes

	default:
		return 0
	}
}

type ContentId_Format_List = capnp.EnumList[ContentId_Format]

func NewContentId_Format_List(s *capnp.Segment, sz int32) (ContentId_Format_List, error) {
	return capnp.NewEnumList[ContentId_Format](s, sz)
}

type ContentId_Algo uint16

// ContentId_Algo_TypeID is the unique identifier for the type ContentId_Algo.
const ContentId_Algo_TypeID = 0x889936d1bbf13253

// Values of ContentId_Algo.
const (
	ContentId_Algo_sha256 ContentId_Algo = 0
)

// String returns the enum's constant name.
func (c ContentId_Algo) String() string {
	switch c {
	case ContentId_Algo_sha256:
		return "sha256"

	default:
		return ""
	}
}

// ContentId_AlgoFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ContentId_AlgoFromString(c string) ContentId_Algo {
	switch c {
	case "sha256":
		return ContentId_Algo_sha256

	default:
		return 0
	}
}

type ContentId_Algo_List = capnp.EnumList[ContentId_Algo]

func NewContentId_Algo_List(s *capnp.Segment, sz int32) (ContentId_Algo_List, error) {
	return capnp.NewEnumList[ContentId_Algo](s, sz)
}

type Stored struct{ capnp.Struct }

// Stored_TypeID is the unique identifier for the type Stored.
const Stored_TypeID = 0xe6eb5cba7d06cb58

func NewStored(s *capnp.Segment) (Stored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Stored{st}, err
}

func NewRootStored(s *capnp.Segment) (Stored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Stored{st}, err
}

func ReadRootStored(msg *capnp.Message) (Stored, error) {
	root, err := msg.Root()
	return Stored{root.Struct()}, err
}

func (s Stored) String() string {
	str, _ := text.Marshal(0xe6eb5cba7d06cb58, s.Struct)
	return str
}

func (s Stored) Data() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Stored) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Stored) SetData(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Stored) Refs() (ContentId_List, error) {
	p, err := s.Struct.Ptr(1)
	return ContentId_List{List: p.List()}, err
}

func (s Stored) HasRefs() bool {
	return s.Struct.HasPtr(1)
}

func (s Stored) SetRefs(v ContentId_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRefs sets the refs field to a newly
// allocated ContentId_List, preferring placement in s's segment.
func (s Stored) NewRefs(n int32) (ContentId_List, error) {
	l, err := NewContentId_List(s.Struct.Segment(), n)
	if err != nil {
		return ContentId_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Stored_List is a list of Stored.
type Stored_List = capnp.StructList[Stored]

// NewStored creates a new list of Stored.
func NewStored_List(s *capnp.Segment, sz int32) (Stored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Stored]{l}, err
}

// Stored_Future is a wrapper for a Stored promised by a client call.
type Stored_Future struct{ *capnp.Future }

func (p Stored_Future) Struct() (Stored, error) {
	s, err := p.Future.Struct()
	return Stored{s}, err
}

func (p Stored_Future) Data() *capnp.Future {
	return p.Future.Field(0, nil)
}

type RootApi struct{ Client *capnp.Client }

// RootApi_TypeID is the unique identifier for the type RootApi.
const RootApi_TypeID = 0xbf3d5608637940e8

func (c RootApi) BlobMap(ctx context.Context, params func(RootApi_blobMap_Params) error) (RootApi_blobMap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      0,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "blobMap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RootApi_blobMap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RootApi_blobMap_Results_Future{Future: ans.Future()}, release
}
func (c RootApi) Root(ctx context.Context, params func(RootApi_root_Params) error) (RootApi_root_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      1,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "root",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RootApi_root_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RootApi_root_Results_Future{Future: ans.Future()}, release
}
func (c RootApi) Storage(ctx context.Context, params func(RootApi_storage_Params) error) (RootApi_storage_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      2,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "storage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RootApi_storage_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RootApi_storage_Results_Future{Future: ans.Future()}, release
}

func (c RootApi) AddRef() RootApi {
	return RootApi{
		Client: c.Client.AddRef(),
	}
}

func (c RootApi) Release() {
	c.Client.Release()
}

// A RootApi_Server is a RootApi with a local implementation.
type RootApi_Server interface {
	BlobMap(context.Context, RootApi_blobMap) error

	Root(context.Context, RootApi_root) error

	Storage(context.Context, RootApi_storage) error
}

// RootApi_NewServer creates a new Server from an implementation of RootApi_Server.
func RootApi_NewServer(s RootApi_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RootApi_Methods(nil, s), s, c, policy)
}

// RootApi_ServerToClient creates a new Client from an implementation of RootApi_Server.
// The caller is responsible for calling Release on the returned Client.
func RootApi_ServerToClient(s RootApi_Server, policy *server.Policy) RootApi {
	return RootApi{Client: capnp.NewClient(RootApi_NewServer(s, policy))}
}

// RootApi_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RootApi_Methods(methods []server.Method, s RootApi_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      0,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "blobMap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.BlobMap(ctx, RootApi_blobMap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      1,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "root",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Root(ctx, RootApi_root{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      2,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "storage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Storage(ctx, RootApi_storage{call})
		},
	})

	return methods
}

// RootApi_blobMap holds the state for a server call to RootApi.blobMap.
// See server.Call for documentation.
type RootApi_blobMap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RootApi_blobMap) Args() RootApi_blobMap_Params {
	return RootApi_blobMap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RootApi_blobMap) AllocResults() (RootApi_blobMap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_blobMap_Results{Struct: r}, err
}

// RootApi_root holds the state for a server call to RootApi.root.
// See server.Call for documentation.
type RootApi_root struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RootApi_root) Args() RootApi_root_Params {
	return RootApi_root_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RootApi_root) AllocResults() (RootApi_root_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_root_Results{Struct: r}, err
}

// RootApi_storage holds the state for a server call to RootApi.storage.
// See server.Call for documentation.
type RootApi_storage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RootApi_storage) Args() RootApi_storage_Params {
	return RootApi_storage_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RootApi_storage) AllocResults() (RootApi_storage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_storage_Results{Struct: r}, err
}

type RootApi_blobMap_Params struct{ capnp.Struct }

// RootApi_blobMap_Params_TypeID is the unique identifier for the type RootApi_blobMap_Params.
const RootApi_blobMap_Params_TypeID = 0xe2e07eea432c8e12

func NewRootApi_blobMap_Params(s *capnp.Segment) (RootApi_blobMap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_blobMap_Params{st}, err
}

func NewRootRootApi_blobMap_Params(s *capnp.Segment) (RootApi_blobMap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_blobMap_Params{st}, err
}

func ReadRootRootApi_blobMap_Params(msg *capnp.Message) (RootApi_blobMap_Params, error) {
	root, err := msg.Root()
	return RootApi_blobMap_Params{root.Struct()}, err
}

func (s RootApi_blobMap_Params) String() string {
	str, _ := text.Marshal(0xe2e07eea432c8e12, s.Struct)
	return str
}

// RootApi_blobMap_Params_List is a list of RootApi_blobMap_Params.
type RootApi_blobMap_Params_List = capnp.StructList[RootApi_blobMap_Params]

// NewRootApi_blobMap_Params creates a new list of RootApi_blobMap_Params.
func NewRootApi_blobMap_Params_List(s *capnp.Segment, sz int32) (RootApi_blobMap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RootApi_blobMap_Params]{l}, err
}

// RootApi_blobMap_Params_Future is a wrapper for a RootApi_blobMap_Params promised by a client call.
type RootApi_blobMap_Params_Future struct{ *capnp.Future }

func (p RootApi_blobMap_Params_Future) Struct() (RootApi_blobMap_Params, error) {
	s, err := p.Future.Struct()
	return RootApi_blobMap_Params{s}, err
}

type RootApi_blobMap_Results struct{ capnp.Struct }

// RootApi_blobMap_Results_TypeID is the unique identifier for the type RootApi_blobMap_Results.
const RootApi_blobMap_Results_TypeID = 0xa7d5e26e70f192f5

func NewRootApi_blobMap_Results(s *capnp.Segment) (RootApi_blobMap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_blobMap_Results{st}, err
}

func NewRootRootApi_blobMap_Results(s *capnp.Segment) (RootApi_blobMap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_blobMap_Results{st}, err
}

func ReadRootRootApi_blobMap_Results(msg *capnp.Message) (RootApi_blobMap_Results, error) {
	root, err := msg.Root()
	return RootApi_blobMap_Results{root.Struct()}, err
}

func (s RootApi_blobMap_Results) String() string {
	str, _ := text.Marshal(0xa7d5e26e70f192f5, s.Struct)
	return str
}

func (s RootApi_blobMap_Results) Map() Map {
	p, _ := s.Struct.Ptr(0)
	return Map{Client: p.Interface().Client()}
}

func (s RootApi_blobMap_Results) HasMap() bool {
	return s.Struct.HasPtr(0)
}

func (s RootApi_blobMap_Results) SetMap(v Map) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RootApi_blobMap_Results_List is a list of RootApi_blobMap_Results.
type RootApi_blobMap_Results_List = capnp.StructList[RootApi_blobMap_Results]

// NewRootApi_blobMap_Results creates a new list of RootApi_blobMap_Results.
func NewRootApi_blobMap_Results_List(s *capnp.Segment, sz int32) (RootApi_blobMap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RootApi_blobMap_Results]{l}, err
}

// RootApi_blobMap_Results_Future is a wrapper for a RootApi_blobMap_Results promised by a client call.
type RootApi_blobMap_Results_Future struct{ *capnp.Future }

func (p RootApi_blobMap_Results_Future) Struct() (RootApi_blobMap_Results, error) {
	s, err := p.Future.Struct()
	return RootApi_blobMap_Results{s}, err
}

func (p RootApi_blobMap_Results_Future) Map() Map {
	return Map{Client: p.Future.Field(0, nil).Client()}
}

type RootApi_root_Params struct{ capnp.Struct }

// RootApi_root_Params_TypeID is the unique identifier for the type RootApi_root_Params.
const RootApi_root_Params_TypeID = 0x9eb1a39212b38ec1

func NewRootApi_root_Params(s *capnp.Segment) (RootApi_root_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_root_Params{st}, err
}

func NewRootRootApi_root_Params(s *capnp.Segment) (RootApi_root_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_root_Params{st}, err
}

func ReadRootRootApi_root_Params(msg *capnp.Message) (RootApi_root_Params, error) {
	root, err := msg.Root()
	return RootApi_root_Params{root.Struct()}, err
}

func (s RootApi_root_Params) String() string {
	str, _ := text.Marshal(0x9eb1a39212b38ec1, s.Struct)
	return str
}

// RootApi_root_Params_List is a list of RootApi_root_Params.
type RootApi_root_Params_List = capnp.StructList[RootApi_root_Params]

// NewRootApi_root_Params creates a new list of RootApi_root_Params.
func NewRootApi_root_Params_List(s *capnp.Segment, sz int32) (RootApi_root_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RootApi_root_Params]{l}, err
}

// RootApi_root_Params_Future is a wrapper for a RootApi_root_Params promised by a client call.
type RootApi_root_Params_Future struct{ *capnp.Future }

func (p RootApi_root_Params_Future) Struct() (RootApi_root_Params, error) {
	s, err := p.Future.Struct()
	return RootApi_root_Params{s}, err
}

type RootApi_root_Results struct{ capnp.Struct }

// RootApi_root_Results_TypeID is the unique identifier for the type RootApi_root_Results.
const RootApi_root_Results_TypeID = 0xd73f2e504c7f9730

func NewRootApi_root_Results(s *capnp.Segment) (RootApi_root_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_root_Results{st}, err
}

func NewRootRootApi_root_Results(s *capnp.Segment) (RootApi_root_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_root_Results{st}, err
}

func ReadRootRootApi_root_Results(msg *capnp.Message) (RootApi_root_Results, error) {
	root, err := msg.Root()
	return RootApi_root_Results{root.Struct()}, err
}

func (s RootApi_root_Results) String() string {
	str, _ := text.Marshal(0xd73f2e504c7f9730, s.Struct)
	return str
}

func (s RootApi_root_Results) Root() RootPtr {
	p, _ := s.Struct.Ptr(0)
	return RootPtr{Client: p.Interface().Client()}
}

func (s RootApi_root_Results) HasRoot() bool {
	return s.Struct.HasPtr(0)
}

func (s RootApi_root_Results) SetRoot(v RootPtr) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RootApi_root_Results_List is a list of RootApi_root_Results.
type RootApi_root_Results_List = capnp.StructList[RootApi_root_Results]

// NewRootApi_root_Results creates a new list of RootApi_root_Results.
func NewRootApi_root_Results_List(s *capnp.Segment, sz int32) (RootApi_root_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RootApi_root_Results]{l}, err
}

// RootApi_root_Results_Future is a wrapper for a RootApi_root_Results promised by a client call.
type RootApi_root_Results_Future struct{ *capnp.Future }

func (p RootApi_root_Results_Future) Struct() (RootApi_root_Results, error) {
	s, err := p.Future.Struct()
	return RootApi_root_Results{s}, err
}

func (p RootApi_root_Results_Future) Root() RootPtr {
	return RootPtr{Client: p.Future.Field(0, nil).Client()}
}

type RootApi_storage_Params struct{ capnp.Struct }

// RootApi_storage_Params_TypeID is the unique identifier for the type RootApi_storage_Params.
const RootApi_storage_Params_TypeID = 0xfdb4062d10a3ca31

func NewRootApi_storage_Params(s *capnp.Segment) (RootApi_storage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_storage_Params{st}, err
}

func NewRootRootApi_storage_Params(s *capnp.Segment) (RootApi_storage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_storage_Params{st}, err
}

func ReadRootRootApi_storage_Params(msg *capnp.Message) (RootApi_storage_Params, error) {
	root, err := msg.Root()
	return RootApi_storage_Params{root.Struct()}, err
}

func (s RootApi_storage_Params) String() string {
	str, _ := text.Marshal(0xfdb4062d10a3ca31, s.Struct)
	return str
}

// RootApi_storage_Params_List is a list of RootApi_storage_Params.
type RootApi_storage_Params_List = capnp.StructList[RootApi_storage_Params]

// NewRootApi_storage_Params creates a new list of RootApi_storage_Params.
func NewRootApi_storage_Params_List(s *capnp.Segment, sz int32) (RootApi_storage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RootApi_storage_Params]{l}, err
}

// RootApi_storage_Params_Future is a wrapper for a RootApi_storage_Params promised by a client call.
type RootApi_storage_Params_Future struct{ *capnp.Future }

func (p RootApi_storage_Params_Future) Struct() (RootApi_storage_Params, error) {
	s, err := p.Future.Struct()
	return RootApi_storage_Params{s}, err
}

type RootApi_storage_Results struct{ capnp.Struct }

// RootApi_storage_Results_TypeID is the unique identifier for the type RootApi_storage_Results.
const RootApi_storage_Results_TypeID = 0xcd2937d0c1251d4e

func NewRootApi_storage_Results(s *capnp.Segment) (RootApi_storage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_storage_Results{st}, err
}

func NewRootRootApi_storage_Results(s *capnp.Segment) (RootApi_storage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_storage_Results{st}, err
}

func ReadRootRootApi_storage_Results(msg *capnp.Message) (RootApi_storage_Results, error) {
	root, err := msg.Root()
	return RootApi_storage_Results{root.Struct()}, err
}

func (s RootApi_storage_Results) String() string {
	str, _ := text.Marshal(0xcd2937d0c1251d4e, s.Struct)
	return str
}

func (s RootApi_storage_Results) Storage() Storage {
	p, _ := s.Struct.Ptr(0)
	return Storage{Client: p.Interface().Client()}
}

func (s RootApi_storage_Results) HasStorage() bool {
	return s.Struct.HasPtr(0)
}

func (s RootApi_storage_Results) SetStorage(v Storage) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RootApi_storage_Results_List is a list of RootApi_storage_Results.
type RootApi_storage_Results_List = capnp.StructList[RootApi_storage_Results]

// NewRootApi_storage_Results creates a new list of RootApi_storage_Results.
func NewRootApi_storage_Results_List(s *capnp.Segment, sz int32) (RootApi_storage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RootApi_storage_Results]{l}, err
}

// RootApi_storage_Results_Future is a wrapper for a RootApi_storage_Results promised by a client call.
type RootApi_storage_Results_Future struct{ *capnp.Future }

func (p RootApi_storage_Results_Future) Struct() (RootApi_storage_Results, error) {
	s, err := p.Future.Struct()
	return RootApi_storage_Results{s}, err
}

func (p RootApi_storage_Results_Future) Storage() Storage {
	return Storage{Client: p.Future.Field(0, nil).Client()}
}

const schema_ca7b236fb6fb07c3 = "x\xda\x9cW}l\x1bg\x19\x7f\x9e\xb3}g;\x97" +
	"\x9d_\xbf-Q\xab\x05\xb3\xd0\xaa4\"V\x9c*\xed" +
	"\x12i\xd8NS\xd2\x88e\xf8\x92\xb4Z\xa5Upm" +
	".^4'6\xf6ek:m\xd5`\x8cU\xb0\x89" +
	"\x06*\xd6\x89\x81\xe8\x18S\xff\xa8\xa6\x14\x8a \xa3\xda" +
	"\xc2TU\x0bB[\x05\x13\xfc1\xd1\x0f\xc4GG\x07" +
	"\x94\xad0\xb6u\x87\xde\xf7|w\xafc'\x19\xfb\xef" +
	"\xf4\xde\xf3>\x1f\xbf\xdf\xf3\xf5v\x9e\x0bf\x82\xa9\xe6" +
	"\xbc\x0a\x92\xfe\xcd\x90l\xef<\xfe\xc8\xb7\x82\xd3W\x1f" +
	"\x06\xa2\x05\xec\x97\x94\xf7~Z\xfc\xe4\xfd\x8b\x00H\xd7" +
	"\xc9\xf3\xf4\x16Y\x01\xa0\xad\xf2\x00\x1db_v\xeb\xe8" +
	"\xf3SW\xfer\xe1\x91%\xc2\x10C\xda-\x1f\xa7\xb7" +
	"q\xf1\x1eY\xa1=\xf2&zB\xd6\xec\x91\xaek\xcf" +
	"\x9f\xdfz\xecQ \xeb$\xfbG\xe5w\xef\xfe\xed\xc1" +
	"3g\x99\xf6\xa7\xe4\x7f\xd1\x13\\\xfc\x199\x01h/" +
	"\xc6^}\xe5\xdb_\xfa\xf7,\x90\x8f!@P\x89\xe1" +
	"\x96cr\x1c!h\xff\xecj\xf4\x8f\xe7\xbe\xbf\xed)" +
	" \x14\x01B\xc8~=$K\x08H\xbf*\xa7\x01\xed" +
	"\x85\xc7\x7f\x1c\x9f}z\xee{@Z\xf8U\x80-\xcf" +
	"\xc8\xeb\xd9\xd5\xd4/\xf6\xceL\xde\xf8\xfc\x0f\x1a\xb8\xfb" +
	"\x98\xfc$=\xca\xed\x1f\x91\x07\xe8\x9f\xe4\x16\xda\xaah" +
	"v\xdf\xb1'\x0e\x9c\xfex\xf4\xb8`\x8b\x12\xe5]@" +
	"\xbaVa\xa6nn:\xf8\xb5w\x0e\x7f\xbd\xfa\x9f{" +
	"\xd9\xad\xb41S\xd7g\xaf\x95\xa6.\xbf\xf6\xac\xe3D" +
	"\x08\x99\x17\xadJ/\xf3r#\xbfZI\xbd\x7f\xb1\xff" +
	"\xf0\xec\\\x03_\xce(\xa7\xe8Y\x85\xf9\xb2\xa0\x0cP" +
	"\x12V(\x09k\x176^\xbe\xf5\xc8\x83-/\xf8x" +
	"\x84\xc2Qf\xe9\xaf\x99\x99\xfd\xe1\xdd\xb7\xbdPG\xd8" +
	"\x9b\xca<\xbd\xce\xd5\\S\xce\xd1\x890#\xcc\xc8|" +
	"\xb9\xef\xcc\x95\xde\x17A\xd7\x10}i\xee\x1f\xd5\xc3\xf3" +
	"t\x0f\x13\xa3\xbb\xc2\xf7\x01\xda\x7f\x7f\xf9\xed\xbb>\xd3" +
	"|\xffY\x87\x03\x07\xe9K\xcc(\xd2+a\x16\x83G" +
	"`#m\x91\xc8\"]\x1b\xd9\x04@7G\x9e\x03\xb4" +
	"\x0f^\xdf\xb9p\xe0\xf0\xebg=Db\xb8e!\xb2" +
	"\x9ei{9\x92\x06\xa0\xa9\xa8f\xef\xe8\x9c\xfd\xca\x9a" +
	"g\xefX\\\x9a\x1f[6F%\xa4\xa9(S\xdc\x11" +
	"\xdd\x06h\xdf\xd1\xbaq\xe1\xd5m\x9b\x7f-\x02\x9c\x8a" +
	"r\x80{\xa2i\xc0\xff\xdc3\xd2\xf3\xcb\xfc\x03\xe7\x05" +
	"k{\xa2q\xf6\xdb\x882k\xc7\xa2\x9a\xdd\xf9\x9dC" +
	"\xb7\xe7\x92\xe9\xdf\x89:\x1e\x8b\xb61\xa1\xa3L\x87]" +
	"~\xa8\xeb\xe1/\xbc\xf3\xc6\x85*\x02\x12\xd3r\xda\x11" +
	"8\x13e\x10\xc5\x1f\xff\xf4\xf67\x1e\xbcxY\xc8\xb5" +
	"\xc1\xa6.F\xcb\x9d\xbf\x92\x1f\x98\xbf\xebo\x7f\x06\xa2" +
	"\x89\xd00\x154\xd5t\x8a\xf64\xb1X\xba\x9b\xee\x03" +
	"\xa0?o\xd2\xec\xdcs\xeb{\xbf\xfb\xe8\xc4\xd5:\x1a" +
	"O6\xcd\xd3\xd3\\x\xaeI\xa1sM-\x00\xf6k" +
	"\xaf\xff\xf0|\xf9\x95\x7f\xbc\xd9 yP=E#*" +
	"\x13\x0f\xa9\x03t\x97\xaa\xd0]\xaaf\xff\xfe\x83#/" +
	"^|\xe2\xe8[B9\x0d\xaa\xbc&\xaeg\xd2\xf4\xd2" +
	"\x85\x97\xde\x12IN\xa9\x1c\xa8\x1e\x95apk\xfaR" +
	"v\xed\xdb[\xdfk`k\x8f\xfa$5\xb8\xad\xbd\xea" +
	"\x00=\xa9*\xf4\xa4\xdab\xff\xf7\xdeL\xe1\x0f\xff<" +
	"\xff~\x83\x0b'\xd4St\x8e_8\xa9\x0e\xd0\x1bj" +
	"\x0b\xedn\xd6\xec\xd4\xe2\xd3\xb1\x0e\xf9'7\x04\x107" +
	"7s\x10\xad5\xbfYP3\xb1\x0f\xc4Z'\xcd\xed" +
	"\xcc\xb9u\xcdi\xe8\xb0K\xe5\xa2U\xdc_,`r" +
	"\xbfQ\x9a*\xf5\x8e\xa4\xadb\xd9\xc8\x9b9D=\x18" +
	"\x08\x01\xb8i \xa4\x1fi\x03\x89\x844\xa54me" +
	"\x83H0\x8e\xa39\xc4:U\xdb\x15\xb3P\xc8!\xe6" +
	"\x02!=\x8c\xe8c\x9e\x0d\x0b\xd5\x9b\xedD\x82\x09=" +
	"(\x09\x02\x00\x04[\xf4 \"\xbb\x8c\x18G\xf4\x1b%" +
	"\xfb\xe7\x88{*V\x16w]\xf4\xfc\x93\\\xff\x8aS" +
	"\x969e\x0d\x8e%\x92\xd9B\xbe\xc8#F\x09\x80\x84" +
	"z\x01\xd2\x95\xbb\x8d\xae\xee\xad\xde\xa5\x80\x8b\x8fiY" +
	"f9Y1\xad\x0d\xc3fe\xba`a\xa5Nf\xc8" +
	"(%\xc7'\xa6\xc6\xaa\x12\x15\xd0\x83\x81 @\x10\x01" +
	"Hs\x17\x80\x1e\x0e\xa0\xbeF\xc2\xc4\xbdFa\xda\xc4" +
	"x\x08\x85$\x01\xc08`\x9d\xce\xe1b\xd1\xca\x96&" +
	"\x92\xe5b\xd1\xda\x903\xcaF`\xb2R\x87\xf8p\xc0" +
	"\x1c\xf7\x88\xf3z+\xbaI@\xc80@6\x86\xd9O" +
	" I)v\xde\xb4F\xacb\xd9\x04\x1cs!\xf5\xfa" +
	";\xa2\x8fs\xcda\x86\x81$`\x9f\xc1\x0fC\x87\xa7" +
	"b\x05:<\xd4\xd2,\xbc\xc9\x8a\x08Z\x9b\x0f\x9ar" +
	"\x8f9\xc3u\xae\x8a\x989\x9etC\x1cc\x90)\xc6" +
	"deY\\\xf7\x15\x8a\xfb\x86\x8c\xd2\x86\xe1\xb4\xc3Y" +
	"#\xeb\xdf\x90P\x994JHD\xdb>\x00\xc2!\xc1" +
	"M,\xe5\x11\xd9=D=\x16@\x8c\x89\xed\x18\x89\x88" +
	"\x89\xafC8\xac\x05\x11$$P_c\x03\x09\x9e\x8f" +
	"\x1e\xe9\xee\x90\x13\xba\x12i\x03\xc8\xaa\x98\xbd\x19I\x87" +
	"\xa2\xe4M\xab\x8e0\x91\xec\x9a\xc3\x0c\xe6\x10\xeb\x08s" +
	"\xa1\x1bpJ!o:\x099Y\x01\xa8\xcf\xc8\xb4\x83" +
	"/sP\xe5Y\xe96|t\x07<\xd1\xfb@\";" +
	"\x14\xf4\x17\x0ft\xe7\x0a\xe9i\x07\x89t((y=" +
	"\x0e\xdd\xb9Ena\xf7\xd6*\x87\xaa\xd4ePc\xc5" +
	"\x91\xc1C\x15\xa7\x85q\xef\xeb<\xeaO\xcfL\x19\x93" +
	"\x13\xfbs\x9c\x1c\x97\xe3\xcd\x8c\xe3\x0d\x01\xd4\xbf(!" +
	"\xe2\x1a\x8e\xc8\xde^\x00\xfd\xce\x00\xeac\x12*es" +
	"\xfc#r\x96\xb6fJ\xe6\xe0\x18F@\xc2H\x83<" +
	"\x15:\x8a\x0b\xe3*\xfd\x02kZeM\xf2\xd7\xf56" +
	"v\x1bQX\x0b\"\xbd\xc2\x0e\x19jO\x7f\xb6X\x9e" +
	"4,\x8du@]\xf5\xcc\xee`\xb1g\x02\xa8\xdf\xee" +
	"\xe31\xc8\xce\xfa\x03\xa8\xe7$$\x12\xae\xe1\xbdr\xa8" +
	"\x1d@\xdf\x19@}T\xc2\xf4\xd8D\xde\xacX\xd8\x0c" +
	"\x126\x03\xa6\xc7\xb9j\x14\x96\x12@\xd4\x005\xa3\x90" +
	"/\xa2\xb0\xcb:\xc7\xf5\xc88<&K\xd3\xd5f\x1b" +
	"h\\\x97\xfd\x1f\x91\x1f\x14v*\x00\xc6\xd5\xb2\xb9\xee" +
	"\xe1\x99t\xf0\x02\x9e>\x1c\x01\xd2\xc7\xeb9\xd2\x05p" +
	"\xa8b\xe6'\xcd)+\xb1o\xc62\x97\xef5\xd5\xfc" +
	"l\xd8k\xfa|\xba\xdd<F\xe2\xbf)\x98\xa5U\x90" +
	"\xe2I\x84\x95Us\xc8\x1d\xecN\x06-\x1by\xcd\xe0" +
	"a,(K<n\xf7\x95\xf3\x02D\xe2\xafb\xcb\xb8" +
	";z`\xbbY($\xad\x03\x03\xa6\xa0S\xa8\xc6\xae" +
	"j5vJH\xdc\xf4\xeb`\xe9\xf7)\xa7\x1c\x85J" +
	"\xf0\x96%'\x8et\x85\x97\x13\x12\xb1D2\x1fj\xc5" +
	"\x105\x91\x15F\xb0;*r\x09^\xae\xf5+T\x82" +
	"\x8f\x9c%\x0d\xa6\xbdQH\xed\xd5\x90\xfa%\xd4\xc6\x0c" +
	"\xcb\xe0~x\x8b\xaf\x13\x91V6\xc7+x\x13p?" +
	"k\x87\xc8M\x0dx\xab\xe9\xbc9\xab\\]\xc0\x82b" +
	"\x80>\x1eB\xcc5x\xfc\x9f\xa5\x14\xf3\xdfE\x0d\x86" +
	"\xd4\xc8\x92!\xe5\xbd\x8b\xd0}\xa4.\x19R\x15\x7fH" +
	"y\x84\x89C\xaa\xe6p\xe5!U\x93jK\xf7\xa6\x06" +
	"\x93\xcc]\xeaVo\xc1\xc2\xbeS\xd3\x82\xdd\xa8\x87\x02" +
	"F\xc9\x0f\xd9}\x08\xa3\xfb\xfa&\xa4]\x08Yc\x9b" +
	"O\xdd\"!\xc6\\s\xe8\xc4\x1cF\x12\x8a\x93P\x1c" +
	"?\x87\xbb\xeb\xcc\x8f&x\xe4\xbe\x07\xee\x0b\x06\xdd7" +
	"\x19!]\x82\x07\x09\x0eQ]^\x88.\xd4\x1cV\x17" +
	"Ao\xd1\xf6\x93\xa4fU_\xbe\xc6V\xed8n\x9b" +
	"\\Zg\x8d\x17\xbca\xb3\xa2-m\xa6\xfb\x00t5" +
	"\x80\xfaN\xb6\xd8p\xb1\xdd\x06(\x8c\xc0\x98Xe\xbe" +
	"\xeb\xc2\xe1J;,\xc6\x00\xff\x17\x00\x00\xff\xff\x98\x7f" +
	"\x1b\xa8"

func init() {
	schemas.Register(schema_ca7b236fb6fb07c3,
		0x84ec75049386a248,
		0x86dfe7e96ebb541d,
		0x889936d1bbf13253,
		0x92f67194cfd010ca,
		0x9d379fc7e30aecb8,
		0x9eb1a39212b38ec1,
		0xa14ffd6d795dbc31,
		0xa20a1eb578989942,
		0xa28b89f8877a0b1c,
		0xa7d5e26e70f192f5,
		0xb1928944e0fc3173,
		0xbf17007e9138e225,
		0xbf3d5608637940e8,
		0xc03ae9bd42824061,
		0xc57b0d3e5cf4c9ee,
		0xc5bd7ad468fa72a6,
		0xc5dc8978c148f57a,
		0xca4ea71483923045,
		0xcd2937d0c1251d4e,
		0xd17d67c20039536b,
		0xd73f2e504c7f9730,
		0xdfeaf85f84328172,
		0xe2e07eea432c8e12,
		0xe6eb5cba7d06cb58,
		0xec69889c3a1aaf50,
		0xedefcf72d1a4dcd5,
		0xf39598e0c091fed8,
		0xf3c3dfe1133f40f5,
		0xfb36f41541e13f38,
		0xfcd1f0de6c4076f9,
		0xfdb4062d10a3ca31,
		0xfe10400cc1d31474)
}

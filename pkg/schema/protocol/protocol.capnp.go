// Code generated by capnpc-go. DO NOT EDIT.

package protocol

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Map struct{ Client *capnp.Client }

// Map_TypeID is the unique identifier for the type Map.
const Map_TypeID = 0xfb36f41541e13f38

func (c Map) Find(ctx context.Context, params func(Map_find_Params) error) (Map_find_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfb36f41541e13f38,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Map",
			MethodName:    "find",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Map_find_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Map_find_Results_Future{Future: ans.Future()}, release
}

func (c Map) AddRef() Map {
	return Map{
		Client: c.Client.AddRef(),
	}
}

func (c Map) Release() {
	c.Client.Release()
}

// A Map_Server is a Map with a local implementation.
type Map_Server interface {
	Find(context.Context, Map_find) error
}

// Map_NewServer creates a new Server from an implementation of Map_Server.
func Map_NewServer(s Map_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Map_Methods(nil, s), s, c, policy)
}

// Map_ServerToClient creates a new Client from an implementation of Map_Server.
// The caller is responsible for calling Release on the returned Client.
func Map_ServerToClient(s Map_Server, policy *server.Policy) Map {
	return Map{Client: capnp.NewClient(Map_NewServer(s, policy))}
}

// Map_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Map_Methods(methods []server.Method, s Map_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfb36f41541e13f38,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Map",
			MethodName:    "find",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Find(ctx, Map_find{call})
		},
	})

	return methods
}

// Map_find holds the state for a server call to Map.find.
// See server.Call for documentation.
type Map_find struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Map_find) Args() Map_find_Params {
	return Map_find_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Map_find) AllocResults() (Map_find_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Results{Struct: r}, err
}

type Map_find_Params struct{ capnp.Struct }

// Map_find_Params_TypeID is the unique identifier for the type Map_find_Params.
const Map_find_Params_TypeID = 0xa20a1eb578989942

func NewMap_find_Params(s *capnp.Segment) (Map_find_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Params{st}, err
}

func NewRootMap_find_Params(s *capnp.Segment) (Map_find_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Params{st}, err
}

func ReadRootMap_find_Params(msg *capnp.Message) (Map_find_Params, error) {
	root, err := msg.Root()
	return Map_find_Params{root.Struct()}, err
}

func (s Map_find_Params) String() string {
	str, _ := text.Marshal(0xa20a1eb578989942, s.Struct)
	return str
}

func (s Map_find_Params) Key() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Map_find_Params) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s Map_find_Params) SetKey(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Map_find_Params_List is a list of Map_find_Params.
type Map_find_Params_List struct{ capnp.List }

// NewMap_find_Params creates a new list of Map_find_Params.
func NewMap_find_Params_List(s *capnp.Segment, sz int32) (Map_find_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Map_find_Params_List{l}, err
}

func (s Map_find_Params_List) At(i int) Map_find_Params { return Map_find_Params{s.List.Struct(i)} }

func (s Map_find_Params_List) Set(i int, v Map_find_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Map_find_Params_List) String() string {
	str, _ := text.MarshalList(0xa20a1eb578989942, s.List)
	return str
}

// Map_find_Params_Future is a wrapper for a Map_find_Params promised by a client call.
type Map_find_Params_Future struct{ *capnp.Future }

func (p Map_find_Params_Future) Struct() (Map_find_Params, error) {
	s, err := p.Future.Struct()
	return Map_find_Params{s}, err
}

func (p Map_find_Params_Future) Key() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Map_find_Results struct{ capnp.Struct }

// Map_find_Results_TypeID is the unique identifier for the type Map_find_Results.
const Map_find_Results_TypeID = 0x9d379fc7e30aecb8

func NewMap_find_Results(s *capnp.Segment) (Map_find_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Results{st}, err
}

func NewRootMap_find_Results(s *capnp.Segment) (Map_find_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map_find_Results{st}, err
}

func ReadRootMap_find_Results(msg *capnp.Message) (Map_find_Results, error) {
	root, err := msg.Root()
	return Map_find_Results{root.Struct()}, err
}

func (s Map_find_Results) String() string {
	str, _ := text.Marshal(0x9d379fc7e30aecb8, s.Struct)
	return str
}

func (s Map_find_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Map_find_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Map_find_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Map_find_Results_List is a list of Map_find_Results.
type Map_find_Results_List struct{ capnp.List }

// NewMap_find_Results creates a new list of Map_find_Results.
func NewMap_find_Results_List(s *capnp.Segment, sz int32) (Map_find_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Map_find_Results_List{l}, err
}

func (s Map_find_Results_List) At(i int) Map_find_Results { return Map_find_Results{s.List.Struct(i)} }

func (s Map_find_Results_List) Set(i int, v Map_find_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Map_find_Results_List) String() string {
	str, _ := text.MarshalList(0x9d379fc7e30aecb8, s.List)
	return str
}

// Map_find_Results_Future is a wrapper for a Map_find_Results promised by a client call.
type Map_find_Results_Future struct{ *capnp.Future }

func (p Map_find_Results_Future) Struct() (Map_find_Results, error) {
	s, err := p.Future.Struct()
	return Map_find_Results{s}, err
}

func (p Map_find_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Getter struct{ Client *capnp.Client }

// Getter_TypeID is the unique identifier for the type Getter.
const Getter_TypeID = 0xb1928944e0fc3173

func (c Getter) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c Getter) AddRef() Getter {
	return Getter{
		Client: c.Client.AddRef(),
	}
}

func (c Getter) Release() {
	c.Client.Release()
}

// A Getter_Server is a Getter with a local implementation.
type Getter_Server interface {
	Get(context.Context, Getter_get) error
}

// Getter_NewServer creates a new Server from an implementation of Getter_Server.
func Getter_NewServer(s Getter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Getter_Methods(nil, s), s, c, policy)
}

// Getter_ServerToClient creates a new Client from an implementation of Getter_Server.
// The caller is responsible for calling Release on the returned Client.
func Getter_ServerToClient(s Getter_Server, policy *server.Policy) Getter {
	return Getter{Client: capnp.NewClient(Getter_NewServer(s, policy))}
}

// Getter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Getter_Methods(methods []server.Method, s Getter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

// Getter_get holds the state for a server call to Getter.get.
// See server.Call for documentation.
type Getter_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Getter_get) Args() Getter_get_Params {
	return Getter_get_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Getter_get) AllocResults() (Getter_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results{Struct: r}, err
}

type Getter_get_Params struct{ capnp.Struct }

// Getter_get_Params_TypeID is the unique identifier for the type Getter_get_Params.
const Getter_get_Params_TypeID = 0xbf17007e9138e225

func NewGetter_get_Params(s *capnp.Segment) (Getter_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Getter_get_Params{st}, err
}

func NewRootGetter_get_Params(s *capnp.Segment) (Getter_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Getter_get_Params{st}, err
}

func ReadRootGetter_get_Params(msg *capnp.Message) (Getter_get_Params, error) {
	root, err := msg.Root()
	return Getter_get_Params{root.Struct()}, err
}

func (s Getter_get_Params) String() string {
	str, _ := text.Marshal(0xbf17007e9138e225, s.Struct)
	return str
}

// Getter_get_Params_List is a list of Getter_get_Params.
type Getter_get_Params_List struct{ capnp.List }

// NewGetter_get_Params creates a new list of Getter_get_Params.
func NewGetter_get_Params_List(s *capnp.Segment, sz int32) (Getter_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Getter_get_Params_List{l}, err
}

func (s Getter_get_Params_List) At(i int) Getter_get_Params {
	return Getter_get_Params{s.List.Struct(i)}
}

func (s Getter_get_Params_List) Set(i int, v Getter_get_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Getter_get_Params_List) String() string {
	str, _ := text.MarshalList(0xbf17007e9138e225, s.List)
	return str
}

// Getter_get_Params_Future is a wrapper for a Getter_get_Params promised by a client call.
type Getter_get_Params_Future struct{ *capnp.Future }

func (p Getter_get_Params_Future) Struct() (Getter_get_Params, error) {
	s, err := p.Future.Struct()
	return Getter_get_Params{s}, err
}

type Getter_get_Results struct{ capnp.Struct }

// Getter_get_Results_TypeID is the unique identifier for the type Getter_get_Results.
const Getter_get_Results_TypeID = 0xf3c3dfe1133f40f5

func NewGetter_get_Results(s *capnp.Segment) (Getter_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results{st}, err
}

func NewRootGetter_get_Results(s *capnp.Segment) (Getter_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Getter_get_Results{st}, err
}

func ReadRootGetter_get_Results(msg *capnp.Message) (Getter_get_Results, error) {
	root, err := msg.Root()
	return Getter_get_Results{root.Struct()}, err
}

func (s Getter_get_Results) String() string {
	str, _ := text.Marshal(0xf3c3dfe1133f40f5, s.Struct)
	return str
}

func (s Getter_get_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Getter_get_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Getter_get_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Getter_get_Results_List is a list of Getter_get_Results.
type Getter_get_Results_List struct{ capnp.List }

// NewGetter_get_Results creates a new list of Getter_get_Results.
func NewGetter_get_Results_List(s *capnp.Segment, sz int32) (Getter_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Getter_get_Results_List{l}, err
}

func (s Getter_get_Results_List) At(i int) Getter_get_Results {
	return Getter_get_Results{s.List.Struct(i)}
}

func (s Getter_get_Results_List) Set(i int, v Getter_get_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Getter_get_Results_List) String() string {
	str, _ := text.MarshalList(0xf3c3dfe1133f40f5, s.List)
	return str
}

// Getter_get_Results_Future is a wrapper for a Getter_get_Results promised by a client call.
type Getter_get_Results_Future struct{ *capnp.Future }

func (p Getter_get_Results_Future) Struct() (Getter_get_Results, error) {
	s, err := p.Future.Struct()
	return Getter_get_Results{s}, err
}

func (p Getter_get_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Ref struct{ Client *capnp.Client }

// Ref_TypeID is the unique identifier for the type Ref.
const Ref_TypeID = 0xa14ffd6d795dbc31

func (c Ref) GetStored(ctx context.Context, params func(Ref_getStored_Params) error) (Ref_getStored_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa14ffd6d795dbc31,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Ref",
			MethodName:    "getStored",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ref_getStored_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Ref_getStored_Results_Future{Future: ans.Future()}, release
}
func (c Ref) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c Ref) AddRef() Ref {
	return Ref{
		Client: c.Client.AddRef(),
	}
}

func (c Ref) Release() {
	c.Client.Release()
}

// A Ref_Server is a Ref with a local implementation.
type Ref_Server interface {
	GetStored(context.Context, Ref_getStored) error

	Get(context.Context, Getter_get) error
}

// Ref_NewServer creates a new Server from an implementation of Ref_Server.
func Ref_NewServer(s Ref_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ref_Methods(nil, s), s, c, policy)
}

// Ref_ServerToClient creates a new Client from an implementation of Ref_Server.
// The caller is responsible for calling Release on the returned Client.
func Ref_ServerToClient(s Ref_Server, policy *server.Policy) Ref {
	return Ref{Client: capnp.NewClient(Ref_NewServer(s, policy))}
}

// Ref_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ref_Methods(methods []server.Method, s Ref_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa14ffd6d795dbc31,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Ref",
			MethodName:    "getStored",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetStored(ctx, Ref_getStored{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

// Ref_getStored holds the state for a server call to Ref.getStored.
// See server.Call for documentation.
type Ref_getStored struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ref_getStored) Args() Ref_getStored_Params {
	return Ref_getStored_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Ref_getStored) AllocResults() (Ref_getStored_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ref_getStored_Results{Struct: r}, err
}

type Ref_getStored_Params struct{ capnp.Struct }

// Ref_getStored_Params_TypeID is the unique identifier for the type Ref_getStored_Params.
const Ref_getStored_Params_TypeID = 0xa28b89f8877a0b1c

func NewRef_getStored_Params(s *capnp.Segment) (Ref_getStored_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ref_getStored_Params{st}, err
}

func NewRootRef_getStored_Params(s *capnp.Segment) (Ref_getStored_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ref_getStored_Params{st}, err
}

func ReadRootRef_getStored_Params(msg *capnp.Message) (Ref_getStored_Params, error) {
	root, err := msg.Root()
	return Ref_getStored_Params{root.Struct()}, err
}

func (s Ref_getStored_Params) String() string {
	str, _ := text.Marshal(0xa28b89f8877a0b1c, s.Struct)
	return str
}

// Ref_getStored_Params_List is a list of Ref_getStored_Params.
type Ref_getStored_Params_List struct{ capnp.List }

// NewRef_getStored_Params creates a new list of Ref_getStored_Params.
func NewRef_getStored_Params_List(s *capnp.Segment, sz int32) (Ref_getStored_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Ref_getStored_Params_List{l}, err
}

func (s Ref_getStored_Params_List) At(i int) Ref_getStored_Params {
	return Ref_getStored_Params{s.List.Struct(i)}
}

func (s Ref_getStored_Params_List) Set(i int, v Ref_getStored_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Ref_getStored_Params_List) String() string {
	str, _ := text.MarshalList(0xa28b89f8877a0b1c, s.List)
	return str
}

// Ref_getStored_Params_Future is a wrapper for a Ref_getStored_Params promised by a client call.
type Ref_getStored_Params_Future struct{ *capnp.Future }

func (p Ref_getStored_Params_Future) Struct() (Ref_getStored_Params, error) {
	s, err := p.Future.Struct()
	return Ref_getStored_Params{s}, err
}

type Ref_getStored_Results struct{ capnp.Struct }

// Ref_getStored_Results_TypeID is the unique identifier for the type Ref_getStored_Results.
const Ref_getStored_Results_TypeID = 0xfe10400cc1d31474

func NewRef_getStored_Results(s *capnp.Segment) (Ref_getStored_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ref_getStored_Results{st}, err
}

func NewRootRef_getStored_Results(s *capnp.Segment) (Ref_getStored_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ref_getStored_Results{st}, err
}

func ReadRootRef_getStored_Results(msg *capnp.Message) (Ref_getStored_Results, error) {
	root, err := msg.Root()
	return Ref_getStored_Results{root.Struct()}, err
}

func (s Ref_getStored_Results) String() string {
	str, _ := text.Marshal(0xfe10400cc1d31474, s.Struct)
	return str
}

func (s Ref_getStored_Results) StoredValue() (Stored, error) {
	p, err := s.Struct.Ptr(0)
	return Stored{Struct: p.Struct()}, err
}

func (s Ref_getStored_Results) HasStoredValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Ref_getStored_Results) SetStoredValue(v Stored) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStoredValue sets the storedValue field to a newly
// allocated Stored struct, preferring placement in s's segment.
func (s Ref_getStored_Results) NewStoredValue() (Stored, error) {
	ss, err := NewStored(s.Struct.Segment())
	if err != nil {
		return Stored{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Ref_getStored_Results_List is a list of Ref_getStored_Results.
type Ref_getStored_Results_List struct{ capnp.List }

// NewRef_getStored_Results creates a new list of Ref_getStored_Results.
func NewRef_getStored_Results_List(s *capnp.Segment, sz int32) (Ref_getStored_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Ref_getStored_Results_List{l}, err
}

func (s Ref_getStored_Results_List) At(i int) Ref_getStored_Results {
	return Ref_getStored_Results{s.List.Struct(i)}
}

func (s Ref_getStored_Results_List) Set(i int, v Ref_getStored_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Ref_getStored_Results_List) String() string {
	str, _ := text.MarshalList(0xfe10400cc1d31474, s.List)
	return str
}

// Ref_getStored_Results_Future is a wrapper for a Ref_getStored_Results promised by a client call.
type Ref_getStored_Results_Future struct{ *capnp.Future }

func (p Ref_getStored_Results_Future) Struct() (Ref_getStored_Results, error) {
	s, err := p.Future.Struct()
	return Ref_getStored_Results{s}, err
}

func (p Ref_getStored_Results_Future) StoredValue() Stored_Future {
	return Stored_Future{Future: p.Future.Field(0, nil)}
}

type Setter struct{ Client *capnp.Client }

// Setter_TypeID is the unique identifier for the type Setter.
const Setter_TypeID = 0xedefcf72d1a4dcd5

func (c Setter) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}

func (c Setter) AddRef() Setter {
	return Setter{
		Client: c.Client.AddRef(),
	}
}

func (c Setter) Release() {
	c.Client.Release()
}

// A Setter_Server is a Setter with a local implementation.
type Setter_Server interface {
	Set(context.Context, Setter_set) error
}

// Setter_NewServer creates a new Server from an implementation of Setter_Server.
func Setter_NewServer(s Setter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Setter_Methods(nil, s), s, c, policy)
}

// Setter_ServerToClient creates a new Client from an implementation of Setter_Server.
// The caller is responsible for calling Release on the returned Client.
func Setter_ServerToClient(s Setter_Server, policy *server.Policy) Setter {
	return Setter{Client: capnp.NewClient(Setter_NewServer(s, policy))}
}

// Setter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Setter_Methods(methods []server.Method, s Setter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	return methods
}

// Setter_set holds the state for a server call to Setter.set.
// See server.Call for documentation.
type Setter_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Setter_set) Args() Setter_set_Params {
	return Setter_set_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Setter_set) AllocResults() (Setter_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results{Struct: r}, err
}

type Setter_set_Params struct{ capnp.Struct }

// Setter_set_Params_TypeID is the unique identifier for the type Setter_set_Params.
const Setter_set_Params_TypeID = 0xc57b0d3e5cf4c9ee

func NewSetter_set_Params(s *capnp.Segment) (Setter_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Setter_set_Params{st}, err
}

func NewRootSetter_set_Params(s *capnp.Segment) (Setter_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Setter_set_Params{st}, err
}

func ReadRootSetter_set_Params(msg *capnp.Message) (Setter_set_Params, error) {
	root, err := msg.Root()
	return Setter_set_Params{root.Struct()}, err
}

func (s Setter_set_Params) String() string {
	str, _ := text.Marshal(0xc57b0d3e5cf4c9ee, s.Struct)
	return str
}

func (s Setter_set_Params) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Setter_set_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Setter_set_Params) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Setter_set_Params_List is a list of Setter_set_Params.
type Setter_set_Params_List struct{ capnp.List }

// NewSetter_set_Params creates a new list of Setter_set_Params.
func NewSetter_set_Params_List(s *capnp.Segment, sz int32) (Setter_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Setter_set_Params_List{l}, err
}

func (s Setter_set_Params_List) At(i int) Setter_set_Params {
	return Setter_set_Params{s.List.Struct(i)}
}

func (s Setter_set_Params_List) Set(i int, v Setter_set_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Setter_set_Params_List) String() string {
	str, _ := text.MarshalList(0xc57b0d3e5cf4c9ee, s.List)
	return str
}

// Setter_set_Params_Future is a wrapper for a Setter_set_Params promised by a client call.
type Setter_set_Params_Future struct{ *capnp.Future }

func (p Setter_set_Params_Future) Struct() (Setter_set_Params, error) {
	s, err := p.Future.Struct()
	return Setter_set_Params{s}, err
}

func (p Setter_set_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Setter_set_Results struct{ capnp.Struct }

// Setter_set_Results_TypeID is the unique identifier for the type Setter_set_Results.
const Setter_set_Results_TypeID = 0x92f67194cfd010ca

func NewSetter_set_Results(s *capnp.Segment) (Setter_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results{st}, err
}

func NewRootSetter_set_Results(s *capnp.Segment) (Setter_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Setter_set_Results{st}, err
}

func ReadRootSetter_set_Results(msg *capnp.Message) (Setter_set_Results, error) {
	root, err := msg.Root()
	return Setter_set_Results{root.Struct()}, err
}

func (s Setter_set_Results) String() string {
	str, _ := text.Marshal(0x92f67194cfd010ca, s.Struct)
	return str
}

// Setter_set_Results_List is a list of Setter_set_Results.
type Setter_set_Results_List struct{ capnp.List }

// NewSetter_set_Results creates a new list of Setter_set_Results.
func NewSetter_set_Results_List(s *capnp.Segment, sz int32) (Setter_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Setter_set_Results_List{l}, err
}

func (s Setter_set_Results_List) At(i int) Setter_set_Results {
	return Setter_set_Results{s.List.Struct(i)}
}

func (s Setter_set_Results_List) Set(i int, v Setter_set_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Setter_set_Results_List) String() string {
	str, _ := text.MarshalList(0x92f67194cfd010ca, s.List)
	return str
}

// Setter_set_Results_Future is a wrapper for a Setter_set_Results promised by a client call.
type Setter_set_Results_Future struct{ *capnp.Future }

func (p Setter_set_Results_Future) Struct() (Setter_set_Results, error) {
	s, err := p.Future.Struct()
	return Setter_set_Results{s}, err
}

type Cell struct{ Client *capnp.Client }

// Cell_TypeID is the unique identifier for the type Cell.
const Cell_TypeID = 0x86dfe7e96ebb541d

func (c Cell) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}
func (c Cell) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c Cell) AddRef() Cell {
	return Cell{
		Client: c.Client.AddRef(),
	}
}

func (c Cell) Release() {
	c.Client.Release()
}

// A Cell_Server is a Cell with a local implementation.
type Cell_Server interface {
	Set(context.Context, Setter_set) error

	Get(context.Context, Getter_get) error
}

// Cell_NewServer creates a new Server from an implementation of Cell_Server.
func Cell_NewServer(s Cell_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cell_Methods(nil, s), s, c, policy)
}

// Cell_ServerToClient creates a new Client from an implementation of Cell_Server.
// The caller is responsible for calling Release on the returned Client.
func Cell_ServerToClient(s Cell_Server, policy *server.Policy) Cell {
	return Cell{Client: capnp.NewClient(Cell_NewServer(s, policy))}
}

// Cell_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cell_Methods(methods []server.Method, s Cell_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

type TxCell struct{ Client *capnp.Client }

// TxCell_TypeID is the unique identifier for the type TxCell.
const TxCell_TypeID = 0xfcd1f0de6c4076f9

func (c TxCell) TxGet(ctx context.Context, params func(TxCell_txGet_Params) error) (TxCell_txGet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TxCell_txGet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TxCell_txGet_Results_Future{Future: ans.Future()}, release
}
func (c TxCell) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}
func (c TxCell) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c TxCell) AddRef() TxCell {
	return TxCell{
		Client: c.Client.AddRef(),
	}
}

func (c TxCell) Release() {
	c.Client.Release()
}

// A TxCell_Server is a TxCell with a local implementation.
type TxCell_Server interface {
	TxGet(context.Context, TxCell_txGet) error

	Set(context.Context, Setter_set) error

	Get(context.Context, Getter_get) error
}

// TxCell_NewServer creates a new Server from an implementation of TxCell_Server.
func TxCell_NewServer(s TxCell_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TxCell_Methods(nil, s), s, c, policy)
}

// TxCell_ServerToClient creates a new Client from an implementation of TxCell_Server.
// The caller is responsible for calling Release on the returned Client.
func TxCell_ServerToClient(s TxCell_Server, policy *server.Policy) TxCell {
	return TxCell{Client: capnp.NewClient(TxCell_NewServer(s, policy))}
}

// TxCell_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TxCell_Methods(methods []server.Method, s TxCell_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TxGet(ctx, TxCell_txGet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

// TxCell_txGet holds the state for a server call to TxCell.txGet.
// See server.Call for documentation.
type TxCell_txGet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TxCell_txGet) Args() TxCell_txGet_Params {
	return TxCell_txGet_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TxCell_txGet) AllocResults() (TxCell_txGet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxCell_txGet_Results{Struct: r}, err
}

type TxCell_txGet_Params struct{ capnp.Struct }

// TxCell_txGet_Params_TypeID is the unique identifier for the type TxCell_txGet_Params.
const TxCell_txGet_Params_TypeID = 0xf39598e0c091fed8

func NewTxCell_txGet_Params(s *capnp.Segment) (TxCell_txGet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TxCell_txGet_Params{st}, err
}

func NewRootTxCell_txGet_Params(s *capnp.Segment) (TxCell_txGet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TxCell_txGet_Params{st}, err
}

func ReadRootTxCell_txGet_Params(msg *capnp.Message) (TxCell_txGet_Params, error) {
	root, err := msg.Root()
	return TxCell_txGet_Params{root.Struct()}, err
}

func (s TxCell_txGet_Params) String() string {
	str, _ := text.Marshal(0xf39598e0c091fed8, s.Struct)
	return str
}

// TxCell_txGet_Params_List is a list of TxCell_txGet_Params.
type TxCell_txGet_Params_List struct{ capnp.List }

// NewTxCell_txGet_Params creates a new list of TxCell_txGet_Params.
func NewTxCell_txGet_Params_List(s *capnp.Segment, sz int32) (TxCell_txGet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TxCell_txGet_Params_List{l}, err
}

func (s TxCell_txGet_Params_List) At(i int) TxCell_txGet_Params {
	return TxCell_txGet_Params{s.List.Struct(i)}
}

func (s TxCell_txGet_Params_List) Set(i int, v TxCell_txGet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TxCell_txGet_Params_List) String() string {
	str, _ := text.MarshalList(0xf39598e0c091fed8, s.List)
	return str
}

// TxCell_txGet_Params_Future is a wrapper for a TxCell_txGet_Params promised by a client call.
type TxCell_txGet_Params_Future struct{ *capnp.Future }

func (p TxCell_txGet_Params_Future) Struct() (TxCell_txGet_Params, error) {
	s, err := p.Future.Struct()
	return TxCell_txGet_Params{s}, err
}

type TxCell_txGet_Results struct{ capnp.Struct }

// TxCell_txGet_Results_TypeID is the unique identifier for the type TxCell_txGet_Results.
const TxCell_txGet_Results_TypeID = 0xdfeaf85f84328172

func NewTxCell_txGet_Results(s *capnp.Segment) (TxCell_txGet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxCell_txGet_Results{st}, err
}

func NewRootTxCell_txGet_Results(s *capnp.Segment) (TxCell_txGet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TxCell_txGet_Results{st}, err
}

func ReadRootTxCell_txGet_Results(msg *capnp.Message) (TxCell_txGet_Results, error) {
	root, err := msg.Root()
	return TxCell_txGet_Results{root.Struct()}, err
}

func (s TxCell_txGet_Results) String() string {
	str, _ := text.Marshal(0xdfeaf85f84328172, s.Struct)
	return str
}

func (s TxCell_txGet_Results) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s TxCell_txGet_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s TxCell_txGet_Results) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s TxCell_txGet_Results) Setter() Setter {
	p, _ := s.Struct.Ptr(1)
	return Setter{Client: p.Interface().Client()}
}

func (s TxCell_txGet_Results) HasSetter() bool {
	return s.Struct.HasPtr(1)
}

func (s TxCell_txGet_Results) SetSetter(v Setter) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// TxCell_txGet_Results_List is a list of TxCell_txGet_Results.
type TxCell_txGet_Results_List struct{ capnp.List }

// NewTxCell_txGet_Results creates a new list of TxCell_txGet_Results.
func NewTxCell_txGet_Results_List(s *capnp.Segment, sz int32) (TxCell_txGet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TxCell_txGet_Results_List{l}, err
}

func (s TxCell_txGet_Results_List) At(i int) TxCell_txGet_Results {
	return TxCell_txGet_Results{s.List.Struct(i)}
}

func (s TxCell_txGet_Results_List) Set(i int, v TxCell_txGet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TxCell_txGet_Results_List) String() string {
	str, _ := text.MarshalList(0xdfeaf85f84328172, s.List)
	return str
}

// TxCell_txGet_Results_Future is a wrapper for a TxCell_txGet_Results promised by a client call.
type TxCell_txGet_Results_Future struct{ *capnp.Future }

func (p TxCell_txGet_Results_Future) Struct() (TxCell_txGet_Results, error) {
	s, err := p.Future.Struct()
	return TxCell_txGet_Results{s}, err
}

func (p TxCell_txGet_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p TxCell_txGet_Results_Future) Setter() Setter {
	return Setter{Client: p.Future.Field(1, nil).Client()}
}

type RootPtr struct{ Client *capnp.Client }

// RootPtr_TypeID is the unique identifier for the type RootPtr.
const RootPtr_TypeID = 0xec69889c3a1aaf50

func (c RootPtr) TxGet(ctx context.Context, params func(TxCell_txGet_Params) error) (TxCell_txGet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TxCell_txGet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TxCell_txGet_Results_Future{Future: ans.Future()}, release
}
func (c RootPtr) Set(ctx context.Context, params func(Setter_set_Params) error) (Setter_set_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Setter_set_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Setter_set_Results_Future{Future: ans.Future()}, release
}
func (c RootPtr) Get(ctx context.Context, params func(Getter_get_Params) error) (Getter_get_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Getter_get_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Getter_get_Results_Future{Future: ans.Future()}, release
}

func (c RootPtr) AddRef() RootPtr {
	return RootPtr{
		Client: c.Client.AddRef(),
	}
}

func (c RootPtr) Release() {
	c.Client.Release()
}

// A RootPtr_Server is a RootPtr with a local implementation.
type RootPtr_Server interface {
	TxGet(context.Context, TxCell_txGet) error

	Set(context.Context, Setter_set) error

	Get(context.Context, Getter_get) error
}

// RootPtr_NewServer creates a new Server from an implementation of RootPtr_Server.
func RootPtr_NewServer(s RootPtr_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RootPtr_Methods(nil, s), s, c, policy)
}

// RootPtr_ServerToClient creates a new Client from an implementation of RootPtr_Server.
// The caller is responsible for calling Release on the returned Client.
func RootPtr_ServerToClient(s RootPtr_Server, policy *server.Policy) RootPtr {
	return RootPtr{Client: capnp.NewClient(RootPtr_NewServer(s, policy))}
}

// RootPtr_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RootPtr_Methods(methods []server.Method, s RootPtr_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfcd1f0de6c4076f9,
			MethodID:      0,
			InterfaceName: "protocol.capnp:TxCell",
			MethodName:    "txGet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TxGet(ctx, TxCell_txGet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xedefcf72d1a4dcd5,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Setter",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, Setter_set{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb1928944e0fc3173,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Getter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, Getter_get{call})
		},
	})

	return methods
}

type Storage struct{ Client *capnp.Client }

// Storage_TypeID is the unique identifier for the type Storage.
const Storage_TypeID = 0x84ec75049386a248

func (c Storage) Put(ctx context.Context, params func(Storage_put_Params) error) (Storage_put_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84ec75049386a248,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Storage",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Storage_put_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Storage_put_Results_Future{Future: ans.Future()}, release
}

func (c Storage) AddRef() Storage {
	return Storage{
		Client: c.Client.AddRef(),
	}
}

func (c Storage) Release() {
	c.Client.Release()
}

// A Storage_Server is a Storage with a local implementation.
type Storage_Server interface {
	Put(context.Context, Storage_put) error
}

// Storage_NewServer creates a new Server from an implementation of Storage_Server.
func Storage_NewServer(s Storage_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Storage_Methods(nil, s), s, c, policy)
}

// Storage_ServerToClient creates a new Client from an implementation of Storage_Server.
// The caller is responsible for calling Release on the returned Client.
func Storage_ServerToClient(s Storage_Server, policy *server.Policy) Storage {
	return Storage{Client: capnp.NewClient(Storage_NewServer(s, policy))}
}

// Storage_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Storage_Methods(methods []server.Method, s Storage_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84ec75049386a248,
			MethodID:      0,
			InterfaceName: "protocol.capnp:Storage",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, Storage_put{call})
		},
	})

	return methods
}

// Storage_put holds the state for a server call to Storage.put.
// See server.Call for documentation.
type Storage_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Storage_put) Args() Storage_put_Params {
	return Storage_put_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Storage_put) AllocResults() (Storage_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Results{Struct: r}, err
}

type Storage_put_Params struct{ capnp.Struct }

// Storage_put_Params_TypeID is the unique identifier for the type Storage_put_Params.
const Storage_put_Params_TypeID = 0xd17d67c20039536b

func NewStorage_put_Params(s *capnp.Segment) (Storage_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Params{st}, err
}

func NewRootStorage_put_Params(s *capnp.Segment) (Storage_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Params{st}, err
}

func ReadRootStorage_put_Params(msg *capnp.Message) (Storage_put_Params, error) {
	root, err := msg.Root()
	return Storage_put_Params{root.Struct()}, err
}

func (s Storage_put_Params) String() string {
	str, _ := text.Marshal(0xd17d67c20039536b, s.Struct)
	return str
}

func (s Storage_put_Params) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Storage_put_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Storage_put_Params) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Storage_put_Params_List is a list of Storage_put_Params.
type Storage_put_Params_List struct{ capnp.List }

// NewStorage_put_Params creates a new list of Storage_put_Params.
func NewStorage_put_Params_List(s *capnp.Segment, sz int32) (Storage_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Storage_put_Params_List{l}, err
}

func (s Storage_put_Params_List) At(i int) Storage_put_Params {
	return Storage_put_Params{s.List.Struct(i)}
}

func (s Storage_put_Params_List) Set(i int, v Storage_put_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Storage_put_Params_List) String() string {
	str, _ := text.MarshalList(0xd17d67c20039536b, s.List)
	return str
}

// Storage_put_Params_Future is a wrapper for a Storage_put_Params promised by a client call.
type Storage_put_Params_Future struct{ *capnp.Future }

func (p Storage_put_Params_Future) Struct() (Storage_put_Params, error) {
	s, err := p.Future.Struct()
	return Storage_put_Params{s}, err
}

func (p Storage_put_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Storage_put_Results struct{ capnp.Struct }

// Storage_put_Results_TypeID is the unique identifier for the type Storage_put_Results.
const Storage_put_Results_TypeID = 0xc5dc8978c148f57a

func NewStorage_put_Results(s *capnp.Segment) (Storage_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Results{st}, err
}

func NewRootStorage_put_Results(s *capnp.Segment) (Storage_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storage_put_Results{st}, err
}

func ReadRootStorage_put_Results(msg *capnp.Message) (Storage_put_Results, error) {
	root, err := msg.Root()
	return Storage_put_Results{root.Struct()}, err
}

func (s Storage_put_Results) String() string {
	str, _ := text.Marshal(0xc5dc8978c148f57a, s.Struct)
	return str
}

func (s Storage_put_Results) Ref() Ref {
	p, _ := s.Struct.Ptr(0)
	return Ref{Client: p.Interface().Client()}
}

func (s Storage_put_Results) HasRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Storage_put_Results) SetRef(v Ref) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Storage_put_Results_List is a list of Storage_put_Results.
type Storage_put_Results_List struct{ capnp.List }

// NewStorage_put_Results creates a new list of Storage_put_Results.
func NewStorage_put_Results_List(s *capnp.Segment, sz int32) (Storage_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Storage_put_Results_List{l}, err
}

func (s Storage_put_Results_List) At(i int) Storage_put_Results {
	return Storage_put_Results{s.List.Struct(i)}
}

func (s Storage_put_Results_List) Set(i int, v Storage_put_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Storage_put_Results_List) String() string {
	str, _ := text.MarshalList(0xc5dc8978c148f57a, s.List)
	return str
}

// Storage_put_Results_Future is a wrapper for a Storage_put_Results promised by a client call.
type Storage_put_Results_Future struct{ *capnp.Future }

func (p Storage_put_Results_Future) Struct() (Storage_put_Results, error) {
	s, err := p.Future.Struct()
	return Storage_put_Results{s}, err
}

func (p Storage_put_Results_Future) Ref() Ref {
	return Ref{Client: p.Future.Field(0, nil).Client()}
}

type Dynamic struct{ capnp.Struct }

// Dynamic_TypeID is the unique identifier for the type Dynamic.
const Dynamic_TypeID = 0xc03ae9bd42824061

func NewDynamic(s *capnp.Segment) (Dynamic, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Dynamic{st}, err
}

func NewRootDynamic(s *capnp.Segment) (Dynamic, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Dynamic{st}, err
}

func ReadRootDynamic(msg *capnp.Message) (Dynamic, error) {
	root, err := msg.Root()
	return Dynamic{root.Struct()}, err
}

func (s Dynamic) String() string {
	str, _ := text.Marshal(0xc03ae9bd42824061, s.Struct)
	return str
}

func (s Dynamic) Ref() Ref {
	p, _ := s.Struct.Ptr(0)
	return Ref{Client: p.Interface().Client()}
}

func (s Dynamic) HasRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Dynamic) SetRef(v Ref) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Dynamic) TypeId() uint64 {
	return s.Struct.Uint64(0)
}

func (s Dynamic) SetTypeId(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Dynamic_List is a list of Dynamic.
type Dynamic_List struct{ capnp.List }

// NewDynamic creates a new list of Dynamic.
func NewDynamic_List(s *capnp.Segment, sz int32) (Dynamic_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Dynamic_List{l}, err
}

func (s Dynamic_List) At(i int) Dynamic { return Dynamic{s.List.Struct(i)} }

func (s Dynamic_List) Set(i int, v Dynamic) error { return s.List.SetStruct(i, v.Struct) }

func (s Dynamic_List) String() string {
	str, _ := text.MarshalList(0xc03ae9bd42824061, s.List)
	return str
}

// Dynamic_Future is a wrapper for a Dynamic promised by a client call.
type Dynamic_Future struct{ *capnp.Future }

func (p Dynamic_Future) Struct() (Dynamic, error) {
	s, err := p.Future.Struct()
	return Dynamic{s}, err
}

func (p Dynamic_Future) Ref() Ref {
	return Ref{Client: p.Future.Field(0, nil).Client()}
}

type ContentId struct{ capnp.Struct }

// ContentId_TypeID is the unique identifier for the type ContentId.
const ContentId_TypeID = 0xc5bd7ad468fa72a6

func NewContentId(s *capnp.Segment) (ContentId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ContentId{st}, err
}

func NewRootContentId(s *capnp.Segment) (ContentId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ContentId{st}, err
}

func ReadRootContentId(msg *capnp.Message) (ContentId, error) {
	root, err := msg.Root()
	return ContentId{root.Struct()}, err
}

func (s ContentId) String() string {
	str, _ := text.Marshal(0xc5bd7ad468fa72a6, s.Struct)
	return str
}

func (s ContentId) Digest() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ContentId) HasDigest() bool {
	return s.Struct.HasPtr(0)
}

func (s ContentId) SetDigest(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ContentId) Format() ContentId_Format {
	return ContentId_Format(s.Struct.Uint16(0))
}

func (s ContentId) SetFormat(v ContentId_Format) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s ContentId) Algo() ContentId_Algo {
	return ContentId_Algo(s.Struct.Uint16(2))
}

func (s ContentId) SetAlgo(v ContentId_Algo) {
	s.Struct.SetUint16(2, uint16(v))
}

// ContentId_List is a list of ContentId.
type ContentId_List struct{ capnp.List }

// NewContentId creates a new list of ContentId.
func NewContentId_List(s *capnp.Segment, sz int32) (ContentId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ContentId_List{l}, err
}

func (s ContentId_List) At(i int) ContentId { return ContentId{s.List.Struct(i)} }

func (s ContentId_List) Set(i int, v ContentId) error { return s.List.SetStruct(i, v.Struct) }

func (s ContentId_List) String() string {
	str, _ := text.MarshalList(0xc5bd7ad468fa72a6, s.List)
	return str
}

// ContentId_Future is a wrapper for a ContentId promised by a client call.
type ContentId_Future struct{ *capnp.Future }

func (p ContentId_Future) Struct() (ContentId, error) {
	s, err := p.Future.Struct()
	return ContentId{s}, err
}

type ContentId_Format uint16

// ContentId_Format_TypeID is the unique identifier for the type ContentId_Format.
const ContentId_Format_TypeID = 0xca4ea71483923045

// Values of ContentId_Format.
const (
	ContentId_Format_segment ContentId_Format = 0
	ContentId_Format_bytes   ContentId_Format = 1
)

// String returns the enum's constant name.
func (c ContentId_Format) String() string {
	switch c {
	case ContentId_Format_segment:
		return "segment"
	case ContentId_Format_bytes:
		return "bytes"

	default:
		return ""
	}
}

// ContentId_FormatFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ContentId_FormatFromString(c string) ContentId_Format {
	switch c {
	case "segment":
		return ContentId_Format_segment
	case "bytes":
		return ContentId_Format_bytes

	default:
		return 0
	}
}

type ContentId_Format_List struct{ capnp.List }

func NewContentId_Format_List(s *capnp.Segment, sz int32) (ContentId_Format_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ContentId_Format_List{l.List}, err
}

func (l ContentId_Format_List) At(i int) ContentId_Format {
	ul := capnp.UInt16List{List: l.List}
	return ContentId_Format(ul.At(i))
}

func (l ContentId_Format_List) Set(i int, v ContentId_Format) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type ContentId_Algo uint16

// ContentId_Algo_TypeID is the unique identifier for the type ContentId_Algo.
const ContentId_Algo_TypeID = 0x889936d1bbf13253

// Values of ContentId_Algo.
const (
	ContentId_Algo_sha256 ContentId_Algo = 0
)

// String returns the enum's constant name.
func (c ContentId_Algo) String() string {
	switch c {
	case ContentId_Algo_sha256:
		return "sha256"

	default:
		return ""
	}
}

// ContentId_AlgoFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ContentId_AlgoFromString(c string) ContentId_Algo {
	switch c {
	case "sha256":
		return ContentId_Algo_sha256

	default:
		return 0
	}
}

type ContentId_Algo_List struct{ capnp.List }

func NewContentId_Algo_List(s *capnp.Segment, sz int32) (ContentId_Algo_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ContentId_Algo_List{l.List}, err
}

func (l ContentId_Algo_List) At(i int) ContentId_Algo {
	ul := capnp.UInt16List{List: l.List}
	return ContentId_Algo(ul.At(i))
}

func (l ContentId_Algo_List) Set(i int, v ContentId_Algo) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Stored struct{ capnp.Struct }

// Stored_TypeID is the unique identifier for the type Stored.
const Stored_TypeID = 0xe6eb5cba7d06cb58

func NewStored(s *capnp.Segment) (Stored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Stored{st}, err
}

func NewRootStored(s *capnp.Segment) (Stored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Stored{st}, err
}

func ReadRootStored(msg *capnp.Message) (Stored, error) {
	root, err := msg.Root()
	return Stored{root.Struct()}, err
}

func (s Stored) String() string {
	str, _ := text.Marshal(0xe6eb5cba7d06cb58, s.Struct)
	return str
}

func (s Stored) Data() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Stored) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Stored) SetData(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Stored) Refs() (ContentId_List, error) {
	p, err := s.Struct.Ptr(1)
	return ContentId_List{List: p.List()}, err
}

func (s Stored) HasRefs() bool {
	return s.Struct.HasPtr(1)
}

func (s Stored) SetRefs(v ContentId_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRefs sets the refs field to a newly
// allocated ContentId_List, preferring placement in s's segment.
func (s Stored) NewRefs(n int32) (ContentId_List, error) {
	l, err := NewContentId_List(s.Struct.Segment(), n)
	if err != nil {
		return ContentId_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Stored_List is a list of Stored.
type Stored_List struct{ capnp.List }

// NewStored creates a new list of Stored.
func NewStored_List(s *capnp.Segment, sz int32) (Stored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Stored_List{l}, err
}

func (s Stored_List) At(i int) Stored { return Stored{s.List.Struct(i)} }

func (s Stored_List) Set(i int, v Stored) error { return s.List.SetStruct(i, v.Struct) }

func (s Stored_List) String() string {
	str, _ := text.MarshalList(0xe6eb5cba7d06cb58, s.List)
	return str
}

// Stored_Future is a wrapper for a Stored promised by a client call.
type Stored_Future struct{ *capnp.Future }

func (p Stored_Future) Struct() (Stored, error) {
	s, err := p.Future.Struct()
	return Stored{s}, err
}

func (p Stored_Future) Data() *capnp.Future {
	return p.Future.Field(0, nil)
}

type RootApi struct{ Client *capnp.Client }

// RootApi_TypeID is the unique identifier for the type RootApi.
const RootApi_TypeID = 0xbf3d5608637940e8

func (c RootApi) BlobMap(ctx context.Context, params func(RootApi_blobMap_Params) error) (RootApi_blobMap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      0,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "blobMap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RootApi_blobMap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RootApi_blobMap_Results_Future{Future: ans.Future()}, release
}
func (c RootApi) Root(ctx context.Context, params func(RootApi_root_Params) error) (RootApi_root_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      1,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "root",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RootApi_root_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RootApi_root_Results_Future{Future: ans.Future()}, release
}
func (c RootApi) Storage(ctx context.Context, params func(RootApi_storage_Params) error) (RootApi_storage_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      2,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "storage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RootApi_storage_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RootApi_storage_Results_Future{Future: ans.Future()}, release
}

func (c RootApi) AddRef() RootApi {
	return RootApi{
		Client: c.Client.AddRef(),
	}
}

func (c RootApi) Release() {
	c.Client.Release()
}

// A RootApi_Server is a RootApi with a local implementation.
type RootApi_Server interface {
	BlobMap(context.Context, RootApi_blobMap) error

	Root(context.Context, RootApi_root) error

	Storage(context.Context, RootApi_storage) error
}

// RootApi_NewServer creates a new Server from an implementation of RootApi_Server.
func RootApi_NewServer(s RootApi_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RootApi_Methods(nil, s), s, c, policy)
}

// RootApi_ServerToClient creates a new Client from an implementation of RootApi_Server.
// The caller is responsible for calling Release on the returned Client.
func RootApi_ServerToClient(s RootApi_Server, policy *server.Policy) RootApi {
	return RootApi{Client: capnp.NewClient(RootApi_NewServer(s, policy))}
}

// RootApi_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RootApi_Methods(methods []server.Method, s RootApi_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      0,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "blobMap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.BlobMap(ctx, RootApi_blobMap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      1,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "root",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Root(ctx, RootApi_root{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf3d5608637940e8,
			MethodID:      2,
			InterfaceName: "protocol.capnp:RootApi",
			MethodName:    "storage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Storage(ctx, RootApi_storage{call})
		},
	})

	return methods
}

// RootApi_blobMap holds the state for a server call to RootApi.blobMap.
// See server.Call for documentation.
type RootApi_blobMap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RootApi_blobMap) Args() RootApi_blobMap_Params {
	return RootApi_blobMap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RootApi_blobMap) AllocResults() (RootApi_blobMap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_blobMap_Results{Struct: r}, err
}

// RootApi_root holds the state for a server call to RootApi.root.
// See server.Call for documentation.
type RootApi_root struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RootApi_root) Args() RootApi_root_Params {
	return RootApi_root_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RootApi_root) AllocResults() (RootApi_root_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_root_Results{Struct: r}, err
}

// RootApi_storage holds the state for a server call to RootApi.storage.
// See server.Call for documentation.
type RootApi_storage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RootApi_storage) Args() RootApi_storage_Params {
	return RootApi_storage_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RootApi_storage) AllocResults() (RootApi_storage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_storage_Results{Struct: r}, err
}

type RootApi_blobMap_Params struct{ capnp.Struct }

// RootApi_blobMap_Params_TypeID is the unique identifier for the type RootApi_blobMap_Params.
const RootApi_blobMap_Params_TypeID = 0xe2e07eea432c8e12

func NewRootApi_blobMap_Params(s *capnp.Segment) (RootApi_blobMap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_blobMap_Params{st}, err
}

func NewRootRootApi_blobMap_Params(s *capnp.Segment) (RootApi_blobMap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_blobMap_Params{st}, err
}

func ReadRootRootApi_blobMap_Params(msg *capnp.Message) (RootApi_blobMap_Params, error) {
	root, err := msg.Root()
	return RootApi_blobMap_Params{root.Struct()}, err
}

func (s RootApi_blobMap_Params) String() string {
	str, _ := text.Marshal(0xe2e07eea432c8e12, s.Struct)
	return str
}

// RootApi_blobMap_Params_List is a list of RootApi_blobMap_Params.
type RootApi_blobMap_Params_List struct{ capnp.List }

// NewRootApi_blobMap_Params creates a new list of RootApi_blobMap_Params.
func NewRootApi_blobMap_Params_List(s *capnp.Segment, sz int32) (RootApi_blobMap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RootApi_blobMap_Params_List{l}, err
}

func (s RootApi_blobMap_Params_List) At(i int) RootApi_blobMap_Params {
	return RootApi_blobMap_Params{s.List.Struct(i)}
}

func (s RootApi_blobMap_Params_List) Set(i int, v RootApi_blobMap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RootApi_blobMap_Params_List) String() string {
	str, _ := text.MarshalList(0xe2e07eea432c8e12, s.List)
	return str
}

// RootApi_blobMap_Params_Future is a wrapper for a RootApi_blobMap_Params promised by a client call.
type RootApi_blobMap_Params_Future struct{ *capnp.Future }

func (p RootApi_blobMap_Params_Future) Struct() (RootApi_blobMap_Params, error) {
	s, err := p.Future.Struct()
	return RootApi_blobMap_Params{s}, err
}

type RootApi_blobMap_Results struct{ capnp.Struct }

// RootApi_blobMap_Results_TypeID is the unique identifier for the type RootApi_blobMap_Results.
const RootApi_blobMap_Results_TypeID = 0xa7d5e26e70f192f5

func NewRootApi_blobMap_Results(s *capnp.Segment) (RootApi_blobMap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_blobMap_Results{st}, err
}

func NewRootRootApi_blobMap_Results(s *capnp.Segment) (RootApi_blobMap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_blobMap_Results{st}, err
}

func ReadRootRootApi_blobMap_Results(msg *capnp.Message) (RootApi_blobMap_Results, error) {
	root, err := msg.Root()
	return RootApi_blobMap_Results{root.Struct()}, err
}

func (s RootApi_blobMap_Results) String() string {
	str, _ := text.Marshal(0xa7d5e26e70f192f5, s.Struct)
	return str
}

func (s RootApi_blobMap_Results) Map() Map {
	p, _ := s.Struct.Ptr(0)
	return Map{Client: p.Interface().Client()}
}

func (s RootApi_blobMap_Results) HasMap() bool {
	return s.Struct.HasPtr(0)
}

func (s RootApi_blobMap_Results) SetMap(v Map) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RootApi_blobMap_Results_List is a list of RootApi_blobMap_Results.
type RootApi_blobMap_Results_List struct{ capnp.List }

// NewRootApi_blobMap_Results creates a new list of RootApi_blobMap_Results.
func NewRootApi_blobMap_Results_List(s *capnp.Segment, sz int32) (RootApi_blobMap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RootApi_blobMap_Results_List{l}, err
}

func (s RootApi_blobMap_Results_List) At(i int) RootApi_blobMap_Results {
	return RootApi_blobMap_Results{s.List.Struct(i)}
}

func (s RootApi_blobMap_Results_List) Set(i int, v RootApi_blobMap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RootApi_blobMap_Results_List) String() string {
	str, _ := text.MarshalList(0xa7d5e26e70f192f5, s.List)
	return str
}

// RootApi_blobMap_Results_Future is a wrapper for a RootApi_blobMap_Results promised by a client call.
type RootApi_blobMap_Results_Future struct{ *capnp.Future }

func (p RootApi_blobMap_Results_Future) Struct() (RootApi_blobMap_Results, error) {
	s, err := p.Future.Struct()
	return RootApi_blobMap_Results{s}, err
}

func (p RootApi_blobMap_Results_Future) Map() Map {
	return Map{Client: p.Future.Field(0, nil).Client()}
}

type RootApi_root_Params struct{ capnp.Struct }

// RootApi_root_Params_TypeID is the unique identifier for the type RootApi_root_Params.
const RootApi_root_Params_TypeID = 0x9eb1a39212b38ec1

func NewRootApi_root_Params(s *capnp.Segment) (RootApi_root_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_root_Params{st}, err
}

func NewRootRootApi_root_Params(s *capnp.Segment) (RootApi_root_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_root_Params{st}, err
}

func ReadRootRootApi_root_Params(msg *capnp.Message) (RootApi_root_Params, error) {
	root, err := msg.Root()
	return RootApi_root_Params{root.Struct()}, err
}

func (s RootApi_root_Params) String() string {
	str, _ := text.Marshal(0x9eb1a39212b38ec1, s.Struct)
	return str
}

// RootApi_root_Params_List is a list of RootApi_root_Params.
type RootApi_root_Params_List struct{ capnp.List }

// NewRootApi_root_Params creates a new list of RootApi_root_Params.
func NewRootApi_root_Params_List(s *capnp.Segment, sz int32) (RootApi_root_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RootApi_root_Params_List{l}, err
}

func (s RootApi_root_Params_List) At(i int) RootApi_root_Params {
	return RootApi_root_Params{s.List.Struct(i)}
}

func (s RootApi_root_Params_List) Set(i int, v RootApi_root_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RootApi_root_Params_List) String() string {
	str, _ := text.MarshalList(0x9eb1a39212b38ec1, s.List)
	return str
}

// RootApi_root_Params_Future is a wrapper for a RootApi_root_Params promised by a client call.
type RootApi_root_Params_Future struct{ *capnp.Future }

func (p RootApi_root_Params_Future) Struct() (RootApi_root_Params, error) {
	s, err := p.Future.Struct()
	return RootApi_root_Params{s}, err
}

type RootApi_root_Results struct{ capnp.Struct }

// RootApi_root_Results_TypeID is the unique identifier for the type RootApi_root_Results.
const RootApi_root_Results_TypeID = 0xd73f2e504c7f9730

func NewRootApi_root_Results(s *capnp.Segment) (RootApi_root_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_root_Results{st}, err
}

func NewRootRootApi_root_Results(s *capnp.Segment) (RootApi_root_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_root_Results{st}, err
}

func ReadRootRootApi_root_Results(msg *capnp.Message) (RootApi_root_Results, error) {
	root, err := msg.Root()
	return RootApi_root_Results{root.Struct()}, err
}

func (s RootApi_root_Results) String() string {
	str, _ := text.Marshal(0xd73f2e504c7f9730, s.Struct)
	return str
}

func (s RootApi_root_Results) Root() RootPtr {
	p, _ := s.Struct.Ptr(0)
	return RootPtr{Client: p.Interface().Client()}
}

func (s RootApi_root_Results) HasRoot() bool {
	return s.Struct.HasPtr(0)
}

func (s RootApi_root_Results) SetRoot(v RootPtr) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RootApi_root_Results_List is a list of RootApi_root_Results.
type RootApi_root_Results_List struct{ capnp.List }

// NewRootApi_root_Results creates a new list of RootApi_root_Results.
func NewRootApi_root_Results_List(s *capnp.Segment, sz int32) (RootApi_root_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RootApi_root_Results_List{l}, err
}

func (s RootApi_root_Results_List) At(i int) RootApi_root_Results {
	return RootApi_root_Results{s.List.Struct(i)}
}

func (s RootApi_root_Results_List) Set(i int, v RootApi_root_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RootApi_root_Results_List) String() string {
	str, _ := text.MarshalList(0xd73f2e504c7f9730, s.List)
	return str
}

// RootApi_root_Results_Future is a wrapper for a RootApi_root_Results promised by a client call.
type RootApi_root_Results_Future struct{ *capnp.Future }

func (p RootApi_root_Results_Future) Struct() (RootApi_root_Results, error) {
	s, err := p.Future.Struct()
	return RootApi_root_Results{s}, err
}

func (p RootApi_root_Results_Future) Root() RootPtr {
	return RootPtr{Client: p.Future.Field(0, nil).Client()}
}

type RootApi_storage_Params struct{ capnp.Struct }

// RootApi_storage_Params_TypeID is the unique identifier for the type RootApi_storage_Params.
const RootApi_storage_Params_TypeID = 0xfdb4062d10a3ca31

func NewRootApi_storage_Params(s *capnp.Segment) (RootApi_storage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_storage_Params{st}, err
}

func NewRootRootApi_storage_Params(s *capnp.Segment) (RootApi_storage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RootApi_storage_Params{st}, err
}

func ReadRootRootApi_storage_Params(msg *capnp.Message) (RootApi_storage_Params, error) {
	root, err := msg.Root()
	return RootApi_storage_Params{root.Struct()}, err
}

func (s RootApi_storage_Params) String() string {
	str, _ := text.Marshal(0xfdb4062d10a3ca31, s.Struct)
	return str
}

// RootApi_storage_Params_List is a list of RootApi_storage_Params.
type RootApi_storage_Params_List struct{ capnp.List }

// NewRootApi_storage_Params creates a new list of RootApi_storage_Params.
func NewRootApi_storage_Params_List(s *capnp.Segment, sz int32) (RootApi_storage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RootApi_storage_Params_List{l}, err
}

func (s RootApi_storage_Params_List) At(i int) RootApi_storage_Params {
	return RootApi_storage_Params{s.List.Struct(i)}
}

func (s RootApi_storage_Params_List) Set(i int, v RootApi_storage_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RootApi_storage_Params_List) String() string {
	str, _ := text.MarshalList(0xfdb4062d10a3ca31, s.List)
	return str
}

// RootApi_storage_Params_Future is a wrapper for a RootApi_storage_Params promised by a client call.
type RootApi_storage_Params_Future struct{ *capnp.Future }

func (p RootApi_storage_Params_Future) Struct() (RootApi_storage_Params, error) {
	s, err := p.Future.Struct()
	return RootApi_storage_Params{s}, err
}

type RootApi_storage_Results struct{ capnp.Struct }

// RootApi_storage_Results_TypeID is the unique identifier for the type RootApi_storage_Results.
const RootApi_storage_Results_TypeID = 0xcd2937d0c1251d4e

func NewRootApi_storage_Results(s *capnp.Segment) (RootApi_storage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_storage_Results{st}, err
}

func NewRootRootApi_storage_Results(s *capnp.Segment) (RootApi_storage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RootApi_storage_Results{st}, err
}

func ReadRootRootApi_storage_Results(msg *capnp.Message) (RootApi_storage_Results, error) {
	root, err := msg.Root()
	return RootApi_storage_Results{root.Struct()}, err
}

func (s RootApi_storage_Results) String() string {
	str, _ := text.Marshal(0xcd2937d0c1251d4e, s.Struct)
	return str
}

func (s RootApi_storage_Results) Storage() Storage {
	p, _ := s.Struct.Ptr(0)
	return Storage{Client: p.Interface().Client()}
}

func (s RootApi_storage_Results) HasStorage() bool {
	return s.Struct.HasPtr(0)
}

func (s RootApi_storage_Results) SetStorage(v Storage) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RootApi_storage_Results_List is a list of RootApi_storage_Results.
type RootApi_storage_Results_List struct{ capnp.List }

// NewRootApi_storage_Results creates a new list of RootApi_storage_Results.
func NewRootApi_storage_Results_List(s *capnp.Segment, sz int32) (RootApi_storage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RootApi_storage_Results_List{l}, err
}

func (s RootApi_storage_Results_List) At(i int) RootApi_storage_Results {
	return RootApi_storage_Results{s.List.Struct(i)}
}

func (s RootApi_storage_Results_List) Set(i int, v RootApi_storage_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RootApi_storage_Results_List) String() string {
	str, _ := text.MarshalList(0xcd2937d0c1251d4e, s.List)
	return str
}

// RootApi_storage_Results_Future is a wrapper for a RootApi_storage_Results promised by a client call.
type RootApi_storage_Results_Future struct{ *capnp.Future }

func (p RootApi_storage_Results_Future) Struct() (RootApi_storage_Results, error) {
	s, err := p.Future.Struct()
	return RootApi_storage_Results{s}, err
}

func (p RootApi_storage_Results_Future) Storage() Storage {
	return Storage{Client: p.Future.Field(0, nil).Client()}
}

const schema_ca7b236fb6fb07c3 = "x\xda\x9cW}l\x1bg\x19\x7f\x9e\xb3}g;\x97" +
	"\x9d_\xbf)Q\xab\x05\xb3\xd0\xaa4\"V\x9c*\xed" +
	"\x12i\xd8NS\xd2\x88e\xf8\x92\xb4Z\xa5Upm" +
	".^4'6\xf6ek:m\xd5`\x8cU\xb0\x89" +
	"\x06*\xd6\x89\x81\xe8\x18S\xff\xa8\xa6\x14\x8a \xa3\xda" +
	"\xc2\x14M\x0bB[\x05\x13\xfc1\xd1\x0f\xc4GG\x07" +
	"\x94\xad0\xb6u\x87\xde\xd7\xbe\xbb\xd7\x1fIF\xff;" +
	"\xbd\xf7\xbc\xcf\xc7\xef\xf7|\xbd]K\xfe\x94\x94\x08d" +
	"U\x00\xfd\x9b\x01\xd9\xdeu\xe2\x91o\xf9g\xae<\x0c" +
	"D\xf3\xd9/)\xef\xff4\xff\xc9\xfb\x97\x01\x90\xae\x97" +
	"\x17\xe8-\xb2\x02@\xdb\xe4A:\xcc\xbe\xec\xb6\xb1\xe7" +
	"\xa7/\xff\xe5\xfc#5\xc2\x10A\xda#\x9f\xa0\xb7q" +
	"\xf1^Y\xa1\xbd\xf2fzR\xd6\xec\xd1\xee\xab\xcf\x9f" +
	"\xdbv\xfcQ \xeb%\xfbG\xc5\xf7\xee\xfe\xed\xa1\xb3" +
	"KL\xfbS\xf2\xbf\xe8I.\xfe\x8c\x1c\x03\xb4\x97#" +
	"\xaf\xbd\xfa\xed/\xfd{\x0e\xc8\xc7\x10\xc0\xafDp\xeb" +
	"q9\x8a\xe0\xb7\x7fv%\xfc\xc7\x97\xbf\xbf\xfd) " +
	"\x14\x01\x02\xc8~=$K\x08H\xbf*'\x01\xed\xc5" +
	"\xc7\x7f\x1c\x9d{z\xfe{@Z\xf9U\x80\xad\xcf\xc8" +
	"\x1b\xd8\xd5\xc4/\xf6\xcdN]\xff\xfc\x0f\x1a\xb8\xfb\x98" +
	"\xfc$=\xc6\xed\x1f\x95\x07\xe9\x9f\xe4V\xda\xa6hv" +
	"\xff\xf1'\x0e\x9e\xf9x\xf8\x84`\x8b\x12\xe5=@\xba" +
	"Na\xa6nn:\xf4\xb5w\x8f|\xbd\xf2\x9f{\xd9" +
	"\xa3\xb43S\xd7\xe6\xae\x16\xa6/\xbd\xfel\xd9\x89\x00" +
	"2/\xda\x94>\xe6\xe5&~\xb5\x94\xf8\xe0\xc2\xc0\x91" +
	"\xb9\xf9\x06\xbe\x9cUN\xd3%\x85\xf9\xb2\xa8\x0cR\x12" +
	"T(\x09j\xe77]\xba\xf5\xe8\x83\xad/xx\x04" +
	"\x82af\xe9\xaf\xa9\xd9\x03\xc1=\xb7\xbdPG\xd8[" +
	"\xca\x02\xbd\xc6\xd5\\U^\xa6\x93AF\x98\x91\xfar" +
	"\xff\xd9\xcb}/\x82\xae!z\xd2\xdc?\xaa\x07\x17\xe8" +
	"^&Fw\x07\xef\x03\xb4\xff\xfe\xca;w}\xa6\xf9" +
	"\xfe\xa52\x07e\xa4/2\xa3H/\x07Y\x0c.\x81" +
	"\x8d\xb4\x85B\xcbt]h3\x00\xdd\x12z\x0e\xd0>" +
	"tm\xd7\xe2\xc1#o,\xb9\x88Dp\xebbh\x03" +
	"\xd3\xf6J(\x09@\x13a\xcd\xde\xd95\xf7\x95\x96g" +
	"\xefX\xae\xcd\x8f\xad\x9b\xc2\x12\xd2D\x98)\xee\x0co" +
	"\x07\xb4\xefh\xdb\xb4\xf8\xda\xf6-\xbf\x16\x01N\x849" +
	"\xc0\xbd\xe1$\xe0\x7f\xee\x19\xed\xfde\xf6\x81s\x82\xb5" +
	"\xbd\xe1(\xfbm\x84\x99\xb5\xe3a\xcd\xee\xfa\xce\xe1\xdb" +
	"3\xf1\xe4\xefD\x1d\x8f\x85\xdb\x99\xd01\xa6\xc3.>" +
	"\xd4\xfd\xf0\x17\xde}\xf3|\x05\x01\x89i9S\x168" +
	"\x1bf\x10E\x1f\xff\xf4\x8e7\x1f\xbcpI\xc8\xb5\xa1" +
	"\xa6nF\xcb\x9d\xbf\x92\x1fX\xb8\xebo\x7f\x06\xa2\x89" +
	"\xd00\x154\xd1t\x9a\xf66\xb1Xz\x9a\xee\x03\xa0" +
	"?o\xd2\xec\xccs\x1b\xfa\xbe\xfb\xe8\xe4\x95:\x1aO" +
	"5-\xd03\\x\xbeI\xa1\xf3M\xad\x00\xf6\xebo" +
	"\xfc\xf0\\\xf1\xd5\x7f\xbc\xd5 yP=MC*\x13" +
	"\x0f\xa8\x83t\xb7\xaa\xd0\xdd\xaaf\xff\xfe\xc3\xa3/^" +
	"x\xe2\xd8\xdbB9\x0d\xa9\xbc&\xae\xa5\x92\xf4\xe2\xf9" +
	"\x97\xde\x16IN\xa8\x1c\xa8^\x95apk\xf2bz" +
	"\xdd;\xdb\xdeo`k\xaf\xfa$5\xb8\xad}\xea " +
	"=\xa5*\xf4\x94\xdaj\xff\xf7\xdeT\xee\x0f\xff<\xf7" +
	"A\x83\x0b'\xd5\xd3t\x9e_8\xa5\x0e\xd2\xebj+" +
	"\xedi\xd6\xec\xc4\xf2\xd3\x91N\xf9'\xd7\x05\x10\xb74" +
	"s\x10\xad\x96\xdf,\xaa\xa9\xc8\x87b\xad\x93\xe6\x0e\xe6" +
	"\xdc\xfa\xe6$t\xda\x85b\xde\xca\x1f\xc8\xe70~\xc0" +
	"(L\x17\xfaF\x93V\xbehd\xcd\x0c\xa2\xee\xf7\x05" +
	"\x00\x9c4\x10\xd2\x8f\xb4\x83D\x02\x9aR\x98\xb1\xd2~" +
	"$\x18\xc5\xb1\x0cb\x9d\xaa\x1d\x8a\x99\xcbe\x103\xbe" +
	"\x80\x1eD\xf40O\x07\x85\xeaMw!\xc1\x98\xee\x97" +
	"\x04\x01\x00\x82\xad\xba\x1f\x91]F\x8c\"z\x8d\x92\xfd" +
	"+\x8b\xbb*V\x17w\\t\xfd\x93\x1c\xff\xf2\xd3\x96" +
	"9m\x0d\x8d\xc7\xe2\xe9\\6\xcf#F\x09\x80\x04\xfa" +
	"\x00\x92\xa5\xbb\x8d\xee\x9em\xee%\x9f\x83\x8fiYf" +
	"1^2\xad\x8d#fi&ga\xa9Nf\xd8(" +
	"\xc4'&\xa7\xc7+\x12%\xd0\xfd>?\x80\x1f\x01H" +
	"s7\x80\x1e\xf4\xa1\xde\"a\xec^#7cb4" +
	"\x80B\x92\x00`\x14\xb0N\xe7H>o\xa5\x0b\x93\xf1" +
	"b>om\xcc\x18E\xc37U\xaaC|\xc4gN" +
	"\xb8\xc4\xb9\xbd\x15\x9d$ d\x04 \x1d\xc1\xf4'\x90" +
	"$\x14;kZ\xa3V\xbeh\x02\x8e;\x90\xba\xfd\x1d" +
	"\xd1\xc3\xb9\xea0\xc5@\x12\xb0O\xe1G\xa1\xc3U\xb1" +
	"\x0a\x1d.jI\x16\xdeTI\x04\xad\xdd\x03M\xb9\xc7" +
	"\x9c\xe5:\xd7D\xcc\x9c\x88;!\x8e3\xc8\x14c\xaa" +
	"\xb4\"\xae\xfbs\xf9\xfd\xc3Fa\xe3H\xb2\xccY#" +
	"\xeb\xdf\x90P\x992\x0aHD\xdb\x1e\x00\xc2!\xc1\xcd" +
	",\xe5\x11\xd9=D=\xe2C\x8c\x88\xed\x18\x89\x88\x89" +
	"\xa7C8\xac\x06\x11$$P_c\x831\x9e\x8f." +
	"\xe9\xce\x90\x13\xba\x12i\x07H\xab\x98\xbe\x19I\xa7\xa2" +
	"dM\xab\x8e0\x91\xec\xaa\xc3\x14f\x10\xeb\x08s\xa0" +
	"\x1b,\x97B\xd6,'\xe4T\x09\xa0>#\x93e|" +
	"\x99\x83*\xcfJ\xa7\xe1\xa33\xe0\x89\xde\x0f\x12\xd9\xa9" +
	"\xa0\xb7x\xa03WHo\x07H\xa4SA\xc9\xedq" +
	"\xe8\xcc-r\x0b\xbb\xb7N9\\\xa1.\x85\x1a+\x8e" +
	"\x14\x1e.\x95[\x18\xf7\xbe\xce\xa3\x81\xe4\xec\xb415" +
	"y \xc3\xc9q8\xde\xc28\xde\xe8C\xfd\x8b\x12\"" +
	"\xb6pD\xf6\xf5\x01\xe8w\xfaP\x1f\x97P)\x9a\x13" +
	"7\xc8Y\xd2\x9a-\x98C\xe3\x18\x02\x09C\x0d\xf2T" +
	"\xe8(\x0e\x8ck\xf4\x0b\xacj\x95U\xc9_\xd7\xdb\xd8" +
	"mDa-\x08\xf5\x09;d\xa0#\xf9\xd9|q\xca" +
	"\xb04\xd6\x01u\xd55\xbb\x93\xc5\x9e\xf2\xa1~\xbb\x87" +
	"\xc7\x10;\x1b\xf0\xa1\x9e\x91\x90H\xd8\xc2{\xe5p\x07" +
	"\x80\xbe\xcb\x87\xfa\x98\x84\xc9\xf1\xc9\xacY\xb2\xb0\x19$" +
	"l\x06LNp\xd5(,%\x80\xa8\x01jF.\x9b" +
	"Ga\x97-\x1f\xd7#S\xe61^\x98\xa94[_" +
	"\xe3\xba\x1c\xb8A~P\xd8\xa9\x00\x18W+\xe6\xba\x8b" +
	"g\xbc\x8c\x17\xf0\xf4\xe1\x08\x90~^\xcf\xa1n\x80\xc3" +
	"%3;eN[\xb1\xfd\xb3\x96\xb9r\xaf\xa9\xe4g" +
	"\xc3^\xd3\xef\xd1\xed\xe41\x12\xefM\xc1,\xad\x81\x14" +
	"O\",\xad\x99C\xce`/g\xd0\x8a\x91W\x0d\x1e" +
	"\xc6\x82R\xe3q\x87\xa7\x9c\x17 \x12o\x15[\xc1\xdd" +
	"\xb1\x83;\xcc\\.n\x1d\x1c4\x05\x9dB5vW" +
	"\xaa\xb1KB\xe2\xa4_'K\xbfO\x95\xcbQ\xa8\x04" +
	"wY*\xc7\x91,\xf1rB\"\x96H\xea#\xad\x18" +
	"\xa2&\xb2\xca\x08vFE&\xc6\xcb\xb5~\x85\x8a\xf1" +
	"\x91S\xd3`:\x1a\x85\xd4Q\x09i@Bm\xdc\xb0" +
	"\x0c\xee\x87\xbb\xf8\x96#\xd2\x8a\xe6D\x09o\x02\xeeg" +
	"\xf5\x10\xb9\xa9\x01oU\x9d7c\x15+\x0b\x98_\x0c" +
	"\xd0\xc3C\x88\xb9\x0a\x8f\xff\xb3\x94\"\xde\xbb\xa8\xc1\x90" +
	"\x1a\xad\x19R\xee\xbb\x08\x9dGj\xcd\x90*yC\xca" +
	"%L\x1cRU\x87\xab\x0f\xa9\xaaT\xab\xdd\x9b\x1aL" +
	"2g\xa9[\xbb\x05\x0b\xfbNU\x0bv\xa2\x1e\xf6\x19" +
	"\x05/d\xe7!\x8c\xce\xeb\x9b\x90\x0e!d\x8dm>" +
	"u\x8b\x84\x18s\xd5a9\xe6 \x92@\x94\x04\xa2\xf8" +
	"9\xdcSg~,\xc6#\xf7<p^0\xe8\xbc\xc9" +
	"\x08\xe9\x16<\x88q\x88\xea\xf2Bt\xa1\xea\xb0\xb2\x08" +
	"\xba\x8b\xb6\x97$U\xab\xfa\xca5\xb6f\xc7q\xdad" +
	"m\x9d5^\xf0F\xcc\x92V\xdbL\xf7\x03\xe8\xaa\x0f" +
	"\xf5]l\xb1\xe1b{\x0cP\x18\x81\x11\xb1\xca<\xd7" +
	"\x85\xc3\xd5vX\x8c\x00\xfe/\x00\x00\xff\xff\x9d<\x1b" +
	"\x9a"

func init() {
	schemas.Register(schema_ca7b236fb6fb07c3,
		0x84ec75049386a248,
		0x86dfe7e96ebb541d,
		0x889936d1bbf13253,
		0x92f67194cfd010ca,
		0x9d379fc7e30aecb8,
		0x9eb1a39212b38ec1,
		0xa14ffd6d795dbc31,
		0xa20a1eb578989942,
		0xa28b89f8877a0b1c,
		0xa7d5e26e70f192f5,
		0xb1928944e0fc3173,
		0xbf17007e9138e225,
		0xbf3d5608637940e8,
		0xc03ae9bd42824061,
		0xc57b0d3e5cf4c9ee,
		0xc5bd7ad468fa72a6,
		0xc5dc8978c148f57a,
		0xca4ea71483923045,
		0xcd2937d0c1251d4e,
		0xd17d67c20039536b,
		0xd73f2e504c7f9730,
		0xdfeaf85f84328172,
		0xe2e07eea432c8e12,
		0xe6eb5cba7d06cb58,
		0xec69889c3a1aaf50,
		0xedefcf72d1a4dcd5,
		0xf39598e0c091fed8,
		0xf3c3dfe1133f40f5,
		0xfb36f41541e13f38,
		0xfcd1f0de6c4076f9,
		0xfdb4062d10a3ca31,
		0xfe10400cc1d31474)
}
